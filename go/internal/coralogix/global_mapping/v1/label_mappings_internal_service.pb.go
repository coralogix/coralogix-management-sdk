// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: com/coralogix/global_mapping/v1/label_mappings_internal_service.proto

package v1

import (
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpsertLabelMappingsInternalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mappings []*LabelMapping `protobuf:"bytes,1,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *UpsertLabelMappingsInternalRequest) Reset() {
	*x = UpsertLabelMappingsInternalRequest{}
	mi := &file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertLabelMappingsInternalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertLabelMappingsInternalRequest) ProtoMessage() {}

func (x *UpsertLabelMappingsInternalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertLabelMappingsInternalRequest.ProtoReflect.Descriptor instead.
func (*UpsertLabelMappingsInternalRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDescGZIP(), []int{0}
}

func (x *UpsertLabelMappingsInternalRequest) GetMappings() []*LabelMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type UpsertLabelMappingsInternalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mappings []*LabelMapping `protobuf:"bytes,1,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *UpsertLabelMappingsInternalResponse) Reset() {
	*x = UpsertLabelMappingsInternalResponse{}
	mi := &file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertLabelMappingsInternalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertLabelMappingsInternalResponse) ProtoMessage() {}

func (x *UpsertLabelMappingsInternalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertLabelMappingsInternalResponse.ProtoReflect.Descriptor instead.
func (*UpsertLabelMappingsInternalResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDescGZIP(), []int{1}
}

func (x *UpsertLabelMappingsInternalResponse) GetMappings() []*LabelMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type GetLabelMappingsInternalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels          []*wrappers.StringValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	DataSourceTypes []DataSourceType        `protobuf:"varint,2,rep,packed,name=data_source_types,json=dataSourceTypes,proto3,enum=com.coralogix.global_mapping.v1.DataSourceType" json:"data_source_types,omitempty"`
	DataSources     []*DataSource           `protobuf:"bytes,3,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
}

func (x *GetLabelMappingsInternalRequest) Reset() {
	*x = GetLabelMappingsInternalRequest{}
	mi := &file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLabelMappingsInternalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelMappingsInternalRequest) ProtoMessage() {}

func (x *GetLabelMappingsInternalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelMappingsInternalRequest.ProtoReflect.Descriptor instead.
func (*GetLabelMappingsInternalRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetLabelMappingsInternalRequest) GetLabels() []*wrappers.StringValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetLabelMappingsInternalRequest) GetDataSourceTypes() []DataSourceType {
	if x != nil {
		return x.DataSourceTypes
	}
	return nil
}

func (x *GetLabelMappingsInternalRequest) GetDataSources() []*DataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

type GetLabelMappingsInternalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mappings []*LabelMapping `protobuf:"bytes,1,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *GetLabelMappingsInternalResponse) Reset() {
	*x = GetLabelMappingsInternalResponse{}
	mi := &file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLabelMappingsInternalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelMappingsInternalResponse) ProtoMessage() {}

func (x *GetLabelMappingsInternalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelMappingsInternalResponse.ProtoReflect.Descriptor instead.
func (*GetLabelMappingsInternalResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetLabelMappingsInternalResponse) GetMappings() []*LabelMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type GetLabelValuesInternalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentLabelValues []*LabelValues          `protobuf:"bytes,1,rep,name=current_label_values,json=currentLabelValues,proto3" json:"current_label_values,omitempty"`
	StartTimeSeconds   *wrappers.StringValue   `protobuf:"bytes,2,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"`
	EndTimeSeconds     *wrappers.StringValue   `protobuf:"bytes,3,opt,name=end_time_seconds,json=endTimeSeconds,proto3" json:"end_time_seconds,omitempty"`
	RequestedLabels    []*wrappers.StringValue `protobuf:"bytes,4,rep,name=requested_labels,json=requestedLabels,proto3" json:"requested_labels,omitempty"`
	DataSources        []*DataSource           `protobuf:"bytes,5,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
}

func (x *GetLabelValuesInternalRequest) Reset() {
	*x = GetLabelValuesInternalRequest{}
	mi := &file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLabelValuesInternalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelValuesInternalRequest) ProtoMessage() {}

func (x *GetLabelValuesInternalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelValuesInternalRequest.ProtoReflect.Descriptor instead.
func (*GetLabelValuesInternalRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetLabelValuesInternalRequest) GetCurrentLabelValues() []*LabelValues {
	if x != nil {
		return x.CurrentLabelValues
	}
	return nil
}

func (x *GetLabelValuesInternalRequest) GetStartTimeSeconds() *wrappers.StringValue {
	if x != nil {
		return x.StartTimeSeconds
	}
	return nil
}

func (x *GetLabelValuesInternalRequest) GetEndTimeSeconds() *wrappers.StringValue {
	if x != nil {
		return x.EndTimeSeconds
	}
	return nil
}

func (x *GetLabelValuesInternalRequest) GetRequestedLabels() []*wrappers.StringValue {
	if x != nil {
		return x.RequestedLabels
	}
	return nil
}

func (x *GetLabelValuesInternalRequest) GetDataSources() []*DataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

type GetLabelValuesInternalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelValues []*LabelValues `protobuf:"bytes,1,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	DataSource  *DataSource    `protobuf:"bytes,2,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
}

func (x *GetLabelValuesInternalResponse) Reset() {
	*x = GetLabelValuesInternalResponse{}
	mi := &file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLabelValuesInternalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelValuesInternalResponse) ProtoMessage() {}

func (x *GetLabelValuesInternalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelValuesInternalResponse.ProtoReflect.Descriptor instead.
func (*GetLabelValuesInternalResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetLabelValuesInternalResponse) GetLabelValues() []*LabelValues {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

func (x *GetLabelValuesInternalResponse) GetDataSource() *DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

var File_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto protoreflect.FileDescriptor

var file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDesc = []byte{
	0x0a, 0x45, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x75, 0x0a,
	0x22, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x22, 0x70, 0x0a, 0x23, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x5b, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4e, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x6d, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xac, 0x03, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e,
	0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4a,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x4c, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x8c, 0x05,
	0x0a, 0x1c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xce,
	0x01, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x43,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0xc2, 0xb8, 0x02, 0x20, 0x0a,
	0x1e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0xc2, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x40, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0xc2, 0xb8, 0x02, 0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x20, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x20, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x12, 0xd5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3a, 0xc2, 0xb8, 0x02, 0x36, 0x0a, 0x34, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20,
	0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x70, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDescOnce sync.Once
	file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDescData = file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDesc
)

func file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDescGZIP() []byte {
	file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDescOnce.Do(func() {
		file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDescData)
	})
	return file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDescData
}

var file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_goTypes = []any{
	(*UpsertLabelMappingsInternalRequest)(nil),  // 0: com.coralogix.global_mapping.v1.UpsertLabelMappingsInternalRequest
	(*UpsertLabelMappingsInternalResponse)(nil), // 1: com.coralogix.global_mapping.v1.UpsertLabelMappingsInternalResponse
	(*GetLabelMappingsInternalRequest)(nil),     // 2: com.coralogix.global_mapping.v1.GetLabelMappingsInternalRequest
	(*GetLabelMappingsInternalResponse)(nil),    // 3: com.coralogix.global_mapping.v1.GetLabelMappingsInternalResponse
	(*GetLabelValuesInternalRequest)(nil),       // 4: com.coralogix.global_mapping.v1.GetLabelValuesInternalRequest
	(*GetLabelValuesInternalResponse)(nil),      // 5: com.coralogix.global_mapping.v1.GetLabelValuesInternalResponse
	(*LabelMapping)(nil),                        // 6: com.coralogix.global_mapping.v1.LabelMapping
	(*wrappers.StringValue)(nil),                // 7: google.protobuf.StringValue
	(DataSourceType)(0),                         // 8: com.coralogix.global_mapping.v1.DataSourceType
	(*DataSource)(nil),                          // 9: com.coralogix.global_mapping.v1.DataSource
	(*LabelValues)(nil),                         // 10: com.coralogix.global_mapping.v1.LabelValues
}
var file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_depIdxs = []int32{
	6,  // 0: com.coralogix.global_mapping.v1.UpsertLabelMappingsInternalRequest.mappings:type_name -> com.coralogix.global_mapping.v1.LabelMapping
	6,  // 1: com.coralogix.global_mapping.v1.UpsertLabelMappingsInternalResponse.mappings:type_name -> com.coralogix.global_mapping.v1.LabelMapping
	7,  // 2: com.coralogix.global_mapping.v1.GetLabelMappingsInternalRequest.labels:type_name -> google.protobuf.StringValue
	8,  // 3: com.coralogix.global_mapping.v1.GetLabelMappingsInternalRequest.data_source_types:type_name -> com.coralogix.global_mapping.v1.DataSourceType
	9,  // 4: com.coralogix.global_mapping.v1.GetLabelMappingsInternalRequest.data_sources:type_name -> com.coralogix.global_mapping.v1.DataSource
	6,  // 5: com.coralogix.global_mapping.v1.GetLabelMappingsInternalResponse.mappings:type_name -> com.coralogix.global_mapping.v1.LabelMapping
	10, // 6: com.coralogix.global_mapping.v1.GetLabelValuesInternalRequest.current_label_values:type_name -> com.coralogix.global_mapping.v1.LabelValues
	7,  // 7: com.coralogix.global_mapping.v1.GetLabelValuesInternalRequest.start_time_seconds:type_name -> google.protobuf.StringValue
	7,  // 8: com.coralogix.global_mapping.v1.GetLabelValuesInternalRequest.end_time_seconds:type_name -> google.protobuf.StringValue
	7,  // 9: com.coralogix.global_mapping.v1.GetLabelValuesInternalRequest.requested_labels:type_name -> google.protobuf.StringValue
	9,  // 10: com.coralogix.global_mapping.v1.GetLabelValuesInternalRequest.data_sources:type_name -> com.coralogix.global_mapping.v1.DataSource
	10, // 11: com.coralogix.global_mapping.v1.GetLabelValuesInternalResponse.label_values:type_name -> com.coralogix.global_mapping.v1.LabelValues
	9,  // 12: com.coralogix.global_mapping.v1.GetLabelValuesInternalResponse.data_source:type_name -> com.coralogix.global_mapping.v1.DataSource
	0,  // 13: com.coralogix.global_mapping.v1.LabelMappingsInternalService.UpsertLabelMappingsInternal:input_type -> com.coralogix.global_mapping.v1.UpsertLabelMappingsInternalRequest
	2,  // 14: com.coralogix.global_mapping.v1.LabelMappingsInternalService.GetLabelMappingsInternal:input_type -> com.coralogix.global_mapping.v1.GetLabelMappingsInternalRequest
	4,  // 15: com.coralogix.global_mapping.v1.LabelMappingsInternalService.GetLabelValuesInternal:input_type -> com.coralogix.global_mapping.v1.GetLabelValuesInternalRequest
	1,  // 16: com.coralogix.global_mapping.v1.LabelMappingsInternalService.UpsertLabelMappingsInternal:output_type -> com.coralogix.global_mapping.v1.UpsertLabelMappingsInternalResponse
	3,  // 17: com.coralogix.global_mapping.v1.LabelMappingsInternalService.GetLabelMappingsInternal:output_type -> com.coralogix.global_mapping.v1.GetLabelMappingsInternalResponse
	5,  // 18: com.coralogix.global_mapping.v1.LabelMappingsInternalService.GetLabelValuesInternal:output_type -> com.coralogix.global_mapping.v1.GetLabelValuesInternalResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_init() }
func file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_init() {
	if File_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto != nil {
		return
	}
	file_com_coralogix_global_mapping_v1_audit_log_proto_init()
	file_com_coralogix_global_mapping_v1_data_source_proto_init()
	file_com_coralogix_global_mapping_v1_data_source_type_proto_init()
	file_com_coralogix_global_mapping_v1_label_mapping_proto_init()
	file_com_coralogix_global_mapping_v1_label_values_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_goTypes,
		DependencyIndexes: file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_depIdxs,
		MessageInfos:      file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_msgTypes,
	}.Build()
	File_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto = out.File
	file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_rawDesc = nil
	file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_goTypes = nil
	file_com_coralogix_global_mapping_v1_label_mappings_internal_service_proto_depIdxs = nil
}
