// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.26.1
// source: com/coralogix/measurements/v1/measurements_service.proto

package v1

import (
	v1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/global_mapping/v1"
	_ "github.com/coralogix/coralogix-management-sdk/go/internal/coralogixapis/apm/common/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetQueriesRequest struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	ExtractedLabels  []*v1.ExtractedLabel    `protobuf:"bytes,1,rep,name=extracted_labels,json=extractedLabels,proto3" json:"extracted_labels,omitempty"`
	MeasurementNames []string                `protobuf:"bytes,2,rep,name=measurement_names,json=measurementNames,proto3" json:"measurement_names,omitempty"`
	StartTimeSeconds *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"`
	EndTimeSeconds   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=end_time_seconds,json=endTimeSeconds,proto3" json:"end_time_seconds,omitempty"`
	Topk             *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=topk,proto3" json:"topk,omitempty"`
	// Deprecated: Marked as deprecated in com/coralogix/measurements/v1/measurements_service.proto.
	OrderingLabel       *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=ordering_label,json=orderingLabel,proto3" json:"ordering_label,omitempty"`
	MeasurementMetadata []*v1.MeasurementMetadata `protobuf:"bytes,7,rep,name=measurement_metadata,json=measurementMetadata,proto3" json:"measurement_metadata,omitempty"`
	// Deprecated: Marked as deprecated in com/coralogix/measurements/v1/measurements_service.proto.
	DataSourceProvider *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=data_source_provider,json=dataSourceProvider,proto3" json:"data_source_provider,omitempty"`
	SubjectLabel       *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=subject_label,json=subjectLabel,proto3" json:"subject_label,omitempty"`
	DataSource         *v1.DataSource          `protobuf:"bytes,10,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	PrometheusLabels   []*v1.LabelValues       `protobuf:"bytes,11,rep,name=prometheus_labels,json=prometheusLabels,proto3" json:"prometheus_labels,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetQueriesRequest) Reset() {
	*x = GetQueriesRequest{}
	mi := &file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueriesRequest) ProtoMessage() {}

func (x *GetQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueriesRequest.ProtoReflect.Descriptor instead.
func (*GetQueriesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_measurements_v1_measurements_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetQueriesRequest) GetExtractedLabels() []*v1.ExtractedLabel {
	if x != nil {
		return x.ExtractedLabels
	}
	return nil
}

func (x *GetQueriesRequest) GetMeasurementNames() []string {
	if x != nil {
		return x.MeasurementNames
	}
	return nil
}

func (x *GetQueriesRequest) GetStartTimeSeconds() *wrapperspb.StringValue {
	if x != nil {
		return x.StartTimeSeconds
	}
	return nil
}

func (x *GetQueriesRequest) GetEndTimeSeconds() *wrapperspb.StringValue {
	if x != nil {
		return x.EndTimeSeconds
	}
	return nil
}

func (x *GetQueriesRequest) GetTopk() *wrapperspb.Int32Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogix/measurements/v1/measurements_service.proto.
func (x *GetQueriesRequest) GetOrderingLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.OrderingLabel
	}
	return nil
}

func (x *GetQueriesRequest) GetMeasurementMetadata() []*v1.MeasurementMetadata {
	if x != nil {
		return x.MeasurementMetadata
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogix/measurements/v1/measurements_service.proto.
func (x *GetQueriesRequest) GetDataSourceProvider() *wrapperspb.StringValue {
	if x != nil {
		return x.DataSourceProvider
	}
	return nil
}

func (x *GetQueriesRequest) GetSubjectLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.SubjectLabel
	}
	return nil
}

func (x *GetQueriesRequest) GetDataSource() *v1.DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

func (x *GetQueriesRequest) GetPrometheusLabels() []*v1.LabelValues {
	if x != nil {
		return x.PrometheusLabels
	}
	return nil
}

type GetQueriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queries       []*v1.MeasurementQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueriesResponse) Reset() {
	*x = GetQueriesResponse{}
	mi := &file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueriesResponse) ProtoMessage() {}

func (x *GetQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueriesResponse.ProtoReflect.Descriptor instead.
func (*GetQueriesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_measurements_v1_measurements_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetQueriesResponse) GetQueries() []*v1.MeasurementQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type GetMeasurementsTableRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in com/coralogix/measurements/v1/measurements_service.proto.
	RowLabelValues      *v1.LabelValues           `protobuf:"bytes,1,opt,name=row_label_values,json=rowLabelValues,proto3" json:"row_label_values,omitempty"`
	MeasurementNames    []string                  `protobuf:"bytes,2,rep,name=measurement_names,json=measurementNames,proto3" json:"measurement_names,omitempty"`
	StartTimeSeconds    *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"`
	EndTimeSeconds      *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=end_time_seconds,json=endTimeSeconds,proto3" json:"end_time_seconds,omitempty"`
	Topk                *wrapperspb.Int32Value    `protobuf:"bytes,5,opt,name=topk,proto3" json:"topk,omitempty"`
	OrderingLabel       *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=ordering_label,json=orderingLabel,proto3" json:"ordering_label,omitempty"`
	MeasurementMetadata []*v1.MeasurementMetadata `protobuf:"bytes,7,rep,name=measurement_metadata,json=measurementMetadata,proto3" json:"measurement_metadata,omitempty"`
	PaginationData      *v1.PaginationData        `protobuf:"bytes,8,opt,name=pagination_data,json=paginationData,proto3" json:"pagination_data,omitempty"`
	// Deprecated: Marked as deprecated in com/coralogix/measurements/v1/measurements_service.proto.
	DataSourceProvider *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=data_source_provider,json=dataSourceProvider,proto3" json:"data_source_provider,omitempty"`
	SubjectLabel       *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=subject_label,json=subjectLabel,proto3" json:"subject_label,omitempty"`
	LabelValues        []*v1.LabelValues       `protobuf:"bytes,11,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	DataSource         *v1.DataSource          `protobuf:"bytes,12,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetMeasurementsTableRequest) Reset() {
	*x = GetMeasurementsTableRequest{}
	mi := &file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMeasurementsTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeasurementsTableRequest) ProtoMessage() {}

func (x *GetMeasurementsTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeasurementsTableRequest.ProtoReflect.Descriptor instead.
func (*GetMeasurementsTableRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_measurements_v1_measurements_service_proto_rawDescGZIP(), []int{2}
}

// Deprecated: Marked as deprecated in com/coralogix/measurements/v1/measurements_service.proto.
func (x *GetMeasurementsTableRequest) GetRowLabelValues() *v1.LabelValues {
	if x != nil {
		return x.RowLabelValues
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetMeasurementNames() []string {
	if x != nil {
		return x.MeasurementNames
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetStartTimeSeconds() *wrapperspb.StringValue {
	if x != nil {
		return x.StartTimeSeconds
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetEndTimeSeconds() *wrapperspb.StringValue {
	if x != nil {
		return x.EndTimeSeconds
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetTopk() *wrapperspb.Int32Value {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetOrderingLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.OrderingLabel
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetMeasurementMetadata() []*v1.MeasurementMetadata {
	if x != nil {
		return x.MeasurementMetadata
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetPaginationData() *v1.PaginationData {
	if x != nil {
		return x.PaginationData
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogix/measurements/v1/measurements_service.proto.
func (x *GetMeasurementsTableRequest) GetDataSourceProvider() *wrapperspb.StringValue {
	if x != nil {
		return x.DataSourceProvider
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetSubjectLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.SubjectLabel
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetLabelValues() []*v1.LabelValues {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

func (x *GetMeasurementsTableRequest) GetDataSource() *v1.DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

type GetMeasurementsTableResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PageSize        *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageIndex       *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	Rows            []*v1.TableRow         `protobuf:"bytes,3,rep,name=rows,proto3" json:"rows,omitempty"`
	TotalRowCount   *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=total_row_count,json=totalRowCount,proto3" json:"total_row_count,omitempty"`
	ExistingColumns []string               `protobuf:"bytes,5,rep,name=existing_columns,json=existingColumns,proto3" json:"existing_columns,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMeasurementsTableResponse) Reset() {
	*x = GetMeasurementsTableResponse{}
	mi := &file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMeasurementsTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeasurementsTableResponse) ProtoMessage() {}

func (x *GetMeasurementsTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeasurementsTableResponse.ProtoReflect.Descriptor instead.
func (*GetMeasurementsTableResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_measurements_v1_measurements_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetMeasurementsTableResponse) GetPageSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.PageSize
	}
	return nil
}

func (x *GetMeasurementsTableResponse) GetPageIndex() *wrapperspb.Int32Value {
	if x != nil {
		return x.PageIndex
	}
	return nil
}

func (x *GetMeasurementsTableResponse) GetRows() []*v1.TableRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *GetMeasurementsTableResponse) GetTotalRowCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.TotalRowCount
	}
	return nil
}

func (x *GetMeasurementsTableResponse) GetExistingColumns() []string {
	if x != nil {
		return x.ExistingColumns
	}
	return nil
}

type GetHierarchyRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Provider      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHierarchyRequest) Reset() {
	*x = GetHierarchyRequest{}
	mi := &file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHierarchyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHierarchyRequest) ProtoMessage() {}

func (x *GetHierarchyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHierarchyRequest.ProtoReflect.Descriptor instead.
func (*GetHierarchyRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_measurements_v1_measurements_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetHierarchyRequest) GetProvider() *wrapperspb.StringValue {
	if x != nil {
		return x.Provider
	}
	return nil
}

type GetHierarchyResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Exporters     []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=exporters,proto3" json:"exporters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHierarchyResponse) Reset() {
	*x = GetHierarchyResponse{}
	mi := &file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHierarchyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHierarchyResponse) ProtoMessage() {}

func (x *GetHierarchyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHierarchyResponse.ProtoReflect.Descriptor instead.
func (*GetHierarchyResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_measurements_v1_measurements_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetHierarchyResponse) GetExporters() []*wrapperspb.StringValue {
	if x != nil {
		return x.Exporters
	}
	return nil
}

var File_com_coralogix_measurements_v1_measurements_service_proto protoreflect.FileDescriptor

var file_com_coralogix_measurements_v1_measurements_service_proto_rawDesc = []byte{
	0x0a, 0x38, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x6d,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x06, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x6f, 0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x47, 0x0a,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x67, 0x0a, 0x14, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x52, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4c, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65,
	0x75, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x10, 0x70,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22,
	0x61, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x22, 0xa9, 0x07, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5a, 0x0a, 0x10, 0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e,
	0x72, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b,
	0x12, 0x43, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x67, 0x0a, 0x14, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x58,
	0x0a, 0x0f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x4f, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x4c, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xc3,
	0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x69, 0x65, 0x72, 0x61,
	0x72, 0x63, 0x68, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x48, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x09, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x32, 0xda, 0x03, 0x0a, 0x13, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0xc2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x20, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0xc2, 0xb8, 0x02, 0x17,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x20, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x20, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x48,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x13, 0xc2, 0xb8, 0x02, 0x0f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x20, 0x48, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_measurements_v1_measurements_service_proto_rawDescOnce sync.Once
	file_com_coralogix_measurements_v1_measurements_service_proto_rawDescData = file_com_coralogix_measurements_v1_measurements_service_proto_rawDesc
)

func file_com_coralogix_measurements_v1_measurements_service_proto_rawDescGZIP() []byte {
	file_com_coralogix_measurements_v1_measurements_service_proto_rawDescOnce.Do(func() {
		file_com_coralogix_measurements_v1_measurements_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_measurements_v1_measurements_service_proto_rawDescData)
	})
	return file_com_coralogix_measurements_v1_measurements_service_proto_rawDescData
}

var file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_com_coralogix_measurements_v1_measurements_service_proto_goTypes = []any{
	(*GetQueriesRequest)(nil),            // 0: com.coralogix.measurements.v1.GetQueriesRequest
	(*GetQueriesResponse)(nil),           // 1: com.coralogix.measurements.v1.GetQueriesResponse
	(*GetMeasurementsTableRequest)(nil),  // 2: com.coralogix.measurements.v1.GetMeasurementsTableRequest
	(*GetMeasurementsTableResponse)(nil), // 3: com.coralogix.measurements.v1.GetMeasurementsTableResponse
	(*GetHierarchyRequest)(nil),          // 4: com.coralogix.measurements.v1.GetHierarchyRequest
	(*GetHierarchyResponse)(nil),         // 5: com.coralogix.measurements.v1.GetHierarchyResponse
	(*v1.ExtractedLabel)(nil),            // 6: com.coralogix.global_mapping.v1.ExtractedLabel
	(*wrapperspb.StringValue)(nil),       // 7: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),        // 8: google.protobuf.Int32Value
	(*v1.MeasurementMetadata)(nil),       // 9: com.coralogix.global_mapping.v1.MeasurementMetadata
	(*v1.DataSource)(nil),                // 10: com.coralogix.global_mapping.v1.DataSource
	(*v1.LabelValues)(nil),               // 11: com.coralogix.global_mapping.v1.LabelValues
	(*v1.MeasurementQuery)(nil),          // 12: com.coralogix.global_mapping.v1.MeasurementQuery
	(*v1.PaginationData)(nil),            // 13: com.coralogix.global_mapping.v1.PaginationData
	(*v1.TableRow)(nil),                  // 14: com.coralogix.global_mapping.v1.TableRow
}
var file_com_coralogix_measurements_v1_measurements_service_proto_depIdxs = []int32{
	6,  // 0: com.coralogix.measurements.v1.GetQueriesRequest.extracted_labels:type_name -> com.coralogix.global_mapping.v1.ExtractedLabel
	7,  // 1: com.coralogix.measurements.v1.GetQueriesRequest.start_time_seconds:type_name -> google.protobuf.StringValue
	7,  // 2: com.coralogix.measurements.v1.GetQueriesRequest.end_time_seconds:type_name -> google.protobuf.StringValue
	8,  // 3: com.coralogix.measurements.v1.GetQueriesRequest.topk:type_name -> google.protobuf.Int32Value
	7,  // 4: com.coralogix.measurements.v1.GetQueriesRequest.ordering_label:type_name -> google.protobuf.StringValue
	9,  // 5: com.coralogix.measurements.v1.GetQueriesRequest.measurement_metadata:type_name -> com.coralogix.global_mapping.v1.MeasurementMetadata
	7,  // 6: com.coralogix.measurements.v1.GetQueriesRequest.data_source_provider:type_name -> google.protobuf.StringValue
	7,  // 7: com.coralogix.measurements.v1.GetQueriesRequest.subject_label:type_name -> google.protobuf.StringValue
	10, // 8: com.coralogix.measurements.v1.GetQueriesRequest.data_source:type_name -> com.coralogix.global_mapping.v1.DataSource
	11, // 9: com.coralogix.measurements.v1.GetQueriesRequest.prometheus_labels:type_name -> com.coralogix.global_mapping.v1.LabelValues
	12, // 10: com.coralogix.measurements.v1.GetQueriesResponse.queries:type_name -> com.coralogix.global_mapping.v1.MeasurementQuery
	11, // 11: com.coralogix.measurements.v1.GetMeasurementsTableRequest.row_label_values:type_name -> com.coralogix.global_mapping.v1.LabelValues
	7,  // 12: com.coralogix.measurements.v1.GetMeasurementsTableRequest.start_time_seconds:type_name -> google.protobuf.StringValue
	7,  // 13: com.coralogix.measurements.v1.GetMeasurementsTableRequest.end_time_seconds:type_name -> google.protobuf.StringValue
	8,  // 14: com.coralogix.measurements.v1.GetMeasurementsTableRequest.topk:type_name -> google.protobuf.Int32Value
	7,  // 15: com.coralogix.measurements.v1.GetMeasurementsTableRequest.ordering_label:type_name -> google.protobuf.StringValue
	9,  // 16: com.coralogix.measurements.v1.GetMeasurementsTableRequest.measurement_metadata:type_name -> com.coralogix.global_mapping.v1.MeasurementMetadata
	13, // 17: com.coralogix.measurements.v1.GetMeasurementsTableRequest.pagination_data:type_name -> com.coralogix.global_mapping.v1.PaginationData
	7,  // 18: com.coralogix.measurements.v1.GetMeasurementsTableRequest.data_source_provider:type_name -> google.protobuf.StringValue
	7,  // 19: com.coralogix.measurements.v1.GetMeasurementsTableRequest.subject_label:type_name -> google.protobuf.StringValue
	11, // 20: com.coralogix.measurements.v1.GetMeasurementsTableRequest.label_values:type_name -> com.coralogix.global_mapping.v1.LabelValues
	10, // 21: com.coralogix.measurements.v1.GetMeasurementsTableRequest.data_source:type_name -> com.coralogix.global_mapping.v1.DataSource
	8,  // 22: com.coralogix.measurements.v1.GetMeasurementsTableResponse.page_size:type_name -> google.protobuf.Int32Value
	8,  // 23: com.coralogix.measurements.v1.GetMeasurementsTableResponse.page_index:type_name -> google.protobuf.Int32Value
	14, // 24: com.coralogix.measurements.v1.GetMeasurementsTableResponse.rows:type_name -> com.coralogix.global_mapping.v1.TableRow
	8,  // 25: com.coralogix.measurements.v1.GetMeasurementsTableResponse.total_row_count:type_name -> google.protobuf.Int32Value
	7,  // 26: com.coralogix.measurements.v1.GetHierarchyRequest.provider:type_name -> google.protobuf.StringValue
	7,  // 27: com.coralogix.measurements.v1.GetHierarchyResponse.exporters:type_name -> google.protobuf.StringValue
	0,  // 28: com.coralogix.measurements.v1.MeasurementsService.GetQueries:input_type -> com.coralogix.measurements.v1.GetQueriesRequest
	2,  // 29: com.coralogix.measurements.v1.MeasurementsService.GetMeasurementsTable:input_type -> com.coralogix.measurements.v1.GetMeasurementsTableRequest
	4,  // 30: com.coralogix.measurements.v1.MeasurementsService.GetHierarchy:input_type -> com.coralogix.measurements.v1.GetHierarchyRequest
	1,  // 31: com.coralogix.measurements.v1.MeasurementsService.GetQueries:output_type -> com.coralogix.measurements.v1.GetQueriesResponse
	3,  // 32: com.coralogix.measurements.v1.MeasurementsService.GetMeasurementsTable:output_type -> com.coralogix.measurements.v1.GetMeasurementsTableResponse
	5,  // 33: com.coralogix.measurements.v1.MeasurementsService.GetHierarchy:output_type -> com.coralogix.measurements.v1.GetHierarchyResponse
	31, // [31:34] is the sub-list for method output_type
	28, // [28:31] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_com_coralogix_measurements_v1_measurements_service_proto_init() }
func file_com_coralogix_measurements_v1_measurements_service_proto_init() {
	if File_com_coralogix_measurements_v1_measurements_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_measurements_v1_measurements_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogix_measurements_v1_measurements_service_proto_goTypes,
		DependencyIndexes: file_com_coralogix_measurements_v1_measurements_service_proto_depIdxs,
		MessageInfos:      file_com_coralogix_measurements_v1_measurements_service_proto_msgTypes,
	}.Build()
	File_com_coralogix_measurements_v1_measurements_service_proto = out.File
	file_com_coralogix_measurements_v1_measurements_service_proto_rawDesc = nil
	file_com_coralogix_measurements_v1_measurements_service_proto_goTypes = nil
	file_com_coralogix_measurements_v1_measurements_service_proto_depIdxs = nil
}
