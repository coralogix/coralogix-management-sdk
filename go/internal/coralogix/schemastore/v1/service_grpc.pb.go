// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: com/coralogix/schemastore/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SchemaStoreInternalService_LogFields_FullMethodName                          = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/LogFields"
	SchemaStoreInternalService_LogLabels_FullMethodName                          = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/LogLabels"
	SchemaStoreInternalService_TracingFields_FullMethodName                      = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/TracingFields"
	SchemaStoreInternalService_TracingLabels_FullMethodName                      = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/TracingLabels"
	SchemaStoreInternalService_MetricNames_FullMethodName                        = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/MetricNames"
	SchemaStoreInternalService_MetricLabels_FullMethodName                       = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/MetricLabels"
	SchemaStoreInternalService_BatchTracingSamples_FullMethodName                = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/BatchTracingSamples"
	SchemaStoreInternalService_Observations_FullMethodName                       = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/Observations"
	SchemaStoreInternalService_ListDatasets_FullMethodName                       = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/ListDatasets"
	SchemaStoreInternalService_BatchCardinality_FullMethodName                   = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/BatchCardinality"
	SchemaStoreInternalService_CreateVirtualField_FullMethodName                 = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/CreateVirtualField"
	SchemaStoreInternalService_ListVirtualFields_FullMethodName                  = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/ListVirtualFields"
	SchemaStoreInternalService_DeleteVirtualField_FullMethodName                 = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/DeleteVirtualField"
	SchemaStoreInternalService_CreateNamedSchemaTemplate_FullMethodName          = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/CreateNamedSchemaTemplate"
	SchemaStoreInternalService_ListNamedSchemaTemplates_FullMethodName           = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/ListNamedSchemaTemplates"
	SchemaStoreInternalService_GetNamedSchemaTemplate_FullMethodName             = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/GetNamedSchemaTemplate"
	SchemaStoreInternalService_DeleteNamedSchemaTemplate_FullMethodName          = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/DeleteNamedSchemaTemplate"
	SchemaStoreInternalService_BatchGetNamedSchemaTemplate_FullMethodName        = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/BatchGetNamedSchemaTemplate"
	SchemaStoreInternalService_EmbeddingLookup_FullMethodName                    = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/EmbeddingLookup"
	SchemaStoreInternalService_HasEmbeddings_FullMethodName                      = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/HasEmbeddings"
	SchemaStoreInternalService_GetMergedNamedSchemaTemplateFields_FullMethodName = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/GetMergedNamedSchemaTemplateFields"
)

// SchemaStoreInternalServiceClient is the client API for SchemaStoreInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaStoreInternalServiceClient interface {
	// Deprecated: Do not use.
	LogFields(ctx context.Context, in *LogFieldsRequest, opts ...grpc.CallOption) (*LogFieldsResponse, error)
	// Deprecated: Do not use.
	LogLabels(ctx context.Context, in *LogLabelsRequest, opts ...grpc.CallOption) (*LogLabelsResponse, error)
	// Deprecated: Do not use.
	TracingFields(ctx context.Context, in *TracingFieldsRequest, opts ...grpc.CallOption) (*TracingFieldsResponse, error)
	// Deprecated: Do not use.
	TracingLabels(ctx context.Context, in *TracingLabelsRequest, opts ...grpc.CallOption) (*TracingLabelsResponse, error)
	// Deprecated: Do not use.
	MetricNames(ctx context.Context, in *MetricNamesRequest, opts ...grpc.CallOption) (*MetricNamesResponse, error)
	// Deprecated: Do not use.
	MetricLabels(ctx context.Context, in *MetricLabelsRequest, opts ...grpc.CallOption) (*MetricLabelsResponse, error)
	BatchTracingSamples(ctx context.Context, in *BatchTracingSamplesRequest, opts ...grpc.CallOption) (*BatchTracingSamplesResponse, error)
	Observations(ctx context.Context, in *ObservationsRequest, opts ...grpc.CallOption) (*ObservationsResponse, error)
	// Deprecated: Do not use.
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error)
	BatchCardinality(ctx context.Context, in *BatchCardinalityRequest, opts ...grpc.CallOption) (*BatchCardinalityResponse, error)
	CreateVirtualField(ctx context.Context, in *CreateVirtualFieldRequest, opts ...grpc.CallOption) (*CreateVirtualFieldResponse, error)
	ListVirtualFields(ctx context.Context, in *ListVirtualFieldsRequest, opts ...grpc.CallOption) (*ListVirtualFieldsResponse, error)
	DeleteVirtualField(ctx context.Context, in *DeleteVirtualFieldRequest, opts ...grpc.CallOption) (*DeleteVirtualFieldResponse, error)
	CreateNamedSchemaTemplate(ctx context.Context, in *CreateNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*CreateNamedSchemaTemplateResponse, error)
	ListNamedSchemaTemplates(ctx context.Context, in *ListNamedSchemaTemplatesRequest, opts ...grpc.CallOption) (*ListNamedSchemaTemplatesResponse, error)
	GetNamedSchemaTemplate(ctx context.Context, in *GetNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*GetNamedSchemaTemplateResponse, error)
	DeleteNamedSchemaTemplate(ctx context.Context, in *DeleteNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*DeleteNamedSchemaTemplateResponse, error)
	BatchGetNamedSchemaTemplate(ctx context.Context, in *BatchGetNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*BatchGetNamedSchemaTemplateResponse, error)
	EmbeddingLookup(ctx context.Context, in *EmbeddingLookupRequest, opts ...grpc.CallOption) (*EmbeddingLookupResponse, error)
	HasEmbeddings(ctx context.Context, in *HasEmbeddingsRequest, opts ...grpc.CallOption) (*HasEmbeddingsResponse, error)
	GetMergedNamedSchemaTemplateFields(ctx context.Context, in *GetMergedNamedSchemaTemplateFieldsRequest, opts ...grpc.CallOption) (*GetMergedNamedSchemaTemplateFieldsResponse, error)
}

type schemaStoreInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaStoreInternalServiceClient(cc grpc.ClientConnInterface) SchemaStoreInternalServiceClient {
	return &schemaStoreInternalServiceClient{cc}
}

// Deprecated: Do not use.
func (c *schemaStoreInternalServiceClient) LogFields(ctx context.Context, in *LogFieldsRequest, opts ...grpc.CallOption) (*LogFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogFieldsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_LogFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreInternalServiceClient) LogLabels(ctx context.Context, in *LogLabelsRequest, opts ...grpc.CallOption) (*LogLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogLabelsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_LogLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreInternalServiceClient) TracingFields(ctx context.Context, in *TracingFieldsRequest, opts ...grpc.CallOption) (*TracingFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TracingFieldsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_TracingFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreInternalServiceClient) TracingLabels(ctx context.Context, in *TracingLabelsRequest, opts ...grpc.CallOption) (*TracingLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TracingLabelsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_TracingLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreInternalServiceClient) MetricNames(ctx context.Context, in *MetricNamesRequest, opts ...grpc.CallOption) (*MetricNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricNamesResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_MetricNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreInternalServiceClient) MetricLabels(ctx context.Context, in *MetricLabelsRequest, opts ...grpc.CallOption) (*MetricLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricLabelsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_MetricLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) BatchTracingSamples(ctx context.Context, in *BatchTracingSamplesRequest, opts ...grpc.CallOption) (*BatchTracingSamplesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchTracingSamplesResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_BatchTracingSamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) Observations(ctx context.Context, in *ObservationsRequest, opts ...grpc.CallOption) (*ObservationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObservationsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_Observations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreInternalServiceClient) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDatasetsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_ListDatasets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) BatchCardinality(ctx context.Context, in *BatchCardinalityRequest, opts ...grpc.CallOption) (*BatchCardinalityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCardinalityResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_BatchCardinality_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) CreateVirtualField(ctx context.Context, in *CreateVirtualFieldRequest, opts ...grpc.CallOption) (*CreateVirtualFieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVirtualFieldResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_CreateVirtualField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) ListVirtualFields(ctx context.Context, in *ListVirtualFieldsRequest, opts ...grpc.CallOption) (*ListVirtualFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVirtualFieldsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_ListVirtualFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) DeleteVirtualField(ctx context.Context, in *DeleteVirtualFieldRequest, opts ...grpc.CallOption) (*DeleteVirtualFieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVirtualFieldResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_DeleteVirtualField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) CreateNamedSchemaTemplate(ctx context.Context, in *CreateNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*CreateNamedSchemaTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNamedSchemaTemplateResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_CreateNamedSchemaTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) ListNamedSchemaTemplates(ctx context.Context, in *ListNamedSchemaTemplatesRequest, opts ...grpc.CallOption) (*ListNamedSchemaTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamedSchemaTemplatesResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_ListNamedSchemaTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) GetNamedSchemaTemplate(ctx context.Context, in *GetNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*GetNamedSchemaTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNamedSchemaTemplateResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_GetNamedSchemaTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) DeleteNamedSchemaTemplate(ctx context.Context, in *DeleteNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*DeleteNamedSchemaTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNamedSchemaTemplateResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_DeleteNamedSchemaTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) BatchGetNamedSchemaTemplate(ctx context.Context, in *BatchGetNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*BatchGetNamedSchemaTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetNamedSchemaTemplateResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_BatchGetNamedSchemaTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) EmbeddingLookup(ctx context.Context, in *EmbeddingLookupRequest, opts ...grpc.CallOption) (*EmbeddingLookupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmbeddingLookupResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_EmbeddingLookup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) HasEmbeddings(ctx context.Context, in *HasEmbeddingsRequest, opts ...grpc.CallOption) (*HasEmbeddingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasEmbeddingsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_HasEmbeddings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) GetMergedNamedSchemaTemplateFields(ctx context.Context, in *GetMergedNamedSchemaTemplateFieldsRequest, opts ...grpc.CallOption) (*GetMergedNamedSchemaTemplateFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMergedNamedSchemaTemplateFieldsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_GetMergedNamedSchemaTemplateFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaStoreInternalServiceServer is the server API for SchemaStoreInternalService service.
// All implementations must embed UnimplementedSchemaStoreInternalServiceServer
// for forward compatibility.
type SchemaStoreInternalServiceServer interface {
	// Deprecated: Do not use.
	LogFields(context.Context, *LogFieldsRequest) (*LogFieldsResponse, error)
	// Deprecated: Do not use.
	LogLabels(context.Context, *LogLabelsRequest) (*LogLabelsResponse, error)
	// Deprecated: Do not use.
	TracingFields(context.Context, *TracingFieldsRequest) (*TracingFieldsResponse, error)
	// Deprecated: Do not use.
	TracingLabels(context.Context, *TracingLabelsRequest) (*TracingLabelsResponse, error)
	// Deprecated: Do not use.
	MetricNames(context.Context, *MetricNamesRequest) (*MetricNamesResponse, error)
	// Deprecated: Do not use.
	MetricLabels(context.Context, *MetricLabelsRequest) (*MetricLabelsResponse, error)
	BatchTracingSamples(context.Context, *BatchTracingSamplesRequest) (*BatchTracingSamplesResponse, error)
	Observations(context.Context, *ObservationsRequest) (*ObservationsResponse, error)
	// Deprecated: Do not use.
	ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error)
	BatchCardinality(context.Context, *BatchCardinalityRequest) (*BatchCardinalityResponse, error)
	CreateVirtualField(context.Context, *CreateVirtualFieldRequest) (*CreateVirtualFieldResponse, error)
	ListVirtualFields(context.Context, *ListVirtualFieldsRequest) (*ListVirtualFieldsResponse, error)
	DeleteVirtualField(context.Context, *DeleteVirtualFieldRequest) (*DeleteVirtualFieldResponse, error)
	CreateNamedSchemaTemplate(context.Context, *CreateNamedSchemaTemplateRequest) (*CreateNamedSchemaTemplateResponse, error)
	ListNamedSchemaTemplates(context.Context, *ListNamedSchemaTemplatesRequest) (*ListNamedSchemaTemplatesResponse, error)
	GetNamedSchemaTemplate(context.Context, *GetNamedSchemaTemplateRequest) (*GetNamedSchemaTemplateResponse, error)
	DeleteNamedSchemaTemplate(context.Context, *DeleteNamedSchemaTemplateRequest) (*DeleteNamedSchemaTemplateResponse, error)
	BatchGetNamedSchemaTemplate(context.Context, *BatchGetNamedSchemaTemplateRequest) (*BatchGetNamedSchemaTemplateResponse, error)
	EmbeddingLookup(context.Context, *EmbeddingLookupRequest) (*EmbeddingLookupResponse, error)
	HasEmbeddings(context.Context, *HasEmbeddingsRequest) (*HasEmbeddingsResponse, error)
	GetMergedNamedSchemaTemplateFields(context.Context, *GetMergedNamedSchemaTemplateFieldsRequest) (*GetMergedNamedSchemaTemplateFieldsResponse, error)
	mustEmbedUnimplementedSchemaStoreInternalServiceServer()
}

// UnimplementedSchemaStoreInternalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchemaStoreInternalServiceServer struct{}

func (UnimplementedSchemaStoreInternalServiceServer) LogFields(context.Context, *LogFieldsRequest) (*LogFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogFields not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) LogLabels(context.Context, *LogLabelsRequest) (*LogLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogLabels not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) TracingFields(context.Context, *TracingFieldsRequest) (*TracingFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TracingFields not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) TracingLabels(context.Context, *TracingLabelsRequest) (*TracingLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TracingLabels not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) MetricNames(context.Context, *MetricNamesRequest) (*MetricNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricNames not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) MetricLabels(context.Context, *MetricLabelsRequest) (*MetricLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricLabels not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) BatchTracingSamples(context.Context, *BatchTracingSamplesRequest) (*BatchTracingSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTracingSamples not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) Observations(context.Context, *ObservationsRequest) (*ObservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Observations not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) BatchCardinality(context.Context, *BatchCardinalityRequest) (*BatchCardinalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCardinality not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) CreateVirtualField(context.Context, *CreateVirtualFieldRequest) (*CreateVirtualFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualField not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) ListVirtualFields(context.Context, *ListVirtualFieldsRequest) (*ListVirtualFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualFields not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) DeleteVirtualField(context.Context, *DeleteVirtualFieldRequest) (*DeleteVirtualFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualField not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) CreateNamedSchemaTemplate(context.Context, *CreateNamedSchemaTemplateRequest) (*CreateNamedSchemaTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamedSchemaTemplate not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) ListNamedSchemaTemplates(context.Context, *ListNamedSchemaTemplatesRequest) (*ListNamedSchemaTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamedSchemaTemplates not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) GetNamedSchemaTemplate(context.Context, *GetNamedSchemaTemplateRequest) (*GetNamedSchemaTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedSchemaTemplate not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) DeleteNamedSchemaTemplate(context.Context, *DeleteNamedSchemaTemplateRequest) (*DeleteNamedSchemaTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamedSchemaTemplate not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) BatchGetNamedSchemaTemplate(context.Context, *BatchGetNamedSchemaTemplateRequest) (*BatchGetNamedSchemaTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetNamedSchemaTemplate not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) EmbeddingLookup(context.Context, *EmbeddingLookupRequest) (*EmbeddingLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbeddingLookup not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) HasEmbeddings(context.Context, *HasEmbeddingsRequest) (*HasEmbeddingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasEmbeddings not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) GetMergedNamedSchemaTemplateFields(context.Context, *GetMergedNamedSchemaTemplateFieldsRequest) (*GetMergedNamedSchemaTemplateFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMergedNamedSchemaTemplateFields not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) mustEmbedUnimplementedSchemaStoreInternalServiceServer() {
}
func (UnimplementedSchemaStoreInternalServiceServer) testEmbeddedByValue() {}

// UnsafeSchemaStoreInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaStoreInternalServiceServer will
// result in compilation errors.
type UnsafeSchemaStoreInternalServiceServer interface {
	mustEmbedUnimplementedSchemaStoreInternalServiceServer()
}

func RegisterSchemaStoreInternalServiceServer(s grpc.ServiceRegistrar, srv SchemaStoreInternalServiceServer) {
	// If the following call pancis, it indicates UnimplementedSchemaStoreInternalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SchemaStoreInternalService_ServiceDesc, srv)
}

func _SchemaStoreInternalService_LogFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).LogFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_LogFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).LogFields(ctx, req.(*LogFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_LogLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).LogLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_LogLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).LogLabels(ctx, req.(*LogLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_TracingFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracingFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).TracingFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_TracingFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).TracingFields(ctx, req.(*TracingFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_TracingLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracingLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).TracingLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_TracingLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).TracingLabels(ctx, req.(*TracingLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_MetricNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).MetricNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_MetricNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).MetricNames(ctx, req.(*MetricNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_MetricLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).MetricLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_MetricLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).MetricLabels(ctx, req.(*MetricLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_BatchTracingSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTracingSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).BatchTracingSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_BatchTracingSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).BatchTracingSamples(ctx, req.(*BatchTracingSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_Observations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).Observations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_Observations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).Observations(ctx, req.(*ObservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_ListDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_BatchCardinality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCardinalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).BatchCardinality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_BatchCardinality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).BatchCardinality(ctx, req.(*BatchCardinalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_CreateVirtualField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).CreateVirtualField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_CreateVirtualField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).CreateVirtualField(ctx, req.(*CreateVirtualFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_ListVirtualFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVirtualFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).ListVirtualFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_ListVirtualFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).ListVirtualFields(ctx, req.(*ListVirtualFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_DeleteVirtualField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVirtualFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).DeleteVirtualField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_DeleteVirtualField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).DeleteVirtualField(ctx, req.(*DeleteVirtualFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_CreateNamedSchemaTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamedSchemaTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).CreateNamedSchemaTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_CreateNamedSchemaTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).CreateNamedSchemaTemplate(ctx, req.(*CreateNamedSchemaTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_ListNamedSchemaTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamedSchemaTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).ListNamedSchemaTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_ListNamedSchemaTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).ListNamedSchemaTemplates(ctx, req.(*ListNamedSchemaTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_GetNamedSchemaTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamedSchemaTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).GetNamedSchemaTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_GetNamedSchemaTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).GetNamedSchemaTemplate(ctx, req.(*GetNamedSchemaTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_DeleteNamedSchemaTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamedSchemaTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).DeleteNamedSchemaTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_DeleteNamedSchemaTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).DeleteNamedSchemaTemplate(ctx, req.(*DeleteNamedSchemaTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_BatchGetNamedSchemaTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetNamedSchemaTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).BatchGetNamedSchemaTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_BatchGetNamedSchemaTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).BatchGetNamedSchemaTemplate(ctx, req.(*BatchGetNamedSchemaTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_EmbeddingLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbeddingLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).EmbeddingLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_EmbeddingLookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).EmbeddingLookup(ctx, req.(*EmbeddingLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_HasEmbeddings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasEmbeddingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).HasEmbeddings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_HasEmbeddings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).HasEmbeddings(ctx, req.(*HasEmbeddingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_GetMergedNamedSchemaTemplateFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMergedNamedSchemaTemplateFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).GetMergedNamedSchemaTemplateFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_GetMergedNamedSchemaTemplateFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).GetMergedNamedSchemaTemplateFields(ctx, req.(*GetMergedNamedSchemaTemplateFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemaStoreInternalService_ServiceDesc is the grpc.ServiceDesc for SchemaStoreInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemaStoreInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.schemastore.v1.SchemaStoreInternalService",
	HandlerType: (*SchemaStoreInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogFields",
			Handler:    _SchemaStoreInternalService_LogFields_Handler,
		},
		{
			MethodName: "LogLabels",
			Handler:    _SchemaStoreInternalService_LogLabels_Handler,
		},
		{
			MethodName: "TracingFields",
			Handler:    _SchemaStoreInternalService_TracingFields_Handler,
		},
		{
			MethodName: "TracingLabels",
			Handler:    _SchemaStoreInternalService_TracingLabels_Handler,
		},
		{
			MethodName: "MetricNames",
			Handler:    _SchemaStoreInternalService_MetricNames_Handler,
		},
		{
			MethodName: "MetricLabels",
			Handler:    _SchemaStoreInternalService_MetricLabels_Handler,
		},
		{
			MethodName: "BatchTracingSamples",
			Handler:    _SchemaStoreInternalService_BatchTracingSamples_Handler,
		},
		{
			MethodName: "Observations",
			Handler:    _SchemaStoreInternalService_Observations_Handler,
		},
		{
			MethodName: "ListDatasets",
			Handler:    _SchemaStoreInternalService_ListDatasets_Handler,
		},
		{
			MethodName: "BatchCardinality",
			Handler:    _SchemaStoreInternalService_BatchCardinality_Handler,
		},
		{
			MethodName: "CreateVirtualField",
			Handler:    _SchemaStoreInternalService_CreateVirtualField_Handler,
		},
		{
			MethodName: "ListVirtualFields",
			Handler:    _SchemaStoreInternalService_ListVirtualFields_Handler,
		},
		{
			MethodName: "DeleteVirtualField",
			Handler:    _SchemaStoreInternalService_DeleteVirtualField_Handler,
		},
		{
			MethodName: "CreateNamedSchemaTemplate",
			Handler:    _SchemaStoreInternalService_CreateNamedSchemaTemplate_Handler,
		},
		{
			MethodName: "ListNamedSchemaTemplates",
			Handler:    _SchemaStoreInternalService_ListNamedSchemaTemplates_Handler,
		},
		{
			MethodName: "GetNamedSchemaTemplate",
			Handler:    _SchemaStoreInternalService_GetNamedSchemaTemplate_Handler,
		},
		{
			MethodName: "DeleteNamedSchemaTemplate",
			Handler:    _SchemaStoreInternalService_DeleteNamedSchemaTemplate_Handler,
		},
		{
			MethodName: "BatchGetNamedSchemaTemplate",
			Handler:    _SchemaStoreInternalService_BatchGetNamedSchemaTemplate_Handler,
		},
		{
			MethodName: "EmbeddingLookup",
			Handler:    _SchemaStoreInternalService_EmbeddingLookup_Handler,
		},
		{
			MethodName: "HasEmbeddings",
			Handler:    _SchemaStoreInternalService_HasEmbeddings_Handler,
		},
		{
			MethodName: "GetMergedNamedSchemaTemplateFields",
			Handler:    _SchemaStoreInternalService_GetMergedNamedSchemaTemplateFields_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/schemastore/v1/service.proto",
}

const (
	DefaultLogsSchemaService_SetDefaultLogsSchema_FullMethodName = "/com.coralogix.schemastore.v1.DefaultLogsSchemaService/SetDefaultLogsSchema"
	DefaultLogsSchemaService_GetDefaultLogsSchema_FullMethodName = "/com.coralogix.schemastore.v1.DefaultLogsSchemaService/GetDefaultLogsSchema"
)

// DefaultLogsSchemaServiceClient is the client API for DefaultLogsSchemaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultLogsSchemaServiceClient interface {
	SetDefaultLogsSchema(ctx context.Context, in *SetDefaultLogsSchemaRequest, opts ...grpc.CallOption) (*SetDefaultLogsSchemaResponse, error)
	GetDefaultLogsSchema(ctx context.Context, in *GetDefaultLogsSchemaRequest, opts ...grpc.CallOption) (*GetDefaultLogsSchemaResponse, error)
}

type defaultLogsSchemaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultLogsSchemaServiceClient(cc grpc.ClientConnInterface) DefaultLogsSchemaServiceClient {
	return &defaultLogsSchemaServiceClient{cc}
}

func (c *defaultLogsSchemaServiceClient) SetDefaultLogsSchema(ctx context.Context, in *SetDefaultLogsSchemaRequest, opts ...grpc.CallOption) (*SetDefaultLogsSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDefaultLogsSchemaResponse)
	err := c.cc.Invoke(ctx, DefaultLogsSchemaService_SetDefaultLogsSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultLogsSchemaServiceClient) GetDefaultLogsSchema(ctx context.Context, in *GetDefaultLogsSchemaRequest, opts ...grpc.CallOption) (*GetDefaultLogsSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDefaultLogsSchemaResponse)
	err := c.cc.Invoke(ctx, DefaultLogsSchemaService_GetDefaultLogsSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultLogsSchemaServiceServer is the server API for DefaultLogsSchemaService service.
// All implementations must embed UnimplementedDefaultLogsSchemaServiceServer
// for forward compatibility.
type DefaultLogsSchemaServiceServer interface {
	SetDefaultLogsSchema(context.Context, *SetDefaultLogsSchemaRequest) (*SetDefaultLogsSchemaResponse, error)
	GetDefaultLogsSchema(context.Context, *GetDefaultLogsSchemaRequest) (*GetDefaultLogsSchemaResponse, error)
	mustEmbedUnimplementedDefaultLogsSchemaServiceServer()
}

// UnimplementedDefaultLogsSchemaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDefaultLogsSchemaServiceServer struct{}

func (UnimplementedDefaultLogsSchemaServiceServer) SetDefaultLogsSchema(context.Context, *SetDefaultLogsSchemaRequest) (*SetDefaultLogsSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultLogsSchema not implemented")
}
func (UnimplementedDefaultLogsSchemaServiceServer) GetDefaultLogsSchema(context.Context, *GetDefaultLogsSchemaRequest) (*GetDefaultLogsSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultLogsSchema not implemented")
}
func (UnimplementedDefaultLogsSchemaServiceServer) mustEmbedUnimplementedDefaultLogsSchemaServiceServer() {
}
func (UnimplementedDefaultLogsSchemaServiceServer) testEmbeddedByValue() {}

// UnsafeDefaultLogsSchemaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultLogsSchemaServiceServer will
// result in compilation errors.
type UnsafeDefaultLogsSchemaServiceServer interface {
	mustEmbedUnimplementedDefaultLogsSchemaServiceServer()
}

func RegisterDefaultLogsSchemaServiceServer(s grpc.ServiceRegistrar, srv DefaultLogsSchemaServiceServer) {
	// If the following call pancis, it indicates UnimplementedDefaultLogsSchemaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DefaultLogsSchemaService_ServiceDesc, srv)
}

func _DefaultLogsSchemaService_SetDefaultLogsSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultLogsSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultLogsSchemaServiceServer).SetDefaultLogsSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultLogsSchemaService_SetDefaultLogsSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultLogsSchemaServiceServer).SetDefaultLogsSchema(ctx, req.(*SetDefaultLogsSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultLogsSchemaService_GetDefaultLogsSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultLogsSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultLogsSchemaServiceServer).GetDefaultLogsSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultLogsSchemaService_GetDefaultLogsSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultLogsSchemaServiceServer).GetDefaultLogsSchema(ctx, req.(*GetDefaultLogsSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DefaultLogsSchemaService_ServiceDesc is the grpc.ServiceDesc for DefaultLogsSchemaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultLogsSchemaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.schemastore.v1.DefaultLogsSchemaService",
	HandlerType: (*DefaultLogsSchemaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDefaultLogsSchema",
			Handler:    _DefaultLogsSchemaService_SetDefaultLogsSchema_Handler,
		},
		{
			MethodName: "GetDefaultLogsSchema",
			Handler:    _DefaultLogsSchemaService_GetDefaultLogsSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/schemastore/v1/service.proto",
}

const (
	SchemaStoreService_LogFields_FullMethodName                          = "/com.coralogix.schemastore.v1.SchemaStoreService/LogFields"
	SchemaStoreService_TracingFields_FullMethodName                      = "/com.coralogix.schemastore.v1.SchemaStoreService/TracingFields"
	SchemaStoreService_LogLabels_FullMethodName                          = "/com.coralogix.schemastore.v1.SchemaStoreService/LogLabels"
	SchemaStoreService_TracingLabels_FullMethodName                      = "/com.coralogix.schemastore.v1.SchemaStoreService/TracingLabels"
	SchemaStoreService_TracingSamples_FullMethodName                     = "/com.coralogix.schemastore.v1.SchemaStoreService/TracingSamples"
	SchemaStoreService_ListEnrichments_FullMethodName                    = "/com.coralogix.schemastore.v1.SchemaStoreService/ListEnrichments"
	SchemaStoreService_MetricNames_FullMethodName                        = "/com.coralogix.schemastore.v1.SchemaStoreService/MetricNames"
	SchemaStoreService_MetricLabels_FullMethodName                       = "/com.coralogix.schemastore.v1.SchemaStoreService/MetricLabels"
	SchemaStoreService_BatchTracingSamples_FullMethodName                = "/com.coralogix.schemastore.v1.SchemaStoreService/BatchTracingSamples"
	SchemaStoreService_ListDatasets_FullMethodName                       = "/com.coralogix.schemastore.v1.SchemaStoreService/ListDatasets"
	SchemaStoreService_SubmitUsageStats_FullMethodName                   = "/com.coralogix.schemastore.v1.SchemaStoreService/SubmitUsageStats"
	SchemaStoreService_Correlations_FullMethodName                       = "/com.coralogix.schemastore.v1.SchemaStoreService/Correlations"
	SchemaStoreService_CorrelationChoice_FullMethodName                  = "/com.coralogix.schemastore.v1.SchemaStoreService/CorrelationChoice"
	SchemaStoreService_BatchCardinality_FullMethodName                   = "/com.coralogix.schemastore.v1.SchemaStoreService/BatchCardinality"
	SchemaStoreService_Observations_FullMethodName                       = "/com.coralogix.schemastore.v1.SchemaStoreService/Observations"
	SchemaStoreService_CreateCompanyNamedSchemaTemplate_FullMethodName   = "/com.coralogix.schemastore.v1.SchemaStoreService/CreateCompanyNamedSchemaTemplate"
	SchemaStoreService_GetCompanyNamedSchemaTemplate_FullMethodName      = "/com.coralogix.schemastore.v1.SchemaStoreService/GetCompanyNamedSchemaTemplate"
	SchemaStoreService_ListCompanyNamedSchemaTemplates_FullMethodName    = "/com.coralogix.schemastore.v1.SchemaStoreService/ListCompanyNamedSchemaTemplates"
	SchemaStoreService_DeleteCompanyNamedSchemaTemplate_FullMethodName   = "/com.coralogix.schemastore.v1.SchemaStoreService/DeleteCompanyNamedSchemaTemplate"
	SchemaStoreService_GetMergedNamedSchemaTemplateFields_FullMethodName = "/com.coralogix.schemastore.v1.SchemaStoreService/GetMergedNamedSchemaTemplateFields"
)

// SchemaStoreServiceClient is the client API for SchemaStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaStoreServiceClient interface {
	// Deprecated: Do not use.
	LogFields(ctx context.Context, in *LogFieldsRequest, opts ...grpc.CallOption) (*LogFieldsResponse, error)
	// Deprecated: Do not use.
	TracingFields(ctx context.Context, in *TracingFieldsRequest, opts ...grpc.CallOption) (*TracingFieldsResponse, error)
	// Deprecated: Do not use.
	LogLabels(ctx context.Context, in *LogLabelsRequest, opts ...grpc.CallOption) (*LogLabelsResponse, error)
	// Deprecated: Do not use.
	TracingLabels(ctx context.Context, in *TracingLabelsRequest, opts ...grpc.CallOption) (*TracingLabelsResponse, error)
	// Deprecated: Do not use.
	TracingSamples(ctx context.Context, in *TracingSamplesRequest, opts ...grpc.CallOption) (*TracingSamplesResponse, error)
	// Deprecated: Do not use.
	ListEnrichments(ctx context.Context, in *ListEnrichmentsRequest, opts ...grpc.CallOption) (*ListEnrichmentsResponse, error)
	// Deprecated: Do not use.
	MetricNames(ctx context.Context, in *MetricNamesRequest, opts ...grpc.CallOption) (*MetricNamesResponse, error)
	// Deprecated: Do not use.
	MetricLabels(ctx context.Context, in *MetricLabelsRequest, opts ...grpc.CallOption) (*MetricLabelsResponse, error)
	BatchTracingSamples(ctx context.Context, in *BatchTracingSamplesRequest, opts ...grpc.CallOption) (*BatchTracingSamplesResponse, error)
	// Deprecated: Do not use.
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error)
	SubmitUsageStats(ctx context.Context, in *SubmitUsageStatsRequest, opts ...grpc.CallOption) (*SubmitUsageStatsResponse, error)
	Correlations(ctx context.Context, in *CorrelationsRequest, opts ...grpc.CallOption) (*CorrelationsResponse, error)
	CorrelationChoice(ctx context.Context, in *CorrelationChoiceRequest, opts ...grpc.CallOption) (*CorrelationChoiceResponse, error)
	BatchCardinality(ctx context.Context, in *BatchCardinalityRequest, opts ...grpc.CallOption) (*BatchCardinalityResponse, error)
	Observations(ctx context.Context, in *ObservationsRequest, opts ...grpc.CallOption) (*ObservationsResponse, error)
	CreateCompanyNamedSchemaTemplate(ctx context.Context, in *CreateCompanyNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*CreateCompanyNamedSchemaTemplateResponse, error)
	GetCompanyNamedSchemaTemplate(ctx context.Context, in *GetCompanyNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*GetCompanyNamedSchemaTemplateResponse, error)
	ListCompanyNamedSchemaTemplates(ctx context.Context, in *ListCompanyNamedSchemaTemplatesRequest, opts ...grpc.CallOption) (*ListCompanyNamedSchemaTemplatesResponse, error)
	DeleteCompanyNamedSchemaTemplate(ctx context.Context, in *DeleteCompanyNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*DeleteCompanyNamedSchemaTemplateResponse, error)
	GetMergedNamedSchemaTemplateFields(ctx context.Context, in *GetMergedNamedSchemaTemplateFieldsRequest, opts ...grpc.CallOption) (*GetMergedNamedSchemaTemplateFieldsResponse, error)
}

type schemaStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaStoreServiceClient(cc grpc.ClientConnInterface) SchemaStoreServiceClient {
	return &schemaStoreServiceClient{cc}
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) LogFields(ctx context.Context, in *LogFieldsRequest, opts ...grpc.CallOption) (*LogFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogFieldsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_LogFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) TracingFields(ctx context.Context, in *TracingFieldsRequest, opts ...grpc.CallOption) (*TracingFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TracingFieldsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_TracingFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) LogLabels(ctx context.Context, in *LogLabelsRequest, opts ...grpc.CallOption) (*LogLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogLabelsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_LogLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) TracingLabels(ctx context.Context, in *TracingLabelsRequest, opts ...grpc.CallOption) (*TracingLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TracingLabelsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_TracingLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) TracingSamples(ctx context.Context, in *TracingSamplesRequest, opts ...grpc.CallOption) (*TracingSamplesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TracingSamplesResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_TracingSamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) ListEnrichments(ctx context.Context, in *ListEnrichmentsRequest, opts ...grpc.CallOption) (*ListEnrichmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnrichmentsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_ListEnrichments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) MetricNames(ctx context.Context, in *MetricNamesRequest, opts ...grpc.CallOption) (*MetricNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricNamesResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_MetricNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) MetricLabels(ctx context.Context, in *MetricLabelsRequest, opts ...grpc.CallOption) (*MetricLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricLabelsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_MetricLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) BatchTracingSamples(ctx context.Context, in *BatchTracingSamplesRequest, opts ...grpc.CallOption) (*BatchTracingSamplesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchTracingSamplesResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_BatchTracingSamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDatasetsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_ListDatasets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) SubmitUsageStats(ctx context.Context, in *SubmitUsageStatsRequest, opts ...grpc.CallOption) (*SubmitUsageStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitUsageStatsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_SubmitUsageStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) Correlations(ctx context.Context, in *CorrelationsRequest, opts ...grpc.CallOption) (*CorrelationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CorrelationsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_Correlations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) CorrelationChoice(ctx context.Context, in *CorrelationChoiceRequest, opts ...grpc.CallOption) (*CorrelationChoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CorrelationChoiceResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_CorrelationChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) BatchCardinality(ctx context.Context, in *BatchCardinalityRequest, opts ...grpc.CallOption) (*BatchCardinalityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCardinalityResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_BatchCardinality_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) Observations(ctx context.Context, in *ObservationsRequest, opts ...grpc.CallOption) (*ObservationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObservationsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_Observations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) CreateCompanyNamedSchemaTemplate(ctx context.Context, in *CreateCompanyNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*CreateCompanyNamedSchemaTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCompanyNamedSchemaTemplateResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_CreateCompanyNamedSchemaTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) GetCompanyNamedSchemaTemplate(ctx context.Context, in *GetCompanyNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*GetCompanyNamedSchemaTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompanyNamedSchemaTemplateResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_GetCompanyNamedSchemaTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) ListCompanyNamedSchemaTemplates(ctx context.Context, in *ListCompanyNamedSchemaTemplatesRequest, opts ...grpc.CallOption) (*ListCompanyNamedSchemaTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCompanyNamedSchemaTemplatesResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_ListCompanyNamedSchemaTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) DeleteCompanyNamedSchemaTemplate(ctx context.Context, in *DeleteCompanyNamedSchemaTemplateRequest, opts ...grpc.CallOption) (*DeleteCompanyNamedSchemaTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCompanyNamedSchemaTemplateResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_DeleteCompanyNamedSchemaTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) GetMergedNamedSchemaTemplateFields(ctx context.Context, in *GetMergedNamedSchemaTemplateFieldsRequest, opts ...grpc.CallOption) (*GetMergedNamedSchemaTemplateFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMergedNamedSchemaTemplateFieldsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_GetMergedNamedSchemaTemplateFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaStoreServiceServer is the server API for SchemaStoreService service.
// All implementations must embed UnimplementedSchemaStoreServiceServer
// for forward compatibility.
type SchemaStoreServiceServer interface {
	// Deprecated: Do not use.
	LogFields(context.Context, *LogFieldsRequest) (*LogFieldsResponse, error)
	// Deprecated: Do not use.
	TracingFields(context.Context, *TracingFieldsRequest) (*TracingFieldsResponse, error)
	// Deprecated: Do not use.
	LogLabels(context.Context, *LogLabelsRequest) (*LogLabelsResponse, error)
	// Deprecated: Do not use.
	TracingLabels(context.Context, *TracingLabelsRequest) (*TracingLabelsResponse, error)
	// Deprecated: Do not use.
	TracingSamples(context.Context, *TracingSamplesRequest) (*TracingSamplesResponse, error)
	// Deprecated: Do not use.
	ListEnrichments(context.Context, *ListEnrichmentsRequest) (*ListEnrichmentsResponse, error)
	// Deprecated: Do not use.
	MetricNames(context.Context, *MetricNamesRequest) (*MetricNamesResponse, error)
	// Deprecated: Do not use.
	MetricLabels(context.Context, *MetricLabelsRequest) (*MetricLabelsResponse, error)
	BatchTracingSamples(context.Context, *BatchTracingSamplesRequest) (*BatchTracingSamplesResponse, error)
	// Deprecated: Do not use.
	ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error)
	SubmitUsageStats(context.Context, *SubmitUsageStatsRequest) (*SubmitUsageStatsResponse, error)
	Correlations(context.Context, *CorrelationsRequest) (*CorrelationsResponse, error)
	CorrelationChoice(context.Context, *CorrelationChoiceRequest) (*CorrelationChoiceResponse, error)
	BatchCardinality(context.Context, *BatchCardinalityRequest) (*BatchCardinalityResponse, error)
	Observations(context.Context, *ObservationsRequest) (*ObservationsResponse, error)
	CreateCompanyNamedSchemaTemplate(context.Context, *CreateCompanyNamedSchemaTemplateRequest) (*CreateCompanyNamedSchemaTemplateResponse, error)
	GetCompanyNamedSchemaTemplate(context.Context, *GetCompanyNamedSchemaTemplateRequest) (*GetCompanyNamedSchemaTemplateResponse, error)
	ListCompanyNamedSchemaTemplates(context.Context, *ListCompanyNamedSchemaTemplatesRequest) (*ListCompanyNamedSchemaTemplatesResponse, error)
	DeleteCompanyNamedSchemaTemplate(context.Context, *DeleteCompanyNamedSchemaTemplateRequest) (*DeleteCompanyNamedSchemaTemplateResponse, error)
	GetMergedNamedSchemaTemplateFields(context.Context, *GetMergedNamedSchemaTemplateFieldsRequest) (*GetMergedNamedSchemaTemplateFieldsResponse, error)
	mustEmbedUnimplementedSchemaStoreServiceServer()
}

// UnimplementedSchemaStoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchemaStoreServiceServer struct{}

func (UnimplementedSchemaStoreServiceServer) LogFields(context.Context, *LogFieldsRequest) (*LogFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogFields not implemented")
}
func (UnimplementedSchemaStoreServiceServer) TracingFields(context.Context, *TracingFieldsRequest) (*TracingFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TracingFields not implemented")
}
func (UnimplementedSchemaStoreServiceServer) LogLabels(context.Context, *LogLabelsRequest) (*LogLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogLabels not implemented")
}
func (UnimplementedSchemaStoreServiceServer) TracingLabels(context.Context, *TracingLabelsRequest) (*TracingLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TracingLabels not implemented")
}
func (UnimplementedSchemaStoreServiceServer) TracingSamples(context.Context, *TracingSamplesRequest) (*TracingSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TracingSamples not implemented")
}
func (UnimplementedSchemaStoreServiceServer) ListEnrichments(context.Context, *ListEnrichmentsRequest) (*ListEnrichmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnrichments not implemented")
}
func (UnimplementedSchemaStoreServiceServer) MetricNames(context.Context, *MetricNamesRequest) (*MetricNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricNames not implemented")
}
func (UnimplementedSchemaStoreServiceServer) MetricLabels(context.Context, *MetricLabelsRequest) (*MetricLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricLabels not implemented")
}
func (UnimplementedSchemaStoreServiceServer) BatchTracingSamples(context.Context, *BatchTracingSamplesRequest) (*BatchTracingSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTracingSamples not implemented")
}
func (UnimplementedSchemaStoreServiceServer) ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedSchemaStoreServiceServer) SubmitUsageStats(context.Context, *SubmitUsageStatsRequest) (*SubmitUsageStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUsageStats not implemented")
}
func (UnimplementedSchemaStoreServiceServer) Correlations(context.Context, *CorrelationsRequest) (*CorrelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Correlations not implemented")
}
func (UnimplementedSchemaStoreServiceServer) CorrelationChoice(context.Context, *CorrelationChoiceRequest) (*CorrelationChoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CorrelationChoice not implemented")
}
func (UnimplementedSchemaStoreServiceServer) BatchCardinality(context.Context, *BatchCardinalityRequest) (*BatchCardinalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCardinality not implemented")
}
func (UnimplementedSchemaStoreServiceServer) Observations(context.Context, *ObservationsRequest) (*ObservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Observations not implemented")
}
func (UnimplementedSchemaStoreServiceServer) CreateCompanyNamedSchemaTemplate(context.Context, *CreateCompanyNamedSchemaTemplateRequest) (*CreateCompanyNamedSchemaTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompanyNamedSchemaTemplate not implemented")
}
func (UnimplementedSchemaStoreServiceServer) GetCompanyNamedSchemaTemplate(context.Context, *GetCompanyNamedSchemaTemplateRequest) (*GetCompanyNamedSchemaTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyNamedSchemaTemplate not implemented")
}
func (UnimplementedSchemaStoreServiceServer) ListCompanyNamedSchemaTemplates(context.Context, *ListCompanyNamedSchemaTemplatesRequest) (*ListCompanyNamedSchemaTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanyNamedSchemaTemplates not implemented")
}
func (UnimplementedSchemaStoreServiceServer) DeleteCompanyNamedSchemaTemplate(context.Context, *DeleteCompanyNamedSchemaTemplateRequest) (*DeleteCompanyNamedSchemaTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyNamedSchemaTemplate not implemented")
}
func (UnimplementedSchemaStoreServiceServer) GetMergedNamedSchemaTemplateFields(context.Context, *GetMergedNamedSchemaTemplateFieldsRequest) (*GetMergedNamedSchemaTemplateFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMergedNamedSchemaTemplateFields not implemented")
}
func (UnimplementedSchemaStoreServiceServer) mustEmbedUnimplementedSchemaStoreServiceServer() {}
func (UnimplementedSchemaStoreServiceServer) testEmbeddedByValue()                            {}

// UnsafeSchemaStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaStoreServiceServer will
// result in compilation errors.
type UnsafeSchemaStoreServiceServer interface {
	mustEmbedUnimplementedSchemaStoreServiceServer()
}

func RegisterSchemaStoreServiceServer(s grpc.ServiceRegistrar, srv SchemaStoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedSchemaStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SchemaStoreService_ServiceDesc, srv)
}

func _SchemaStoreService_LogFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).LogFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_LogFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).LogFields(ctx, req.(*LogFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_TracingFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracingFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).TracingFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_TracingFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).TracingFields(ctx, req.(*TracingFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_LogLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).LogLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_LogLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).LogLabels(ctx, req.(*LogLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_TracingLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracingLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).TracingLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_TracingLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).TracingLabels(ctx, req.(*TracingLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_TracingSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracingSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).TracingSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_TracingSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).TracingSamples(ctx, req.(*TracingSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_ListEnrichments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnrichmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).ListEnrichments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_ListEnrichments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).ListEnrichments(ctx, req.(*ListEnrichmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_MetricNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).MetricNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_MetricNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).MetricNames(ctx, req.(*MetricNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_MetricLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).MetricLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_MetricLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).MetricLabels(ctx, req.(*MetricLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_BatchTracingSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTracingSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).BatchTracingSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_BatchTracingSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).BatchTracingSamples(ctx, req.(*BatchTracingSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_ListDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_SubmitUsageStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitUsageStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).SubmitUsageStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_SubmitUsageStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).SubmitUsageStats(ctx, req.(*SubmitUsageStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_Correlations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CorrelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).Correlations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_Correlations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).Correlations(ctx, req.(*CorrelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_CorrelationChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CorrelationChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).CorrelationChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_CorrelationChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).CorrelationChoice(ctx, req.(*CorrelationChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_BatchCardinality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCardinalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).BatchCardinality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_BatchCardinality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).BatchCardinality(ctx, req.(*BatchCardinalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_Observations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).Observations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_Observations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).Observations(ctx, req.(*ObservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_CreateCompanyNamedSchemaTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyNamedSchemaTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).CreateCompanyNamedSchemaTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_CreateCompanyNamedSchemaTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).CreateCompanyNamedSchemaTemplate(ctx, req.(*CreateCompanyNamedSchemaTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_GetCompanyNamedSchemaTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyNamedSchemaTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).GetCompanyNamedSchemaTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_GetCompanyNamedSchemaTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).GetCompanyNamedSchemaTemplate(ctx, req.(*GetCompanyNamedSchemaTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_ListCompanyNamedSchemaTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyNamedSchemaTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).ListCompanyNamedSchemaTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_ListCompanyNamedSchemaTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).ListCompanyNamedSchemaTemplates(ctx, req.(*ListCompanyNamedSchemaTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_DeleteCompanyNamedSchemaTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyNamedSchemaTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).DeleteCompanyNamedSchemaTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_DeleteCompanyNamedSchemaTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).DeleteCompanyNamedSchemaTemplate(ctx, req.(*DeleteCompanyNamedSchemaTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_GetMergedNamedSchemaTemplateFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMergedNamedSchemaTemplateFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).GetMergedNamedSchemaTemplateFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_GetMergedNamedSchemaTemplateFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).GetMergedNamedSchemaTemplateFields(ctx, req.(*GetMergedNamedSchemaTemplateFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemaStoreService_ServiceDesc is the grpc.ServiceDesc for SchemaStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemaStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.schemastore.v1.SchemaStoreService",
	HandlerType: (*SchemaStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogFields",
			Handler:    _SchemaStoreService_LogFields_Handler,
		},
		{
			MethodName: "TracingFields",
			Handler:    _SchemaStoreService_TracingFields_Handler,
		},
		{
			MethodName: "LogLabels",
			Handler:    _SchemaStoreService_LogLabels_Handler,
		},
		{
			MethodName: "TracingLabels",
			Handler:    _SchemaStoreService_TracingLabels_Handler,
		},
		{
			MethodName: "TracingSamples",
			Handler:    _SchemaStoreService_TracingSamples_Handler,
		},
		{
			MethodName: "ListEnrichments",
			Handler:    _SchemaStoreService_ListEnrichments_Handler,
		},
		{
			MethodName: "MetricNames",
			Handler:    _SchemaStoreService_MetricNames_Handler,
		},
		{
			MethodName: "MetricLabels",
			Handler:    _SchemaStoreService_MetricLabels_Handler,
		},
		{
			MethodName: "BatchTracingSamples",
			Handler:    _SchemaStoreService_BatchTracingSamples_Handler,
		},
		{
			MethodName: "ListDatasets",
			Handler:    _SchemaStoreService_ListDatasets_Handler,
		},
		{
			MethodName: "SubmitUsageStats",
			Handler:    _SchemaStoreService_SubmitUsageStats_Handler,
		},
		{
			MethodName: "Correlations",
			Handler:    _SchemaStoreService_Correlations_Handler,
		},
		{
			MethodName: "CorrelationChoice",
			Handler:    _SchemaStoreService_CorrelationChoice_Handler,
		},
		{
			MethodName: "BatchCardinality",
			Handler:    _SchemaStoreService_BatchCardinality_Handler,
		},
		{
			MethodName: "Observations",
			Handler:    _SchemaStoreService_Observations_Handler,
		},
		{
			MethodName: "CreateCompanyNamedSchemaTemplate",
			Handler:    _SchemaStoreService_CreateCompanyNamedSchemaTemplate_Handler,
		},
		{
			MethodName: "GetCompanyNamedSchemaTemplate",
			Handler:    _SchemaStoreService_GetCompanyNamedSchemaTemplate_Handler,
		},
		{
			MethodName: "ListCompanyNamedSchemaTemplates",
			Handler:    _SchemaStoreService_ListCompanyNamedSchemaTemplates_Handler,
		},
		{
			MethodName: "DeleteCompanyNamedSchemaTemplate",
			Handler:    _SchemaStoreService_DeleteCompanyNamedSchemaTemplate_Handler,
		},
		{
			MethodName: "GetMergedNamedSchemaTemplateFields",
			Handler:    _SchemaStoreService_GetMergedNamedSchemaTemplateFields_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/schemastore/v1/service.proto",
}

const (
	QueryAssistantService_GenerateQuery_FullMethodName  = "/com.coralogix.schemastore.v1.QueryAssistantService/GenerateQuery"
	QueryAssistantService_Settings_FullMethodName       = "/com.coralogix.schemastore.v1.QueryAssistantService/Settings"
	QueryAssistantService_UpdateSettings_FullMethodName = "/com.coralogix.schemastore.v1.QueryAssistantService/UpdateSettings"
	QueryAssistantService_AutoFeedback_FullMethodName   = "/com.coralogix.schemastore.v1.QueryAssistantService/AutoFeedback"
	QueryAssistantService_UserFeedback_FullMethodName   = "/com.coralogix.schemastore.v1.QueryAssistantService/UserFeedback"
	QueryAssistantService_UserFeedbackV2_FullMethodName = "/com.coralogix.schemastore.v1.QueryAssistantService/UserFeedbackV2"
)

// QueryAssistantServiceClient is the client API for QueryAssistantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryAssistantServiceClient interface {
	GenerateQuery(ctx context.Context, in *GenerateQueryRequest, opts ...grpc.CallOption) (*GenerateQueryResponse, error)
	Settings(ctx context.Context, in *QueryAssistantServiceSettingsRequest, opts ...grpc.CallOption) (*QueryAssistantServiceSettingsResponse, error)
	UpdateSettings(ctx context.Context, in *QueryAssistantServiceUpdateSettingsRequest, opts ...grpc.CallOption) (*QueryAssistantServiceUpdateSettingsResponse, error)
	AutoFeedback(ctx context.Context, in *AutoFeedbackRequest, opts ...grpc.CallOption) (*AutoFeedbackResponse, error)
	// Deprecated: Do not use.
	UserFeedback(ctx context.Context, in *UserFeedbackRequest, opts ...grpc.CallOption) (*UserFeedbackResponse, error)
	UserFeedbackV2(ctx context.Context, in *UserFeedbackV2Request, opts ...grpc.CallOption) (*UserFeedbackV2Response, error)
}

type queryAssistantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryAssistantServiceClient(cc grpc.ClientConnInterface) QueryAssistantServiceClient {
	return &queryAssistantServiceClient{cc}
}

func (c *queryAssistantServiceClient) GenerateQuery(ctx context.Context, in *GenerateQueryRequest, opts ...grpc.CallOption) (*GenerateQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateQueryResponse)
	err := c.cc.Invoke(ctx, QueryAssistantService_GenerateQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantServiceClient) Settings(ctx context.Context, in *QueryAssistantServiceSettingsRequest, opts ...grpc.CallOption) (*QueryAssistantServiceSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAssistantServiceSettingsResponse)
	err := c.cc.Invoke(ctx, QueryAssistantService_Settings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantServiceClient) UpdateSettings(ctx context.Context, in *QueryAssistantServiceUpdateSettingsRequest, opts ...grpc.CallOption) (*QueryAssistantServiceUpdateSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAssistantServiceUpdateSettingsResponse)
	err := c.cc.Invoke(ctx, QueryAssistantService_UpdateSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantServiceClient) AutoFeedback(ctx context.Context, in *AutoFeedbackRequest, opts ...grpc.CallOption) (*AutoFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoFeedbackResponse)
	err := c.cc.Invoke(ctx, QueryAssistantService_AutoFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryAssistantServiceClient) UserFeedback(ctx context.Context, in *UserFeedbackRequest, opts ...grpc.CallOption) (*UserFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFeedbackResponse)
	err := c.cc.Invoke(ctx, QueryAssistantService_UserFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantServiceClient) UserFeedbackV2(ctx context.Context, in *UserFeedbackV2Request, opts ...grpc.CallOption) (*UserFeedbackV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFeedbackV2Response)
	err := c.cc.Invoke(ctx, QueryAssistantService_UserFeedbackV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryAssistantServiceServer is the server API for QueryAssistantService service.
// All implementations must embed UnimplementedQueryAssistantServiceServer
// for forward compatibility.
type QueryAssistantServiceServer interface {
	GenerateQuery(context.Context, *GenerateQueryRequest) (*GenerateQueryResponse, error)
	Settings(context.Context, *QueryAssistantServiceSettingsRequest) (*QueryAssistantServiceSettingsResponse, error)
	UpdateSettings(context.Context, *QueryAssistantServiceUpdateSettingsRequest) (*QueryAssistantServiceUpdateSettingsResponse, error)
	AutoFeedback(context.Context, *AutoFeedbackRequest) (*AutoFeedbackResponse, error)
	// Deprecated: Do not use.
	UserFeedback(context.Context, *UserFeedbackRequest) (*UserFeedbackResponse, error)
	UserFeedbackV2(context.Context, *UserFeedbackV2Request) (*UserFeedbackV2Response, error)
	mustEmbedUnimplementedQueryAssistantServiceServer()
}

// UnimplementedQueryAssistantServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryAssistantServiceServer struct{}

func (UnimplementedQueryAssistantServiceServer) GenerateQuery(context.Context, *GenerateQueryRequest) (*GenerateQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateQuery not implemented")
}
func (UnimplementedQueryAssistantServiceServer) Settings(context.Context, *QueryAssistantServiceSettingsRequest) (*QueryAssistantServiceSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Settings not implemented")
}
func (UnimplementedQueryAssistantServiceServer) UpdateSettings(context.Context, *QueryAssistantServiceUpdateSettingsRequest) (*QueryAssistantServiceUpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedQueryAssistantServiceServer) AutoFeedback(context.Context, *AutoFeedbackRequest) (*AutoFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoFeedback not implemented")
}
func (UnimplementedQueryAssistantServiceServer) UserFeedback(context.Context, *UserFeedbackRequest) (*UserFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFeedback not implemented")
}
func (UnimplementedQueryAssistantServiceServer) UserFeedbackV2(context.Context, *UserFeedbackV2Request) (*UserFeedbackV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFeedbackV2 not implemented")
}
func (UnimplementedQueryAssistantServiceServer) mustEmbedUnimplementedQueryAssistantServiceServer() {}
func (UnimplementedQueryAssistantServiceServer) testEmbeddedByValue()                               {}

// UnsafeQueryAssistantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryAssistantServiceServer will
// result in compilation errors.
type UnsafeQueryAssistantServiceServer interface {
	mustEmbedUnimplementedQueryAssistantServiceServer()
}

func RegisterQueryAssistantServiceServer(s grpc.ServiceRegistrar, srv QueryAssistantServiceServer) {
	// If the following call pancis, it indicates UnimplementedQueryAssistantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueryAssistantService_ServiceDesc, srv)
}

func _QueryAssistantService_GenerateQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantServiceServer).GenerateQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantService_GenerateQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantServiceServer).GenerateQuery(ctx, req.(*GenerateQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantService_Settings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssistantServiceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantServiceServer).Settings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantService_Settings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantServiceServer).Settings(ctx, req.(*QueryAssistantServiceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantService_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssistantServiceUpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantServiceServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantService_UpdateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantServiceServer).UpdateSettings(ctx, req.(*QueryAssistantServiceUpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantService_AutoFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantServiceServer).AutoFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantService_AutoFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantServiceServer).AutoFeedback(ctx, req.(*AutoFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantService_UserFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantServiceServer).UserFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantService_UserFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantServiceServer).UserFeedback(ctx, req.(*UserFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantService_UserFeedbackV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFeedbackV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantServiceServer).UserFeedbackV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantService_UserFeedbackV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantServiceServer).UserFeedbackV2(ctx, req.(*UserFeedbackV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryAssistantService_ServiceDesc is the grpc.ServiceDesc for QueryAssistantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryAssistantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.schemastore.v1.QueryAssistantService",
	HandlerType: (*QueryAssistantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateQuery",
			Handler:    _QueryAssistantService_GenerateQuery_Handler,
		},
		{
			MethodName: "Settings",
			Handler:    _QueryAssistantService_Settings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _QueryAssistantService_UpdateSettings_Handler,
		},
		{
			MethodName: "AutoFeedback",
			Handler:    _QueryAssistantService_AutoFeedback_Handler,
		},
		{
			MethodName: "UserFeedback",
			Handler:    _QueryAssistantService_UserFeedback_Handler,
		},
		{
			MethodName: "UserFeedbackV2",
			Handler:    _QueryAssistantService_UserFeedbackV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/schemastore/v1/service.proto",
}

const (
	QueryAssistantInternalService_GenerateQuery_FullMethodName         = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/GenerateQuery"
	QueryAssistantInternalService_Settings_FullMethodName              = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/Settings"
	QueryAssistantInternalService_UpdateSettings_FullMethodName        = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/UpdateSettings"
	QueryAssistantInternalService_AutoFeedback_FullMethodName          = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/AutoFeedback"
	QueryAssistantInternalService_UserFeedback_FullMethodName          = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/UserFeedback"
	QueryAssistantInternalService_UserFeedbackV2_FullMethodName        = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/UserFeedbackV2"
	QueryAssistantInternalService_InternalEnableCompany_FullMethodName = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/InternalEnableCompany"
)

// QueryAssistantInternalServiceClient is the client API for QueryAssistantInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryAssistantInternalServiceClient interface {
	GenerateQuery(ctx context.Context, in *GenerateQueryRequest, opts ...grpc.CallOption) (*GenerateQueryResponse, error)
	Settings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error)
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error)
	AutoFeedback(ctx context.Context, in *AutoFeedbackRequest, opts ...grpc.CallOption) (*AutoFeedbackResponse, error)
	// Deprecated: Do not use.
	UserFeedback(ctx context.Context, in *UserFeedbackRequest, opts ...grpc.CallOption) (*UserFeedbackResponse, error)
	UserFeedbackV2(ctx context.Context, in *UserFeedbackV2Request, opts ...grpc.CallOption) (*UserFeedbackV2Response, error)
	InternalEnableCompany(ctx context.Context, in *InternalEnableCompanyRequest, opts ...grpc.CallOption) (*InternalEnableCompanyResponse, error)
}

type queryAssistantInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryAssistantInternalServiceClient(cc grpc.ClientConnInterface) QueryAssistantInternalServiceClient {
	return &queryAssistantInternalServiceClient{cc}
}

func (c *queryAssistantInternalServiceClient) GenerateQuery(ctx context.Context, in *GenerateQueryRequest, opts ...grpc.CallOption) (*GenerateQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateQueryResponse)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_GenerateQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantInternalServiceClient) Settings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettingsResponse)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_Settings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantInternalServiceClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSettingsResponse)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_UpdateSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantInternalServiceClient) AutoFeedback(ctx context.Context, in *AutoFeedbackRequest, opts ...grpc.CallOption) (*AutoFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoFeedbackResponse)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_AutoFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryAssistantInternalServiceClient) UserFeedback(ctx context.Context, in *UserFeedbackRequest, opts ...grpc.CallOption) (*UserFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFeedbackResponse)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_UserFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantInternalServiceClient) UserFeedbackV2(ctx context.Context, in *UserFeedbackV2Request, opts ...grpc.CallOption) (*UserFeedbackV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFeedbackV2Response)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_UserFeedbackV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantInternalServiceClient) InternalEnableCompany(ctx context.Context, in *InternalEnableCompanyRequest, opts ...grpc.CallOption) (*InternalEnableCompanyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalEnableCompanyResponse)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_InternalEnableCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryAssistantInternalServiceServer is the server API for QueryAssistantInternalService service.
// All implementations must embed UnimplementedQueryAssistantInternalServiceServer
// for forward compatibility.
type QueryAssistantInternalServiceServer interface {
	GenerateQuery(context.Context, *GenerateQueryRequest) (*GenerateQueryResponse, error)
	Settings(context.Context, *SettingsRequest) (*SettingsResponse, error)
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error)
	AutoFeedback(context.Context, *AutoFeedbackRequest) (*AutoFeedbackResponse, error)
	// Deprecated: Do not use.
	UserFeedback(context.Context, *UserFeedbackRequest) (*UserFeedbackResponse, error)
	UserFeedbackV2(context.Context, *UserFeedbackV2Request) (*UserFeedbackV2Response, error)
	InternalEnableCompany(context.Context, *InternalEnableCompanyRequest) (*InternalEnableCompanyResponse, error)
	mustEmbedUnimplementedQueryAssistantInternalServiceServer()
}

// UnimplementedQueryAssistantInternalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryAssistantInternalServiceServer struct{}

func (UnimplementedQueryAssistantInternalServiceServer) GenerateQuery(context.Context, *GenerateQueryRequest) (*GenerateQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateQuery not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) Settings(context.Context, *SettingsRequest) (*SettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Settings not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) AutoFeedback(context.Context, *AutoFeedbackRequest) (*AutoFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoFeedback not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) UserFeedback(context.Context, *UserFeedbackRequest) (*UserFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFeedback not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) UserFeedbackV2(context.Context, *UserFeedbackV2Request) (*UserFeedbackV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFeedbackV2 not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) InternalEnableCompany(context.Context, *InternalEnableCompanyRequest) (*InternalEnableCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalEnableCompany not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) mustEmbedUnimplementedQueryAssistantInternalServiceServer() {
}
func (UnimplementedQueryAssistantInternalServiceServer) testEmbeddedByValue() {}

// UnsafeQueryAssistantInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryAssistantInternalServiceServer will
// result in compilation errors.
type UnsafeQueryAssistantInternalServiceServer interface {
	mustEmbedUnimplementedQueryAssistantInternalServiceServer()
}

func RegisterQueryAssistantInternalServiceServer(s grpc.ServiceRegistrar, srv QueryAssistantInternalServiceServer) {
	// If the following call pancis, it indicates UnimplementedQueryAssistantInternalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueryAssistantInternalService_ServiceDesc, srv)
}

func _QueryAssistantInternalService_GenerateQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).GenerateQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_GenerateQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).GenerateQuery(ctx, req.(*GenerateQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantInternalService_Settings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).Settings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_Settings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).Settings(ctx, req.(*SettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantInternalService_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_UpdateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantInternalService_AutoFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).AutoFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_AutoFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).AutoFeedback(ctx, req.(*AutoFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantInternalService_UserFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).UserFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_UserFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).UserFeedback(ctx, req.(*UserFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantInternalService_UserFeedbackV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFeedbackV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).UserFeedbackV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_UserFeedbackV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).UserFeedbackV2(ctx, req.(*UserFeedbackV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantInternalService_InternalEnableCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalEnableCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).InternalEnableCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_InternalEnableCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).InternalEnableCompany(ctx, req.(*InternalEnableCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryAssistantInternalService_ServiceDesc is the grpc.ServiceDesc for QueryAssistantInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryAssistantInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.schemastore.v1.QueryAssistantInternalService",
	HandlerType: (*QueryAssistantInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateQuery",
			Handler:    _QueryAssistantInternalService_GenerateQuery_Handler,
		},
		{
			MethodName: "Settings",
			Handler:    _QueryAssistantInternalService_Settings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _QueryAssistantInternalService_UpdateSettings_Handler,
		},
		{
			MethodName: "AutoFeedback",
			Handler:    _QueryAssistantInternalService_AutoFeedback_Handler,
		},
		{
			MethodName: "UserFeedback",
			Handler:    _QueryAssistantInternalService_UserFeedback_Handler,
		},
		{
			MethodName: "UserFeedbackV2",
			Handler:    _QueryAssistantInternalService_UserFeedbackV2_Handler,
		},
		{
			MethodName: "InternalEnableCompany",
			Handler:    _QueryAssistantInternalService_InternalEnableCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/schemastore/v1/service.proto",
}

const (
	EntityService_ListMetalabels_FullMethodName      = "/com.coralogix.schemastore.v1.EntityService/ListMetalabels"
	EntityService_ListMetalabelValues_FullMethodName = "/com.coralogix.schemastore.v1.EntityService/ListMetalabelValues"
)

// EntityServiceClient is the client API for EntityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityServiceClient interface {
	ListMetalabels(ctx context.Context, in *ListMetalabelsRequest, opts ...grpc.CallOption) (*ListMetalabelsResponse, error)
	ListMetalabelValues(ctx context.Context, in *ListMetalabelValuesRequest, opts ...grpc.CallOption) (*ListMetalabelValuesResponse, error)
}

type entityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityServiceClient(cc grpc.ClientConnInterface) EntityServiceClient {
	return &entityServiceClient{cc}
}

func (c *entityServiceClient) ListMetalabels(ctx context.Context, in *ListMetalabelsRequest, opts ...grpc.CallOption) (*ListMetalabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMetalabelsResponse)
	err := c.cc.Invoke(ctx, EntityService_ListMetalabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) ListMetalabelValues(ctx context.Context, in *ListMetalabelValuesRequest, opts ...grpc.CallOption) (*ListMetalabelValuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMetalabelValuesResponse)
	err := c.cc.Invoke(ctx, EntityService_ListMetalabelValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServiceServer is the server API for EntityService service.
// All implementations must embed UnimplementedEntityServiceServer
// for forward compatibility.
type EntityServiceServer interface {
	ListMetalabels(context.Context, *ListMetalabelsRequest) (*ListMetalabelsResponse, error)
	ListMetalabelValues(context.Context, *ListMetalabelValuesRequest) (*ListMetalabelValuesResponse, error)
	mustEmbedUnimplementedEntityServiceServer()
}

// UnimplementedEntityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEntityServiceServer struct{}

func (UnimplementedEntityServiceServer) ListMetalabels(context.Context, *ListMetalabelsRequest) (*ListMetalabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetalabels not implemented")
}
func (UnimplementedEntityServiceServer) ListMetalabelValues(context.Context, *ListMetalabelValuesRequest) (*ListMetalabelValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetalabelValues not implemented")
}
func (UnimplementedEntityServiceServer) mustEmbedUnimplementedEntityServiceServer() {}
func (UnimplementedEntityServiceServer) testEmbeddedByValue()                       {}

// UnsafeEntityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityServiceServer will
// result in compilation errors.
type UnsafeEntityServiceServer interface {
	mustEmbedUnimplementedEntityServiceServer()
}

func RegisterEntityServiceServer(s grpc.ServiceRegistrar, srv EntityServiceServer) {
	// If the following call pancis, it indicates UnimplementedEntityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EntityService_ServiceDesc, srv)
}

func _EntityService_ListMetalabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetalabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).ListMetalabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_ListMetalabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).ListMetalabels(ctx, req.(*ListMetalabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_ListMetalabelValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetalabelValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).ListMetalabelValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_ListMetalabelValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).ListMetalabelValues(ctx, req.(*ListMetalabelValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityService_ServiceDesc is the grpc.ServiceDesc for EntityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.schemastore.v1.EntityService",
	HandlerType: (*EntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMetalabels",
			Handler:    _EntityService_ListMetalabels_Handler,
		},
		{
			MethodName: "ListMetalabelValues",
			Handler:    _EntityService_ListMetalabelValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/schemastore/v1/service.proto",
}
