// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: com/coralogix/schemastore/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SchemaStoreInternalService_LogFields_FullMethodName           = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/LogFields"
	SchemaStoreInternalService_LogLabels_FullMethodName           = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/LogLabels"
	SchemaStoreInternalService_TracingFields_FullMethodName       = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/TracingFields"
	SchemaStoreInternalService_TracingLabels_FullMethodName       = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/TracingLabels"
	SchemaStoreInternalService_MetricNames_FullMethodName         = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/MetricNames"
	SchemaStoreInternalService_MetricLabels_FullMethodName        = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/MetricLabels"
	SchemaStoreInternalService_BatchTracingSamples_FullMethodName = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/BatchTracingSamples"
	SchemaStoreInternalService_Observations_FullMethodName        = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/Observations"
	SchemaStoreInternalService_ListDatasets_FullMethodName        = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/ListDatasets"
	SchemaStoreInternalService_BatchCardinality_FullMethodName    = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/BatchCardinality"
	SchemaStoreInternalService_CreateVirtualField_FullMethodName  = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/CreateVirtualField"
	SchemaStoreInternalService_ListVirtualFields_FullMethodName   = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/ListVirtualFields"
	SchemaStoreInternalService_DeleteVirtualField_FullMethodName  = "/com.coralogix.schemastore.v1.SchemaStoreInternalService/DeleteVirtualField"
)

// SchemaStoreInternalServiceClient is the client API for SchemaStoreInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaStoreInternalServiceClient interface {
	// Deprecated: Do not use.
	LogFields(ctx context.Context, in *LogFieldsRequest, opts ...grpc.CallOption) (*LogFieldsResponse, error)
	// Deprecated: Do not use.
	LogLabels(ctx context.Context, in *LogLabelsRequest, opts ...grpc.CallOption) (*LogLabelsResponse, error)
	// Deprecated: Do not use.
	TracingFields(ctx context.Context, in *TracingFieldsRequest, opts ...grpc.CallOption) (*TracingFieldsResponse, error)
	// Deprecated: Do not use.
	TracingLabels(ctx context.Context, in *TracingLabelsRequest, opts ...grpc.CallOption) (*TracingLabelsResponse, error)
	// Deprecated: Do not use.
	MetricNames(ctx context.Context, in *MetricNamesRequest, opts ...grpc.CallOption) (*MetricNamesResponse, error)
	// Deprecated: Do not use.
	MetricLabels(ctx context.Context, in *MetricLabelsRequest, opts ...grpc.CallOption) (*MetricLabelsResponse, error)
	BatchTracingSamples(ctx context.Context, in *BatchTracingSamplesRequest, opts ...grpc.CallOption) (*BatchTracingSamplesResponse, error)
	Observations(ctx context.Context, in *ObservationsRequest, opts ...grpc.CallOption) (*ObservationsResponse, error)
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error)
	BatchCardinality(ctx context.Context, in *BatchCardinalityRequest, opts ...grpc.CallOption) (*BatchCardinalityResponse, error)
	CreateVirtualField(ctx context.Context, in *CreateVirtualFieldRequest, opts ...grpc.CallOption) (*CreateVirtualFieldResponse, error)
	ListVirtualFields(ctx context.Context, in *ListVirtualFieldsRequest, opts ...grpc.CallOption) (*ListVirtualFieldsResponse, error)
	DeleteVirtualField(ctx context.Context, in *DeleteVirtualFieldRequest, opts ...grpc.CallOption) (*DeleteVirtualFieldResponse, error)
}

type schemaStoreInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaStoreInternalServiceClient(cc grpc.ClientConnInterface) SchemaStoreInternalServiceClient {
	return &schemaStoreInternalServiceClient{cc}
}

// Deprecated: Do not use.
func (c *schemaStoreInternalServiceClient) LogFields(ctx context.Context, in *LogFieldsRequest, opts ...grpc.CallOption) (*LogFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogFieldsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_LogFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreInternalServiceClient) LogLabels(ctx context.Context, in *LogLabelsRequest, opts ...grpc.CallOption) (*LogLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogLabelsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_LogLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreInternalServiceClient) TracingFields(ctx context.Context, in *TracingFieldsRequest, opts ...grpc.CallOption) (*TracingFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TracingFieldsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_TracingFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreInternalServiceClient) TracingLabels(ctx context.Context, in *TracingLabelsRequest, opts ...grpc.CallOption) (*TracingLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TracingLabelsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_TracingLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreInternalServiceClient) MetricNames(ctx context.Context, in *MetricNamesRequest, opts ...grpc.CallOption) (*MetricNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricNamesResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_MetricNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreInternalServiceClient) MetricLabels(ctx context.Context, in *MetricLabelsRequest, opts ...grpc.CallOption) (*MetricLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricLabelsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_MetricLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) BatchTracingSamples(ctx context.Context, in *BatchTracingSamplesRequest, opts ...grpc.CallOption) (*BatchTracingSamplesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchTracingSamplesResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_BatchTracingSamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) Observations(ctx context.Context, in *ObservationsRequest, opts ...grpc.CallOption) (*ObservationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObservationsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_Observations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDatasetsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_ListDatasets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) BatchCardinality(ctx context.Context, in *BatchCardinalityRequest, opts ...grpc.CallOption) (*BatchCardinalityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCardinalityResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_BatchCardinality_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) CreateVirtualField(ctx context.Context, in *CreateVirtualFieldRequest, opts ...grpc.CallOption) (*CreateVirtualFieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVirtualFieldResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_CreateVirtualField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) ListVirtualFields(ctx context.Context, in *ListVirtualFieldsRequest, opts ...grpc.CallOption) (*ListVirtualFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVirtualFieldsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_ListVirtualFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreInternalServiceClient) DeleteVirtualField(ctx context.Context, in *DeleteVirtualFieldRequest, opts ...grpc.CallOption) (*DeleteVirtualFieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVirtualFieldResponse)
	err := c.cc.Invoke(ctx, SchemaStoreInternalService_DeleteVirtualField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaStoreInternalServiceServer is the server API for SchemaStoreInternalService service.
// All implementations must embed UnimplementedSchemaStoreInternalServiceServer
// for forward compatibility
type SchemaStoreInternalServiceServer interface {
	// Deprecated: Do not use.
	LogFields(context.Context, *LogFieldsRequest) (*LogFieldsResponse, error)
	// Deprecated: Do not use.
	LogLabels(context.Context, *LogLabelsRequest) (*LogLabelsResponse, error)
	// Deprecated: Do not use.
	TracingFields(context.Context, *TracingFieldsRequest) (*TracingFieldsResponse, error)
	// Deprecated: Do not use.
	TracingLabels(context.Context, *TracingLabelsRequest) (*TracingLabelsResponse, error)
	// Deprecated: Do not use.
	MetricNames(context.Context, *MetricNamesRequest) (*MetricNamesResponse, error)
	// Deprecated: Do not use.
	MetricLabels(context.Context, *MetricLabelsRequest) (*MetricLabelsResponse, error)
	BatchTracingSamples(context.Context, *BatchTracingSamplesRequest) (*BatchTracingSamplesResponse, error)
	Observations(context.Context, *ObservationsRequest) (*ObservationsResponse, error)
	ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error)
	BatchCardinality(context.Context, *BatchCardinalityRequest) (*BatchCardinalityResponse, error)
	CreateVirtualField(context.Context, *CreateVirtualFieldRequest) (*CreateVirtualFieldResponse, error)
	ListVirtualFields(context.Context, *ListVirtualFieldsRequest) (*ListVirtualFieldsResponse, error)
	DeleteVirtualField(context.Context, *DeleteVirtualFieldRequest) (*DeleteVirtualFieldResponse, error)
	mustEmbedUnimplementedSchemaStoreInternalServiceServer()
}

// UnimplementedSchemaStoreInternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaStoreInternalServiceServer struct {
}

func (UnimplementedSchemaStoreInternalServiceServer) LogFields(context.Context, *LogFieldsRequest) (*LogFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogFields not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) LogLabels(context.Context, *LogLabelsRequest) (*LogLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogLabels not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) TracingFields(context.Context, *TracingFieldsRequest) (*TracingFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TracingFields not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) TracingLabels(context.Context, *TracingLabelsRequest) (*TracingLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TracingLabels not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) MetricNames(context.Context, *MetricNamesRequest) (*MetricNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricNames not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) MetricLabels(context.Context, *MetricLabelsRequest) (*MetricLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricLabels not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) BatchTracingSamples(context.Context, *BatchTracingSamplesRequest) (*BatchTracingSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTracingSamples not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) Observations(context.Context, *ObservationsRequest) (*ObservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Observations not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) BatchCardinality(context.Context, *BatchCardinalityRequest) (*BatchCardinalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCardinality not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) CreateVirtualField(context.Context, *CreateVirtualFieldRequest) (*CreateVirtualFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualField not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) ListVirtualFields(context.Context, *ListVirtualFieldsRequest) (*ListVirtualFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualFields not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) DeleteVirtualField(context.Context, *DeleteVirtualFieldRequest) (*DeleteVirtualFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualField not implemented")
}
func (UnimplementedSchemaStoreInternalServiceServer) mustEmbedUnimplementedSchemaStoreInternalServiceServer() {
}

// UnsafeSchemaStoreInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaStoreInternalServiceServer will
// result in compilation errors.
type UnsafeSchemaStoreInternalServiceServer interface {
	mustEmbedUnimplementedSchemaStoreInternalServiceServer()
}

func RegisterSchemaStoreInternalServiceServer(s grpc.ServiceRegistrar, srv SchemaStoreInternalServiceServer) {
	s.RegisterService(&SchemaStoreInternalService_ServiceDesc, srv)
}

func _SchemaStoreInternalService_LogFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).LogFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_LogFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).LogFields(ctx, req.(*LogFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_LogLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).LogLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_LogLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).LogLabels(ctx, req.(*LogLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_TracingFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracingFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).TracingFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_TracingFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).TracingFields(ctx, req.(*TracingFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_TracingLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracingLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).TracingLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_TracingLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).TracingLabels(ctx, req.(*TracingLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_MetricNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).MetricNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_MetricNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).MetricNames(ctx, req.(*MetricNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_MetricLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).MetricLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_MetricLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).MetricLabels(ctx, req.(*MetricLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_BatchTracingSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTracingSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).BatchTracingSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_BatchTracingSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).BatchTracingSamples(ctx, req.(*BatchTracingSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_Observations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).Observations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_Observations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).Observations(ctx, req.(*ObservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_ListDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_BatchCardinality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCardinalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).BatchCardinality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_BatchCardinality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).BatchCardinality(ctx, req.(*BatchCardinalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_CreateVirtualField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).CreateVirtualField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_CreateVirtualField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).CreateVirtualField(ctx, req.(*CreateVirtualFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_ListVirtualFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVirtualFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).ListVirtualFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_ListVirtualFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).ListVirtualFields(ctx, req.(*ListVirtualFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreInternalService_DeleteVirtualField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVirtualFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreInternalServiceServer).DeleteVirtualField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreInternalService_DeleteVirtualField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreInternalServiceServer).DeleteVirtualField(ctx, req.(*DeleteVirtualFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemaStoreInternalService_ServiceDesc is the grpc.ServiceDesc for SchemaStoreInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemaStoreInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.schemastore.v1.SchemaStoreInternalService",
	HandlerType: (*SchemaStoreInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogFields",
			Handler:    _SchemaStoreInternalService_LogFields_Handler,
		},
		{
			MethodName: "LogLabels",
			Handler:    _SchemaStoreInternalService_LogLabels_Handler,
		},
		{
			MethodName: "TracingFields",
			Handler:    _SchemaStoreInternalService_TracingFields_Handler,
		},
		{
			MethodName: "TracingLabels",
			Handler:    _SchemaStoreInternalService_TracingLabels_Handler,
		},
		{
			MethodName: "MetricNames",
			Handler:    _SchemaStoreInternalService_MetricNames_Handler,
		},
		{
			MethodName: "MetricLabels",
			Handler:    _SchemaStoreInternalService_MetricLabels_Handler,
		},
		{
			MethodName: "BatchTracingSamples",
			Handler:    _SchemaStoreInternalService_BatchTracingSamples_Handler,
		},
		{
			MethodName: "Observations",
			Handler:    _SchemaStoreInternalService_Observations_Handler,
		},
		{
			MethodName: "ListDatasets",
			Handler:    _SchemaStoreInternalService_ListDatasets_Handler,
		},
		{
			MethodName: "BatchCardinality",
			Handler:    _SchemaStoreInternalService_BatchCardinality_Handler,
		},
		{
			MethodName: "CreateVirtualField",
			Handler:    _SchemaStoreInternalService_CreateVirtualField_Handler,
		},
		{
			MethodName: "ListVirtualFields",
			Handler:    _SchemaStoreInternalService_ListVirtualFields_Handler,
		},
		{
			MethodName: "DeleteVirtualField",
			Handler:    _SchemaStoreInternalService_DeleteVirtualField_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/schemastore/v1/service.proto",
}

const (
	SchemaStoreService_LogFields_FullMethodName           = "/com.coralogix.schemastore.v1.SchemaStoreService/LogFields"
	SchemaStoreService_TracingFields_FullMethodName       = "/com.coralogix.schemastore.v1.SchemaStoreService/TracingFields"
	SchemaStoreService_LogLabels_FullMethodName           = "/com.coralogix.schemastore.v1.SchemaStoreService/LogLabels"
	SchemaStoreService_TracingLabels_FullMethodName       = "/com.coralogix.schemastore.v1.SchemaStoreService/TracingLabels"
	SchemaStoreService_TracingSamples_FullMethodName      = "/com.coralogix.schemastore.v1.SchemaStoreService/TracingSamples"
	SchemaStoreService_ListEnrichments_FullMethodName     = "/com.coralogix.schemastore.v1.SchemaStoreService/ListEnrichments"
	SchemaStoreService_MetricNames_FullMethodName         = "/com.coralogix.schemastore.v1.SchemaStoreService/MetricNames"
	SchemaStoreService_MetricLabels_FullMethodName        = "/com.coralogix.schemastore.v1.SchemaStoreService/MetricLabels"
	SchemaStoreService_BatchTracingSamples_FullMethodName = "/com.coralogix.schemastore.v1.SchemaStoreService/BatchTracingSamples"
	SchemaStoreService_ListDatasets_FullMethodName        = "/com.coralogix.schemastore.v1.SchemaStoreService/ListDatasets"
	SchemaStoreService_SubmitUsageStats_FullMethodName    = "/com.coralogix.schemastore.v1.SchemaStoreService/SubmitUsageStats"
	SchemaStoreService_Correlations_FullMethodName        = "/com.coralogix.schemastore.v1.SchemaStoreService/Correlations"
	SchemaStoreService_CorrelationChoice_FullMethodName   = "/com.coralogix.schemastore.v1.SchemaStoreService/CorrelationChoice"
	SchemaStoreService_BatchCardinality_FullMethodName    = "/com.coralogix.schemastore.v1.SchemaStoreService/BatchCardinality"
	SchemaStoreService_Observations_FullMethodName        = "/com.coralogix.schemastore.v1.SchemaStoreService/Observations"
)

// SchemaStoreServiceClient is the client API for SchemaStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaStoreServiceClient interface {
	// Deprecated: Do not use.
	LogFields(ctx context.Context, in *LogFieldsRequest, opts ...grpc.CallOption) (*LogFieldsResponse, error)
	// Deprecated: Do not use.
	TracingFields(ctx context.Context, in *TracingFieldsRequest, opts ...grpc.CallOption) (*TracingFieldsResponse, error)
	// Deprecated: Do not use.
	LogLabels(ctx context.Context, in *LogLabelsRequest, opts ...grpc.CallOption) (*LogLabelsResponse, error)
	// Deprecated: Do not use.
	TracingLabels(ctx context.Context, in *TracingLabelsRequest, opts ...grpc.CallOption) (*TracingLabelsResponse, error)
	// Deprecated: Do not use.
	TracingSamples(ctx context.Context, in *TracingSamplesRequest, opts ...grpc.CallOption) (*TracingSamplesResponse, error)
	// Deprecated: Do not use.
	ListEnrichments(ctx context.Context, in *ListEnrichmentsRequest, opts ...grpc.CallOption) (*ListEnrichmentsResponse, error)
	// Deprecated: Do not use.
	MetricNames(ctx context.Context, in *MetricNamesRequest, opts ...grpc.CallOption) (*MetricNamesResponse, error)
	// Deprecated: Do not use.
	MetricLabels(ctx context.Context, in *MetricLabelsRequest, opts ...grpc.CallOption) (*MetricLabelsResponse, error)
	BatchTracingSamples(ctx context.Context, in *BatchTracingSamplesRequest, opts ...grpc.CallOption) (*BatchTracingSamplesResponse, error)
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error)
	SubmitUsageStats(ctx context.Context, in *SubmitUsageStatsRequest, opts ...grpc.CallOption) (*SubmitUsageStatsResponse, error)
	Correlations(ctx context.Context, in *CorrelationsRequest, opts ...grpc.CallOption) (*CorrelationsResponse, error)
	CorrelationChoice(ctx context.Context, in *CorrelationChoiceRequest, opts ...grpc.CallOption) (*CorrelationChoiceResponse, error)
	BatchCardinality(ctx context.Context, in *BatchCardinalityRequest, opts ...grpc.CallOption) (*BatchCardinalityResponse, error)
	Observations(ctx context.Context, in *ObservationsRequest, opts ...grpc.CallOption) (*ObservationsResponse, error)
}

type schemaStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaStoreServiceClient(cc grpc.ClientConnInterface) SchemaStoreServiceClient {
	return &schemaStoreServiceClient{cc}
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) LogFields(ctx context.Context, in *LogFieldsRequest, opts ...grpc.CallOption) (*LogFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogFieldsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_LogFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) TracingFields(ctx context.Context, in *TracingFieldsRequest, opts ...grpc.CallOption) (*TracingFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TracingFieldsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_TracingFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) LogLabels(ctx context.Context, in *LogLabelsRequest, opts ...grpc.CallOption) (*LogLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogLabelsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_LogLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) TracingLabels(ctx context.Context, in *TracingLabelsRequest, opts ...grpc.CallOption) (*TracingLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TracingLabelsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_TracingLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) TracingSamples(ctx context.Context, in *TracingSamplesRequest, opts ...grpc.CallOption) (*TracingSamplesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TracingSamplesResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_TracingSamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) ListEnrichments(ctx context.Context, in *ListEnrichmentsRequest, opts ...grpc.CallOption) (*ListEnrichmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnrichmentsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_ListEnrichments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) MetricNames(ctx context.Context, in *MetricNamesRequest, opts ...grpc.CallOption) (*MetricNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricNamesResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_MetricNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *schemaStoreServiceClient) MetricLabels(ctx context.Context, in *MetricLabelsRequest, opts ...grpc.CallOption) (*MetricLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricLabelsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_MetricLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) BatchTracingSamples(ctx context.Context, in *BatchTracingSamplesRequest, opts ...grpc.CallOption) (*BatchTracingSamplesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchTracingSamplesResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_BatchTracingSamples_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDatasetsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_ListDatasets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) SubmitUsageStats(ctx context.Context, in *SubmitUsageStatsRequest, opts ...grpc.CallOption) (*SubmitUsageStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitUsageStatsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_SubmitUsageStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) Correlations(ctx context.Context, in *CorrelationsRequest, opts ...grpc.CallOption) (*CorrelationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CorrelationsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_Correlations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) CorrelationChoice(ctx context.Context, in *CorrelationChoiceRequest, opts ...grpc.CallOption) (*CorrelationChoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CorrelationChoiceResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_CorrelationChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) BatchCardinality(ctx context.Context, in *BatchCardinalityRequest, opts ...grpc.CallOption) (*BatchCardinalityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCardinalityResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_BatchCardinality_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaStoreServiceClient) Observations(ctx context.Context, in *ObservationsRequest, opts ...grpc.CallOption) (*ObservationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObservationsResponse)
	err := c.cc.Invoke(ctx, SchemaStoreService_Observations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaStoreServiceServer is the server API for SchemaStoreService service.
// All implementations must embed UnimplementedSchemaStoreServiceServer
// for forward compatibility
type SchemaStoreServiceServer interface {
	// Deprecated: Do not use.
	LogFields(context.Context, *LogFieldsRequest) (*LogFieldsResponse, error)
	// Deprecated: Do not use.
	TracingFields(context.Context, *TracingFieldsRequest) (*TracingFieldsResponse, error)
	// Deprecated: Do not use.
	LogLabels(context.Context, *LogLabelsRequest) (*LogLabelsResponse, error)
	// Deprecated: Do not use.
	TracingLabels(context.Context, *TracingLabelsRequest) (*TracingLabelsResponse, error)
	// Deprecated: Do not use.
	TracingSamples(context.Context, *TracingSamplesRequest) (*TracingSamplesResponse, error)
	// Deprecated: Do not use.
	ListEnrichments(context.Context, *ListEnrichmentsRequest) (*ListEnrichmentsResponse, error)
	// Deprecated: Do not use.
	MetricNames(context.Context, *MetricNamesRequest) (*MetricNamesResponse, error)
	// Deprecated: Do not use.
	MetricLabels(context.Context, *MetricLabelsRequest) (*MetricLabelsResponse, error)
	BatchTracingSamples(context.Context, *BatchTracingSamplesRequest) (*BatchTracingSamplesResponse, error)
	ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error)
	SubmitUsageStats(context.Context, *SubmitUsageStatsRequest) (*SubmitUsageStatsResponse, error)
	Correlations(context.Context, *CorrelationsRequest) (*CorrelationsResponse, error)
	CorrelationChoice(context.Context, *CorrelationChoiceRequest) (*CorrelationChoiceResponse, error)
	BatchCardinality(context.Context, *BatchCardinalityRequest) (*BatchCardinalityResponse, error)
	Observations(context.Context, *ObservationsRequest) (*ObservationsResponse, error)
	mustEmbedUnimplementedSchemaStoreServiceServer()
}

// UnimplementedSchemaStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaStoreServiceServer struct {
}

func (UnimplementedSchemaStoreServiceServer) LogFields(context.Context, *LogFieldsRequest) (*LogFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogFields not implemented")
}
func (UnimplementedSchemaStoreServiceServer) TracingFields(context.Context, *TracingFieldsRequest) (*TracingFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TracingFields not implemented")
}
func (UnimplementedSchemaStoreServiceServer) LogLabels(context.Context, *LogLabelsRequest) (*LogLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogLabels not implemented")
}
func (UnimplementedSchemaStoreServiceServer) TracingLabels(context.Context, *TracingLabelsRequest) (*TracingLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TracingLabels not implemented")
}
func (UnimplementedSchemaStoreServiceServer) TracingSamples(context.Context, *TracingSamplesRequest) (*TracingSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TracingSamples not implemented")
}
func (UnimplementedSchemaStoreServiceServer) ListEnrichments(context.Context, *ListEnrichmentsRequest) (*ListEnrichmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnrichments not implemented")
}
func (UnimplementedSchemaStoreServiceServer) MetricNames(context.Context, *MetricNamesRequest) (*MetricNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricNames not implemented")
}
func (UnimplementedSchemaStoreServiceServer) MetricLabels(context.Context, *MetricLabelsRequest) (*MetricLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricLabels not implemented")
}
func (UnimplementedSchemaStoreServiceServer) BatchTracingSamples(context.Context, *BatchTracingSamplesRequest) (*BatchTracingSamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTracingSamples not implemented")
}
func (UnimplementedSchemaStoreServiceServer) ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedSchemaStoreServiceServer) SubmitUsageStats(context.Context, *SubmitUsageStatsRequest) (*SubmitUsageStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUsageStats not implemented")
}
func (UnimplementedSchemaStoreServiceServer) Correlations(context.Context, *CorrelationsRequest) (*CorrelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Correlations not implemented")
}
func (UnimplementedSchemaStoreServiceServer) CorrelationChoice(context.Context, *CorrelationChoiceRequest) (*CorrelationChoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CorrelationChoice not implemented")
}
func (UnimplementedSchemaStoreServiceServer) BatchCardinality(context.Context, *BatchCardinalityRequest) (*BatchCardinalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCardinality not implemented")
}
func (UnimplementedSchemaStoreServiceServer) Observations(context.Context, *ObservationsRequest) (*ObservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Observations not implemented")
}
func (UnimplementedSchemaStoreServiceServer) mustEmbedUnimplementedSchemaStoreServiceServer() {}

// UnsafeSchemaStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaStoreServiceServer will
// result in compilation errors.
type UnsafeSchemaStoreServiceServer interface {
	mustEmbedUnimplementedSchemaStoreServiceServer()
}

func RegisterSchemaStoreServiceServer(s grpc.ServiceRegistrar, srv SchemaStoreServiceServer) {
	s.RegisterService(&SchemaStoreService_ServiceDesc, srv)
}

func _SchemaStoreService_LogFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).LogFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_LogFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).LogFields(ctx, req.(*LogFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_TracingFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracingFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).TracingFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_TracingFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).TracingFields(ctx, req.(*TracingFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_LogLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).LogLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_LogLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).LogLabels(ctx, req.(*LogLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_TracingLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracingLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).TracingLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_TracingLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).TracingLabels(ctx, req.(*TracingLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_TracingSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracingSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).TracingSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_TracingSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).TracingSamples(ctx, req.(*TracingSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_ListEnrichments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnrichmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).ListEnrichments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_ListEnrichments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).ListEnrichments(ctx, req.(*ListEnrichmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_MetricNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).MetricNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_MetricNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).MetricNames(ctx, req.(*MetricNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_MetricLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).MetricLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_MetricLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).MetricLabels(ctx, req.(*MetricLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_BatchTracingSamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTracingSamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).BatchTracingSamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_BatchTracingSamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).BatchTracingSamples(ctx, req.(*BatchTracingSamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_ListDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_SubmitUsageStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitUsageStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).SubmitUsageStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_SubmitUsageStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).SubmitUsageStats(ctx, req.(*SubmitUsageStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_Correlations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CorrelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).Correlations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_Correlations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).Correlations(ctx, req.(*CorrelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_CorrelationChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CorrelationChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).CorrelationChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_CorrelationChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).CorrelationChoice(ctx, req.(*CorrelationChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_BatchCardinality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCardinalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).BatchCardinality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_BatchCardinality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).BatchCardinality(ctx, req.(*BatchCardinalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaStoreService_Observations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaStoreServiceServer).Observations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaStoreService_Observations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaStoreServiceServer).Observations(ctx, req.(*ObservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemaStoreService_ServiceDesc is the grpc.ServiceDesc for SchemaStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemaStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.schemastore.v1.SchemaStoreService",
	HandlerType: (*SchemaStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogFields",
			Handler:    _SchemaStoreService_LogFields_Handler,
		},
		{
			MethodName: "TracingFields",
			Handler:    _SchemaStoreService_TracingFields_Handler,
		},
		{
			MethodName: "LogLabels",
			Handler:    _SchemaStoreService_LogLabels_Handler,
		},
		{
			MethodName: "TracingLabels",
			Handler:    _SchemaStoreService_TracingLabels_Handler,
		},
		{
			MethodName: "TracingSamples",
			Handler:    _SchemaStoreService_TracingSamples_Handler,
		},
		{
			MethodName: "ListEnrichments",
			Handler:    _SchemaStoreService_ListEnrichments_Handler,
		},
		{
			MethodName: "MetricNames",
			Handler:    _SchemaStoreService_MetricNames_Handler,
		},
		{
			MethodName: "MetricLabels",
			Handler:    _SchemaStoreService_MetricLabels_Handler,
		},
		{
			MethodName: "BatchTracingSamples",
			Handler:    _SchemaStoreService_BatchTracingSamples_Handler,
		},
		{
			MethodName: "ListDatasets",
			Handler:    _SchemaStoreService_ListDatasets_Handler,
		},
		{
			MethodName: "SubmitUsageStats",
			Handler:    _SchemaStoreService_SubmitUsageStats_Handler,
		},
		{
			MethodName: "Correlations",
			Handler:    _SchemaStoreService_Correlations_Handler,
		},
		{
			MethodName: "CorrelationChoice",
			Handler:    _SchemaStoreService_CorrelationChoice_Handler,
		},
		{
			MethodName: "BatchCardinality",
			Handler:    _SchemaStoreService_BatchCardinality_Handler,
		},
		{
			MethodName: "Observations",
			Handler:    _SchemaStoreService_Observations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/schemastore/v1/service.proto",
}

const (
	QueryAssistantService_GenerateQuery_FullMethodName  = "/com.coralogix.schemastore.v1.QueryAssistantService/GenerateQuery"
	QueryAssistantService_Settings_FullMethodName       = "/com.coralogix.schemastore.v1.QueryAssistantService/Settings"
	QueryAssistantService_UpdateSettings_FullMethodName = "/com.coralogix.schemastore.v1.QueryAssistantService/UpdateSettings"
	QueryAssistantService_AutoFeedback_FullMethodName   = "/com.coralogix.schemastore.v1.QueryAssistantService/AutoFeedback"
	QueryAssistantService_UserFeedback_FullMethodName   = "/com.coralogix.schemastore.v1.QueryAssistantService/UserFeedback"
	QueryAssistantService_UserFeedbackV2_FullMethodName = "/com.coralogix.schemastore.v1.QueryAssistantService/UserFeedbackV2"
)

// QueryAssistantServiceClient is the client API for QueryAssistantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryAssistantServiceClient interface {
	GenerateQuery(ctx context.Context, in *GenerateQueryRequest, opts ...grpc.CallOption) (*GenerateQueryResponse, error)
	Settings(ctx context.Context, in *QueryAssistantServiceSettingsRequest, opts ...grpc.CallOption) (*QueryAssistantServiceSettingsResponse, error)
	UpdateSettings(ctx context.Context, in *QueryAssistantServiceUpdateSettingsRequest, opts ...grpc.CallOption) (*QueryAssistantServiceUpdateSettingsResponse, error)
	AutoFeedback(ctx context.Context, in *AutoFeedbackRequest, opts ...grpc.CallOption) (*AutoFeedbackResponse, error)
	// Deprecated: Do not use.
	UserFeedback(ctx context.Context, in *UserFeedbackRequest, opts ...grpc.CallOption) (*UserFeedbackResponse, error)
	UserFeedbackV2(ctx context.Context, in *UserFeedbackV2Request, opts ...grpc.CallOption) (*UserFeedbackV2Response, error)
}

type queryAssistantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryAssistantServiceClient(cc grpc.ClientConnInterface) QueryAssistantServiceClient {
	return &queryAssistantServiceClient{cc}
}

func (c *queryAssistantServiceClient) GenerateQuery(ctx context.Context, in *GenerateQueryRequest, opts ...grpc.CallOption) (*GenerateQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateQueryResponse)
	err := c.cc.Invoke(ctx, QueryAssistantService_GenerateQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantServiceClient) Settings(ctx context.Context, in *QueryAssistantServiceSettingsRequest, opts ...grpc.CallOption) (*QueryAssistantServiceSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAssistantServiceSettingsResponse)
	err := c.cc.Invoke(ctx, QueryAssistantService_Settings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantServiceClient) UpdateSettings(ctx context.Context, in *QueryAssistantServiceUpdateSettingsRequest, opts ...grpc.CallOption) (*QueryAssistantServiceUpdateSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAssistantServiceUpdateSettingsResponse)
	err := c.cc.Invoke(ctx, QueryAssistantService_UpdateSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantServiceClient) AutoFeedback(ctx context.Context, in *AutoFeedbackRequest, opts ...grpc.CallOption) (*AutoFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoFeedbackResponse)
	err := c.cc.Invoke(ctx, QueryAssistantService_AutoFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryAssistantServiceClient) UserFeedback(ctx context.Context, in *UserFeedbackRequest, opts ...grpc.CallOption) (*UserFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFeedbackResponse)
	err := c.cc.Invoke(ctx, QueryAssistantService_UserFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantServiceClient) UserFeedbackV2(ctx context.Context, in *UserFeedbackV2Request, opts ...grpc.CallOption) (*UserFeedbackV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFeedbackV2Response)
	err := c.cc.Invoke(ctx, QueryAssistantService_UserFeedbackV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryAssistantServiceServer is the server API for QueryAssistantService service.
// All implementations must embed UnimplementedQueryAssistantServiceServer
// for forward compatibility
type QueryAssistantServiceServer interface {
	GenerateQuery(context.Context, *GenerateQueryRequest) (*GenerateQueryResponse, error)
	Settings(context.Context, *QueryAssistantServiceSettingsRequest) (*QueryAssistantServiceSettingsResponse, error)
	UpdateSettings(context.Context, *QueryAssistantServiceUpdateSettingsRequest) (*QueryAssistantServiceUpdateSettingsResponse, error)
	AutoFeedback(context.Context, *AutoFeedbackRequest) (*AutoFeedbackResponse, error)
	// Deprecated: Do not use.
	UserFeedback(context.Context, *UserFeedbackRequest) (*UserFeedbackResponse, error)
	UserFeedbackV2(context.Context, *UserFeedbackV2Request) (*UserFeedbackV2Response, error)
	mustEmbedUnimplementedQueryAssistantServiceServer()
}

// UnimplementedQueryAssistantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryAssistantServiceServer struct {
}

func (UnimplementedQueryAssistantServiceServer) GenerateQuery(context.Context, *GenerateQueryRequest) (*GenerateQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateQuery not implemented")
}
func (UnimplementedQueryAssistantServiceServer) Settings(context.Context, *QueryAssistantServiceSettingsRequest) (*QueryAssistantServiceSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Settings not implemented")
}
func (UnimplementedQueryAssistantServiceServer) UpdateSettings(context.Context, *QueryAssistantServiceUpdateSettingsRequest) (*QueryAssistantServiceUpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedQueryAssistantServiceServer) AutoFeedback(context.Context, *AutoFeedbackRequest) (*AutoFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoFeedback not implemented")
}
func (UnimplementedQueryAssistantServiceServer) UserFeedback(context.Context, *UserFeedbackRequest) (*UserFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFeedback not implemented")
}
func (UnimplementedQueryAssistantServiceServer) UserFeedbackV2(context.Context, *UserFeedbackV2Request) (*UserFeedbackV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFeedbackV2 not implemented")
}
func (UnimplementedQueryAssistantServiceServer) mustEmbedUnimplementedQueryAssistantServiceServer() {}

// UnsafeQueryAssistantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryAssistantServiceServer will
// result in compilation errors.
type UnsafeQueryAssistantServiceServer interface {
	mustEmbedUnimplementedQueryAssistantServiceServer()
}

func RegisterQueryAssistantServiceServer(s grpc.ServiceRegistrar, srv QueryAssistantServiceServer) {
	s.RegisterService(&QueryAssistantService_ServiceDesc, srv)
}

func _QueryAssistantService_GenerateQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantServiceServer).GenerateQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantService_GenerateQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantServiceServer).GenerateQuery(ctx, req.(*GenerateQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantService_Settings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssistantServiceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantServiceServer).Settings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantService_Settings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantServiceServer).Settings(ctx, req.(*QueryAssistantServiceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantService_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssistantServiceUpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantServiceServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantService_UpdateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantServiceServer).UpdateSettings(ctx, req.(*QueryAssistantServiceUpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantService_AutoFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantServiceServer).AutoFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantService_AutoFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantServiceServer).AutoFeedback(ctx, req.(*AutoFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantService_UserFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantServiceServer).UserFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantService_UserFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantServiceServer).UserFeedback(ctx, req.(*UserFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantService_UserFeedbackV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFeedbackV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantServiceServer).UserFeedbackV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantService_UserFeedbackV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantServiceServer).UserFeedbackV2(ctx, req.(*UserFeedbackV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryAssistantService_ServiceDesc is the grpc.ServiceDesc for QueryAssistantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryAssistantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.schemastore.v1.QueryAssistantService",
	HandlerType: (*QueryAssistantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateQuery",
			Handler:    _QueryAssistantService_GenerateQuery_Handler,
		},
		{
			MethodName: "Settings",
			Handler:    _QueryAssistantService_Settings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _QueryAssistantService_UpdateSettings_Handler,
		},
		{
			MethodName: "AutoFeedback",
			Handler:    _QueryAssistantService_AutoFeedback_Handler,
		},
		{
			MethodName: "UserFeedback",
			Handler:    _QueryAssistantService_UserFeedback_Handler,
		},
		{
			MethodName: "UserFeedbackV2",
			Handler:    _QueryAssistantService_UserFeedbackV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/schemastore/v1/service.proto",
}

const (
	QueryAssistantInternalService_GenerateQuery_FullMethodName         = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/GenerateQuery"
	QueryAssistantInternalService_Settings_FullMethodName              = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/Settings"
	QueryAssistantInternalService_UpdateSettings_FullMethodName        = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/UpdateSettings"
	QueryAssistantInternalService_AutoFeedback_FullMethodName          = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/AutoFeedback"
	QueryAssistantInternalService_UserFeedback_FullMethodName          = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/UserFeedback"
	QueryAssistantInternalService_UserFeedbackV2_FullMethodName        = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/UserFeedbackV2"
	QueryAssistantInternalService_InternalEnableCompany_FullMethodName = "/com.coralogix.schemastore.v1.QueryAssistantInternalService/InternalEnableCompany"
)

// QueryAssistantInternalServiceClient is the client API for QueryAssistantInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryAssistantInternalServiceClient interface {
	GenerateQuery(ctx context.Context, in *GenerateQueryRequest, opts ...grpc.CallOption) (*GenerateQueryResponse, error)
	Settings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error)
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error)
	AutoFeedback(ctx context.Context, in *AutoFeedbackRequest, opts ...grpc.CallOption) (*AutoFeedbackResponse, error)
	// Deprecated: Do not use.
	UserFeedback(ctx context.Context, in *UserFeedbackRequest, opts ...grpc.CallOption) (*UserFeedbackResponse, error)
	UserFeedbackV2(ctx context.Context, in *UserFeedbackV2Request, opts ...grpc.CallOption) (*UserFeedbackV2Response, error)
	InternalEnableCompany(ctx context.Context, in *InternalEnableCompanyRequest, opts ...grpc.CallOption) (*InternalEnableCompanyResponse, error)
}

type queryAssistantInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryAssistantInternalServiceClient(cc grpc.ClientConnInterface) QueryAssistantInternalServiceClient {
	return &queryAssistantInternalServiceClient{cc}
}

func (c *queryAssistantInternalServiceClient) GenerateQuery(ctx context.Context, in *GenerateQueryRequest, opts ...grpc.CallOption) (*GenerateQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateQueryResponse)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_GenerateQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantInternalServiceClient) Settings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettingsResponse)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_Settings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantInternalServiceClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSettingsResponse)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_UpdateSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantInternalServiceClient) AutoFeedback(ctx context.Context, in *AutoFeedbackRequest, opts ...grpc.CallOption) (*AutoFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoFeedbackResponse)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_AutoFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryAssistantInternalServiceClient) UserFeedback(ctx context.Context, in *UserFeedbackRequest, opts ...grpc.CallOption) (*UserFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFeedbackResponse)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_UserFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantInternalServiceClient) UserFeedbackV2(ctx context.Context, in *UserFeedbackV2Request, opts ...grpc.CallOption) (*UserFeedbackV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFeedbackV2Response)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_UserFeedbackV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAssistantInternalServiceClient) InternalEnableCompany(ctx context.Context, in *InternalEnableCompanyRequest, opts ...grpc.CallOption) (*InternalEnableCompanyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalEnableCompanyResponse)
	err := c.cc.Invoke(ctx, QueryAssistantInternalService_InternalEnableCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryAssistantInternalServiceServer is the server API for QueryAssistantInternalService service.
// All implementations must embed UnimplementedQueryAssistantInternalServiceServer
// for forward compatibility
type QueryAssistantInternalServiceServer interface {
	GenerateQuery(context.Context, *GenerateQueryRequest) (*GenerateQueryResponse, error)
	Settings(context.Context, *SettingsRequest) (*SettingsResponse, error)
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error)
	AutoFeedback(context.Context, *AutoFeedbackRequest) (*AutoFeedbackResponse, error)
	// Deprecated: Do not use.
	UserFeedback(context.Context, *UserFeedbackRequest) (*UserFeedbackResponse, error)
	UserFeedbackV2(context.Context, *UserFeedbackV2Request) (*UserFeedbackV2Response, error)
	InternalEnableCompany(context.Context, *InternalEnableCompanyRequest) (*InternalEnableCompanyResponse, error)
	mustEmbedUnimplementedQueryAssistantInternalServiceServer()
}

// UnimplementedQueryAssistantInternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryAssistantInternalServiceServer struct {
}

func (UnimplementedQueryAssistantInternalServiceServer) GenerateQuery(context.Context, *GenerateQueryRequest) (*GenerateQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateQuery not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) Settings(context.Context, *SettingsRequest) (*SettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Settings not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) AutoFeedback(context.Context, *AutoFeedbackRequest) (*AutoFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoFeedback not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) UserFeedback(context.Context, *UserFeedbackRequest) (*UserFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFeedback not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) UserFeedbackV2(context.Context, *UserFeedbackV2Request) (*UserFeedbackV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFeedbackV2 not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) InternalEnableCompany(context.Context, *InternalEnableCompanyRequest) (*InternalEnableCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalEnableCompany not implemented")
}
func (UnimplementedQueryAssistantInternalServiceServer) mustEmbedUnimplementedQueryAssistantInternalServiceServer() {
}

// UnsafeQueryAssistantInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryAssistantInternalServiceServer will
// result in compilation errors.
type UnsafeQueryAssistantInternalServiceServer interface {
	mustEmbedUnimplementedQueryAssistantInternalServiceServer()
}

func RegisterQueryAssistantInternalServiceServer(s grpc.ServiceRegistrar, srv QueryAssistantInternalServiceServer) {
	s.RegisterService(&QueryAssistantInternalService_ServiceDesc, srv)
}

func _QueryAssistantInternalService_GenerateQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).GenerateQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_GenerateQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).GenerateQuery(ctx, req.(*GenerateQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantInternalService_Settings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).Settings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_Settings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).Settings(ctx, req.(*SettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantInternalService_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_UpdateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantInternalService_AutoFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).AutoFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_AutoFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).AutoFeedback(ctx, req.(*AutoFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantInternalService_UserFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).UserFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_UserFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).UserFeedback(ctx, req.(*UserFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantInternalService_UserFeedbackV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFeedbackV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).UserFeedbackV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_UserFeedbackV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).UserFeedbackV2(ctx, req.(*UserFeedbackV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAssistantInternalService_InternalEnableCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalEnableCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAssistantInternalServiceServer).InternalEnableCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAssistantInternalService_InternalEnableCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAssistantInternalServiceServer).InternalEnableCompany(ctx, req.(*InternalEnableCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryAssistantInternalService_ServiceDesc is the grpc.ServiceDesc for QueryAssistantInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryAssistantInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.schemastore.v1.QueryAssistantInternalService",
	HandlerType: (*QueryAssistantInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateQuery",
			Handler:    _QueryAssistantInternalService_GenerateQuery_Handler,
		},
		{
			MethodName: "Settings",
			Handler:    _QueryAssistantInternalService_Settings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _QueryAssistantInternalService_UpdateSettings_Handler,
		},
		{
			MethodName: "AutoFeedback",
			Handler:    _QueryAssistantInternalService_AutoFeedback_Handler,
		},
		{
			MethodName: "UserFeedback",
			Handler:    _QueryAssistantInternalService_UserFeedback_Handler,
		},
		{
			MethodName: "UserFeedbackV2",
			Handler:    _QueryAssistantInternalService_UserFeedbackV2_Handler,
		},
		{
			MethodName: "InternalEnableCompany",
			Handler:    _QueryAssistantInternalService_InternalEnableCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/schemastore/v1/service.proto",
}

const (
	LogsExplainerService_GenerateExplanation_FullMethodName = "/com.coralogix.schemastore.v1.LogsExplainerService/GenerateExplanation"
)

// LogsExplainerServiceClient is the client API for LogsExplainerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsExplainerServiceClient interface {
	GenerateExplanation(ctx context.Context, in *GenerateExplanationRequest, opts ...grpc.CallOption) (*GenerateExplanationResponse, error)
}

type logsExplainerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsExplainerServiceClient(cc grpc.ClientConnInterface) LogsExplainerServiceClient {
	return &logsExplainerServiceClient{cc}
}

func (c *logsExplainerServiceClient) GenerateExplanation(ctx context.Context, in *GenerateExplanationRequest, opts ...grpc.CallOption) (*GenerateExplanationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateExplanationResponse)
	err := c.cc.Invoke(ctx, LogsExplainerService_GenerateExplanation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsExplainerServiceServer is the server API for LogsExplainerService service.
// All implementations must embed UnimplementedLogsExplainerServiceServer
// for forward compatibility
type LogsExplainerServiceServer interface {
	GenerateExplanation(context.Context, *GenerateExplanationRequest) (*GenerateExplanationResponse, error)
	mustEmbedUnimplementedLogsExplainerServiceServer()
}

// UnimplementedLogsExplainerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogsExplainerServiceServer struct {
}

func (UnimplementedLogsExplainerServiceServer) GenerateExplanation(context.Context, *GenerateExplanationRequest) (*GenerateExplanationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateExplanation not implemented")
}
func (UnimplementedLogsExplainerServiceServer) mustEmbedUnimplementedLogsExplainerServiceServer() {}

// UnsafeLogsExplainerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsExplainerServiceServer will
// result in compilation errors.
type UnsafeLogsExplainerServiceServer interface {
	mustEmbedUnimplementedLogsExplainerServiceServer()
}

func RegisterLogsExplainerServiceServer(s grpc.ServiceRegistrar, srv LogsExplainerServiceServer) {
	s.RegisterService(&LogsExplainerService_ServiceDesc, srv)
}

func _LogsExplainerService_GenerateExplanation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateExplanationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsExplainerServiceServer).GenerateExplanation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogsExplainerService_GenerateExplanation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsExplainerServiceServer).GenerateExplanation(ctx, req.(*GenerateExplanationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogsExplainerService_ServiceDesc is the grpc.ServiceDesc for LogsExplainerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogsExplainerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.schemastore.v1.LogsExplainerService",
	HandlerType: (*LogsExplainerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateExplanation",
			Handler:    _LogsExplainerService_GenerateExplanation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/schemastore/v1/service.proto",
}

const (
	LogsExplainerInternalService_GenerateExplanation_FullMethodName = "/com.coralogix.schemastore.v1.LogsExplainerInternalService/GenerateExplanation"
)

// LogsExplainerInternalServiceClient is the client API for LogsExplainerInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsExplainerInternalServiceClient interface {
	GenerateExplanation(ctx context.Context, in *GenerateExplanationRequest, opts ...grpc.CallOption) (*GenerateExplanationResponse, error)
}

type logsExplainerInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsExplainerInternalServiceClient(cc grpc.ClientConnInterface) LogsExplainerInternalServiceClient {
	return &logsExplainerInternalServiceClient{cc}
}

func (c *logsExplainerInternalServiceClient) GenerateExplanation(ctx context.Context, in *GenerateExplanationRequest, opts ...grpc.CallOption) (*GenerateExplanationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateExplanationResponse)
	err := c.cc.Invoke(ctx, LogsExplainerInternalService_GenerateExplanation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsExplainerInternalServiceServer is the server API for LogsExplainerInternalService service.
// All implementations must embed UnimplementedLogsExplainerInternalServiceServer
// for forward compatibility
type LogsExplainerInternalServiceServer interface {
	GenerateExplanation(context.Context, *GenerateExplanationRequest) (*GenerateExplanationResponse, error)
	mustEmbedUnimplementedLogsExplainerInternalServiceServer()
}

// UnimplementedLogsExplainerInternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogsExplainerInternalServiceServer struct {
}

func (UnimplementedLogsExplainerInternalServiceServer) GenerateExplanation(context.Context, *GenerateExplanationRequest) (*GenerateExplanationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateExplanation not implemented")
}
func (UnimplementedLogsExplainerInternalServiceServer) mustEmbedUnimplementedLogsExplainerInternalServiceServer() {
}

// UnsafeLogsExplainerInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsExplainerInternalServiceServer will
// result in compilation errors.
type UnsafeLogsExplainerInternalServiceServer interface {
	mustEmbedUnimplementedLogsExplainerInternalServiceServer()
}

func RegisterLogsExplainerInternalServiceServer(s grpc.ServiceRegistrar, srv LogsExplainerInternalServiceServer) {
	s.RegisterService(&LogsExplainerInternalService_ServiceDesc, srv)
}

func _LogsExplainerInternalService_GenerateExplanation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateExplanationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsExplainerInternalServiceServer).GenerateExplanation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogsExplainerInternalService_GenerateExplanation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsExplainerInternalServiceServer).GenerateExplanation(ctx, req.(*GenerateExplanationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogsExplainerInternalService_ServiceDesc is the grpc.ServiceDesc for LogsExplainerInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogsExplainerInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.schemastore.v1.LogsExplainerInternalService",
	HandlerType: (*LogsExplainerInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateExplanation",
			Handler:    _LogsExplainerInternalService_GenerateExplanation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/schemastore/v1/service.proto",
}
