// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: com/coralogix/schemastore/v1/feedback.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NegativeFeedback int32

const (
	NegativeFeedback_NEGATIVE_FEEDBACK_UNSPECIFIED                  NegativeFeedback = 0
	NegativeFeedback_NEGATIVE_FEEDBACK_WRONG_FIELD                  NegativeFeedback = 1
	NegativeFeedback_NEGATIVE_FEEDBACK_WRONG_VALUE                  NegativeFeedback = 2
	NegativeFeedback_NEGATIVE_FEEDBACK_WRONG_OPERATORS              NegativeFeedback = 3
	NegativeFeedback_NEGATIVE_FEEDBACK_WRONG_SYNTAX_USED            NegativeFeedback = 4
	NegativeFeedback_NEGATIVE_FEEDBACK_QUERY_RETURNED_NO_RESULTS    NegativeFeedback = 5
	NegativeFeedback_NEGATIVE_FEEDBACK_INCORRECT_REGEX              NegativeFeedback = 6
	NegativeFeedback_NEGATIVE_FEEDBACK_MY_INSTRUCTIONS_WERE_IGNORED NegativeFeedback = 7
	NegativeFeedback_NEGATIVE_FEEDBACK_GENERATION_FAILED            NegativeFeedback = 8
)

// Enum value maps for NegativeFeedback.
var (
	NegativeFeedback_name = map[int32]string{
		0: "NEGATIVE_FEEDBACK_UNSPECIFIED",
		1: "NEGATIVE_FEEDBACK_WRONG_FIELD",
		2: "NEGATIVE_FEEDBACK_WRONG_VALUE",
		3: "NEGATIVE_FEEDBACK_WRONG_OPERATORS",
		4: "NEGATIVE_FEEDBACK_WRONG_SYNTAX_USED",
		5: "NEGATIVE_FEEDBACK_QUERY_RETURNED_NO_RESULTS",
		6: "NEGATIVE_FEEDBACK_INCORRECT_REGEX",
		7: "NEGATIVE_FEEDBACK_MY_INSTRUCTIONS_WERE_IGNORED",
		8: "NEGATIVE_FEEDBACK_GENERATION_FAILED",
	}
	NegativeFeedback_value = map[string]int32{
		"NEGATIVE_FEEDBACK_UNSPECIFIED":                  0,
		"NEGATIVE_FEEDBACK_WRONG_FIELD":                  1,
		"NEGATIVE_FEEDBACK_WRONG_VALUE":                  2,
		"NEGATIVE_FEEDBACK_WRONG_OPERATORS":              3,
		"NEGATIVE_FEEDBACK_WRONG_SYNTAX_USED":            4,
		"NEGATIVE_FEEDBACK_QUERY_RETURNED_NO_RESULTS":    5,
		"NEGATIVE_FEEDBACK_INCORRECT_REGEX":              6,
		"NEGATIVE_FEEDBACK_MY_INSTRUCTIONS_WERE_IGNORED": 7,
		"NEGATIVE_FEEDBACK_GENERATION_FAILED":            8,
	}
)

func (x NegativeFeedback) Enum() *NegativeFeedback {
	p := new(NegativeFeedback)
	*p = x
	return p
}

func (x NegativeFeedback) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NegativeFeedback) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_feedback_proto_enumTypes[0].Descriptor()
}

func (NegativeFeedback) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_feedback_proto_enumTypes[0]
}

func (x NegativeFeedback) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NegativeFeedback.Descriptor instead.
func (NegativeFeedback) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{0}
}

type AutoFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Types that are assignable to Event:
	//
	//	*AutoFeedbackRequest_Presented
	//	*AutoFeedbackRequest_Opened
	//	*AutoFeedbackRequest_Typed
	//	*AutoFeedbackRequest_Submitted
	//	*AutoFeedbackRequest_Generated
	//	*AutoFeedbackRequest_Edited
	//	*AutoFeedbackRequest_Executed
	//	*AutoFeedbackRequest_Failure
	//	*AutoFeedbackRequest_GenerationFailure
	Event isAutoFeedbackRequest_Event `protobuf_oneof:"event"`
}

func (x *AutoFeedbackRequest) Reset() {
	*x = AutoFeedbackRequest{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoFeedbackRequest) ProtoMessage() {}

func (x *AutoFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoFeedbackRequest.ProtoReflect.Descriptor instead.
func (*AutoFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{0}
}

func (x *AutoFeedbackRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (m *AutoFeedbackRequest) GetEvent() isAutoFeedbackRequest_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *AutoFeedbackRequest) GetPresented() *Presented {
	if x, ok := x.GetEvent().(*AutoFeedbackRequest_Presented); ok {
		return x.Presented
	}
	return nil
}

func (x *AutoFeedbackRequest) GetOpened() *Opened {
	if x, ok := x.GetEvent().(*AutoFeedbackRequest_Opened); ok {
		return x.Opened
	}
	return nil
}

func (x *AutoFeedbackRequest) GetTyped() *Typed {
	if x, ok := x.GetEvent().(*AutoFeedbackRequest_Typed); ok {
		return x.Typed
	}
	return nil
}

func (x *AutoFeedbackRequest) GetSubmitted() *Submitted {
	if x, ok := x.GetEvent().(*AutoFeedbackRequest_Submitted); ok {
		return x.Submitted
	}
	return nil
}

func (x *AutoFeedbackRequest) GetGenerated() *Generated {
	if x, ok := x.GetEvent().(*AutoFeedbackRequest_Generated); ok {
		return x.Generated
	}
	return nil
}

func (x *AutoFeedbackRequest) GetEdited() *Edited {
	if x, ok := x.GetEvent().(*AutoFeedbackRequest_Edited); ok {
		return x.Edited
	}
	return nil
}

func (x *AutoFeedbackRequest) GetExecuted() *Executed {
	if x, ok := x.GetEvent().(*AutoFeedbackRequest_Executed); ok {
		return x.Executed
	}
	return nil
}

func (x *AutoFeedbackRequest) GetFailure() *Failure {
	if x, ok := x.GetEvent().(*AutoFeedbackRequest_Failure); ok {
		return x.Failure
	}
	return nil
}

func (x *AutoFeedbackRequest) GetGenerationFailure() *GenerationFailure {
	if x, ok := x.GetEvent().(*AutoFeedbackRequest_GenerationFailure); ok {
		return x.GenerationFailure
	}
	return nil
}

type isAutoFeedbackRequest_Event interface {
	isAutoFeedbackRequest_Event()
}

type AutoFeedbackRequest_Presented struct {
	// Total baseline of sessions that could possibly have used QA
	// i.e. have seen the QA button
	Presented *Presented `protobuf:"bytes,2,opt,name=presented,proto3,oneof"`
}

type AutoFeedbackRequest_Opened struct {
	// Pressed the button in order to reveal the prompt ui
	Opened *Opened `protobuf:"bytes,3,opt,name=opened,proto3,oneof"`
}

type AutoFeedbackRequest_Typed struct {
	// Typed something in the prompt ui
	Typed *Typed `protobuf:"bytes,4,opt,name=typed,proto3,oneof"`
}

type AutoFeedbackRequest_Submitted struct {
	// Submitted the query to be generated
	Submitted *Submitted `protobuf:"bytes,5,opt,name=submitted,proto3,oneof"`
}

type AutoFeedbackRequest_Generated struct {
	// Query was generated
	Generated *Generated `protobuf:"bytes,6,opt,name=generated,proto3,oneof"`
}

type AutoFeedbackRequest_Edited struct {
	// User edited the query in the DP editor
	Edited *Edited `protobuf:"bytes,7,opt,name=edited,proto3,oneof"`
}

type AutoFeedbackRequest_Executed struct {
	// User executed the query in the DP editor
	Executed *Executed `protobuf:"bytes,8,opt,name=executed,proto3,oneof"`
}

type AutoFeedbackRequest_Failure struct {
	// There was an error
	Failure *Failure `protobuf:"bytes,100,opt,name=failure,proto3,oneof"`
}

type AutoFeedbackRequest_GenerationFailure struct {
	// There was an error during query generation
	GenerationFailure *GenerationFailure `protobuf:"bytes,101,opt,name=generation_failure,json=generationFailure,proto3,oneof"`
}

func (*AutoFeedbackRequest_Presented) isAutoFeedbackRequest_Event() {}

func (*AutoFeedbackRequest_Opened) isAutoFeedbackRequest_Event() {}

func (*AutoFeedbackRequest_Typed) isAutoFeedbackRequest_Event() {}

func (*AutoFeedbackRequest_Submitted) isAutoFeedbackRequest_Event() {}

func (*AutoFeedbackRequest_Generated) isAutoFeedbackRequest_Event() {}

func (*AutoFeedbackRequest_Edited) isAutoFeedbackRequest_Event() {}

func (*AutoFeedbackRequest_Executed) isAutoFeedbackRequest_Event() {}

func (*AutoFeedbackRequest_Failure) isAutoFeedbackRequest_Event() {}

func (*AutoFeedbackRequest_GenerationFailure) isAutoFeedbackRequest_Event() {}

type Presented struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Presented) Reset() {
	*x = Presented{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Presented) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presented) ProtoMessage() {}

func (x *Presented) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presented.ProtoReflect.Descriptor instead.
func (*Presented) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{1}
}

type Opened struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Opened) Reset() {
	*x = Opened{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Opened) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Opened) ProtoMessage() {}

func (x *Opened) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Opened.ProtoReflect.Descriptor instead.
func (*Opened) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{2}
}

type Typed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Typed) Reset() {
	*x = Typed{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Typed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Typed) ProtoMessage() {}

func (x *Typed) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Typed.ProtoReflect.Descriptor instead.
func (*Typed) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{3}
}

type Submitted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prompt string `protobuf:"bytes,1,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (x *Submitted) Reset() {
	*x = Submitted{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Submitted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submitted) ProtoMessage() {}

func (x *Submitted) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submitted.ProtoReflect.Descriptor instead.
func (*Submitted) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{4}
}

func (x *Submitted) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

type Generated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneratedQueryId string `protobuf:"bytes,1,opt,name=generated_query_id,json=generatedQueryId,proto3" json:"generated_query_id,omitempty"`
	GeneratedQuery   string `protobuf:"bytes,2,opt,name=generated_query,json=generatedQuery,proto3" json:"generated_query,omitempty"`
}

func (x *Generated) Reset() {
	*x = Generated{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Generated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Generated) ProtoMessage() {}

func (x *Generated) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Generated.ProtoReflect.Descriptor instead.
func (*Generated) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{5}
}

func (x *Generated) GetGeneratedQueryId() string {
	if x != nil {
		return x.GeneratedQueryId
	}
	return ""
}

func (x *Generated) GetGeneratedQuery() string {
	if x != nil {
		return x.GeneratedQuery
	}
	return ""
}

type Edited struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditedQuery      string `protobuf:"bytes,1,opt,name=edited_query,json=editedQuery,proto3" json:"edited_query,omitempty"`
	GeneratedQueryId string `protobuf:"bytes,2,opt,name=generated_query_id,json=generatedQueryId,proto3" json:"generated_query_id,omitempty"`
}

func (x *Edited) Reset() {
	*x = Edited{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Edited) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edited) ProtoMessage() {}

func (x *Edited) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edited.ProtoReflect.Descriptor instead.
func (*Edited) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{6}
}

func (x *Edited) GetEditedQuery() string {
	if x != nil {
		return x.EditedQuery
	}
	return ""
}

func (x *Edited) GetGeneratedQueryId() string {
	if x != nil {
		return x.GeneratedQueryId
	}
	return ""
}

type Executed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutedQuery    string `protobuf:"bytes,1,opt,name=executed_query,json=executedQuery,proto3" json:"executed_query,omitempty"`
	GeneratedQueryId string `protobuf:"bytes,2,opt,name=generated_query_id,json=generatedQueryId,proto3" json:"generated_query_id,omitempty"`
}

func (x *Executed) Reset() {
	*x = Executed{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Executed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Executed) ProtoMessage() {}

func (x *Executed) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Executed.ProtoReflect.Descriptor instead.
func (*Executed) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{7}
}

func (x *Executed) GetExecutedQuery() string {
	if x != nil {
		return x.ExecutedQuery
	}
	return ""
}

func (x *Executed) GetGeneratedQueryId() string {
	if x != nil {
		return x.GeneratedQueryId
	}
	return ""
}

type Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Failure) Reset() {
	*x = Failure{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure) ProtoMessage() {}

func (x *Failure) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure.ProtoReflect.Descriptor instead.
func (*Failure) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{8}
}

func (x *Failure) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type GenerationFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *GenerationFailure) Reset() {
	*x = GenerationFailure{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationFailure) ProtoMessage() {}

func (x *GenerationFailure) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationFailure.ProtoReflect.Descriptor instead.
func (*GenerationFailure) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{9}
}

func (x *GenerationFailure) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type AutoFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AutoFeedbackResponse) Reset() {
	*x = AutoFeedbackResponse{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoFeedbackResponse) ProtoMessage() {}

func (x *AutoFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoFeedbackResponse.ProtoReflect.Descriptor instead.
func (*AutoFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{10}
}

// deprecated: Use UserFeedbackRequestV2
type UserFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	QueryId   string `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Types that are assignable to RatingType:
	//
	//	*UserFeedbackRequest_Positive
	//	*UserFeedbackRequest_Negative
	//	*UserFeedbackRequest_Untrue
	//	*UserFeedbackRequest_DidntAddressQuestion
	//	*UserFeedbackRequest_Harmful
	//	*UserFeedbackRequest_Other
	RatingType isUserFeedbackRequest_RatingType `protobuf_oneof:"rating_type"`
}

func (x *UserFeedbackRequest) Reset() {
	*x = UserFeedbackRequest{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFeedbackRequest) ProtoMessage() {}

func (x *UserFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFeedbackRequest.ProtoReflect.Descriptor instead.
func (*UserFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{11}
}

func (x *UserFeedbackRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UserFeedbackRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (m *UserFeedbackRequest) GetRatingType() isUserFeedbackRequest_RatingType {
	if m != nil {
		return m.RatingType
	}
	return nil
}

func (x *UserFeedbackRequest) GetPositive() *Positive {
	if x, ok := x.GetRatingType().(*UserFeedbackRequest_Positive); ok {
		return x.Positive
	}
	return nil
}

func (x *UserFeedbackRequest) GetNegative() *Negative {
	if x, ok := x.GetRatingType().(*UserFeedbackRequest_Negative); ok {
		return x.Negative
	}
	return nil
}

func (x *UserFeedbackRequest) GetUntrue() *Untrue {
	if x, ok := x.GetRatingType().(*UserFeedbackRequest_Untrue); ok {
		return x.Untrue
	}
	return nil
}

func (x *UserFeedbackRequest) GetDidntAddressQuestion() *DidntAddressQuestion {
	if x, ok := x.GetRatingType().(*UserFeedbackRequest_DidntAddressQuestion); ok {
		return x.DidntAddressQuestion
	}
	return nil
}

func (x *UserFeedbackRequest) GetHarmful() *Harmful {
	if x, ok := x.GetRatingType().(*UserFeedbackRequest_Harmful); ok {
		return x.Harmful
	}
	return nil
}

func (x *UserFeedbackRequest) GetOther() *Other {
	if x, ok := x.GetRatingType().(*UserFeedbackRequest_Other); ok {
		return x.Other
	}
	return nil
}

type isUserFeedbackRequest_RatingType interface {
	isUserFeedbackRequest_RatingType()
}

type UserFeedbackRequest_Positive struct {
	// Positive feedback (1)
	Positive *Positive `protobuf:"bytes,3,opt,name=positive,proto3,oneof"`
}

type UserFeedbackRequest_Negative struct {
	// Negative feedback (-1)
	Negative *Negative `protobuf:"bytes,4,opt,name=negative,proto3,oneof"`
}

type UserFeedbackRequest_Untrue struct {
	// Negative feedback, generated query was untrue or incorrect
	Untrue *Untrue `protobuf:"bytes,5,opt,name=untrue,proto3,oneof"`
}

type UserFeedbackRequest_DidntAddressQuestion struct {
	// Negative feedback, generated query didn't address the question asked
	DidntAddressQuestion *DidntAddressQuestion `protobuf:"bytes,6,opt,name=didnt_address_question,json=didntAddressQuestion,proto3,oneof"`
}

type UserFeedbackRequest_Harmful struct {
	// Negative feedback, generated query was harmful or unsafe
	Harmful *Harmful `protobuf:"bytes,7,opt,name=harmful,proto3,oneof"`
}

type UserFeedbackRequest_Other struct {
	// Negative feedback, generated query had another issue
	Other *Other `protobuf:"bytes,8,opt,name=other,proto3,oneof"`
}

func (*UserFeedbackRequest_Positive) isUserFeedbackRequest_RatingType() {}

func (*UserFeedbackRequest_Negative) isUserFeedbackRequest_RatingType() {}

func (*UserFeedbackRequest_Untrue) isUserFeedbackRequest_RatingType() {}

func (*UserFeedbackRequest_DidntAddressQuestion) isUserFeedbackRequest_RatingType() {}

func (*UserFeedbackRequest_Harmful) isUserFeedbackRequest_RatingType() {}

func (*UserFeedbackRequest_Other) isUserFeedbackRequest_RatingType() {}

type UserFeedbackV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	QueryId   string `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Types that are assignable to RatingType:
	//
	//	*UserFeedbackV2Request_Positive
	//	*UserFeedbackV2Request_Negative
	RatingType isUserFeedbackV2Request_RatingType `protobuf_oneof:"rating_type"`
}

func (x *UserFeedbackV2Request) Reset() {
	*x = UserFeedbackV2Request{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserFeedbackV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFeedbackV2Request) ProtoMessage() {}

func (x *UserFeedbackV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFeedbackV2Request.ProtoReflect.Descriptor instead.
func (*UserFeedbackV2Request) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{12}
}

func (x *UserFeedbackV2Request) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UserFeedbackV2Request) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (m *UserFeedbackV2Request) GetRatingType() isUserFeedbackV2Request_RatingType {
	if m != nil {
		return m.RatingType
	}
	return nil
}

func (x *UserFeedbackV2Request) GetPositive() *Positive {
	if x, ok := x.GetRatingType().(*UserFeedbackV2Request_Positive); ok {
		return x.Positive
	}
	return nil
}

func (x *UserFeedbackV2Request) GetNegative() *Negative {
	if x, ok := x.GetRatingType().(*UserFeedbackV2Request_Negative); ok {
		return x.Negative
	}
	return nil
}

type isUserFeedbackV2Request_RatingType interface {
	isUserFeedbackV2Request_RatingType()
}

type UserFeedbackV2Request_Positive struct {
	// Positive feedback (1)
	Positive *Positive `protobuf:"bytes,3,opt,name=positive,proto3,oneof"`
}

type UserFeedbackV2Request_Negative struct {
	// Negative feedback (-1)
	Negative *Negative `protobuf:"bytes,4,opt,name=negative,proto3,oneof"`
}

func (*UserFeedbackV2Request_Positive) isUserFeedbackV2Request_RatingType() {}

func (*UserFeedbackV2Request_Negative) isUserFeedbackV2Request_RatingType() {}

type Positive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Positive) Reset() {
	*x = Positive{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Positive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Positive) ProtoMessage() {}

func (x *Positive) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Positive.ProtoReflect.Descriptor instead.
func (*Positive) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{13}
}

type Negative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NegativeFeedback []NegativeFeedback `protobuf:"varint,1,rep,packed,name=negative_feedback,json=negativeFeedback,proto3,enum=com.coralogix.schemastore.v1.NegativeFeedback" json:"negative_feedback,omitempty"`
	Comment          string             `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Negative) Reset() {
	*x = Negative{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Negative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Negative) ProtoMessage() {}

func (x *Negative) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Negative.ProtoReflect.Descriptor instead.
func (*Negative) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{14}
}

func (x *Negative) GetNegativeFeedback() []NegativeFeedback {
	if x != nil {
		return x.NegativeFeedback
	}
	return nil
}

func (x *Negative) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// deprecated
type Untrue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Untrue) Reset() {
	*x = Untrue{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Untrue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Untrue) ProtoMessage() {}

func (x *Untrue) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Untrue.ProtoReflect.Descriptor instead.
func (*Untrue) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{15}
}

// deprecated
type DidntAddressQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DidntAddressQuestion) Reset() {
	*x = DidntAddressQuestion{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DidntAddressQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidntAddressQuestion) ProtoMessage() {}

func (x *DidntAddressQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidntAddressQuestion.ProtoReflect.Descriptor instead.
func (*DidntAddressQuestion) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{16}
}

// deprecated
type Harmful struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Harmful) Reset() {
	*x = Harmful{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Harmful) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Harmful) ProtoMessage() {}

func (x *Harmful) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Harmful.ProtoReflect.Descriptor instead.
func (*Harmful) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{17}
}

// deprecated
type Other struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment string `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Other) Reset() {
	*x = Other{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Other) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Other) ProtoMessage() {}

func (x *Other) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Other.ProtoReflect.Descriptor instead.
func (*Other) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{18}
}

func (x *Other) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type UserFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserFeedbackResponse) Reset() {
	*x = UserFeedbackResponse{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFeedbackResponse) ProtoMessage() {}

func (x *UserFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFeedbackResponse.ProtoReflect.Descriptor instead.
func (*UserFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{19}
}

type UserFeedbackV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserFeedbackV2Response) Reset() {
	*x = UserFeedbackV2Response{}
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserFeedbackV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFeedbackV2Response) ProtoMessage() {}

func (x *UserFeedbackV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFeedbackV2Response.ProtoReflect.Descriptor instead.
func (*UserFeedbackV2Response) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP(), []int{20}
}

var File_com_coralogix_schemastore_v1_feedback_proto protoreflect.FileDescriptor

var file_com_coralogix_schemastore_v1_feedback_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x22, 0xc0, 0x05, 0x0a, 0x13,
	0x41, 0x75, 0x74, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x12, 0x47, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x65, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x12, 0x41, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x60, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x0b,
	0x0a, 0x09, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x22, 0x08, 0x0a, 0x06, 0x4f,
	0x70, 0x65, 0x6e, 0x65, 0x64, 0x22, 0x07, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x64, 0x22, 0x23,
	0x0a, 0x09, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x22, 0x62, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x59, 0x0a, 0x06, 0x45, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x5f, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x41,
	0x75, 0x74, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x96, 0x04, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x3e, 0x0a, 0x06, 0x75, 0x6e, 0x74, 0x72, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x74, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x6e, 0x74, 0x72, 0x75,
	0x65, 0x12, 0x6a, 0x0a, 0x16, 0x64, 0x69, 0x64, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x64, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x64, 0x69, 0x64, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x07, 0x68, 0x61, 0x72, 0x6d, 0x66, 0x75, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61,
	0x72, 0x6d, 0x66, 0x75, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x68, 0x61, 0x72, 0x6d, 0x66, 0x75, 0x6c,
	0x12, 0x3b, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x0d, 0x0a,
	0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xec, 0x01, 0x0a,
	0x15, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x0a, 0x0a, 0x08, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x10, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x08, 0x0a, 0x06, 0x55,
	0x6e, 0x74, 0x72, 0x75, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x69, 0x64, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x09, 0x0a,
	0x07, 0x48, 0x61, 0x72, 0x6d, 0x66, 0x75, 0x6c, 0x22, 0x21, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x80, 0x03,
	0x0a, 0x10, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46,
	0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45, 0x47, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x57, 0x52,
	0x4f, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4e,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b,
	0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x53,
	0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46,
	0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x53, 0x59,
	0x4e, 0x54, 0x41, 0x58, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x4e,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x45, 0x44, 0x5f,
	0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21,
	0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x45,
	0x58, 0x10, 0x06, 0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x59, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x57, 0x45, 0x52, 0x45, 0x5f, 0x49, 0x47,
	0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x45, 0x47, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x08,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_schemastore_v1_feedback_proto_rawDescOnce sync.Once
	file_com_coralogix_schemastore_v1_feedback_proto_rawDescData = file_com_coralogix_schemastore_v1_feedback_proto_rawDesc
)

func file_com_coralogix_schemastore_v1_feedback_proto_rawDescGZIP() []byte {
	file_com_coralogix_schemastore_v1_feedback_proto_rawDescOnce.Do(func() {
		file_com_coralogix_schemastore_v1_feedback_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_schemastore_v1_feedback_proto_rawDescData)
	})
	return file_com_coralogix_schemastore_v1_feedback_proto_rawDescData
}

var file_com_coralogix_schemastore_v1_feedback_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_coralogix_schemastore_v1_feedback_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_com_coralogix_schemastore_v1_feedback_proto_goTypes = []any{
	(NegativeFeedback)(0),          // 0: com.coralogix.schemastore.v1.NegativeFeedback
	(*AutoFeedbackRequest)(nil),    // 1: com.coralogix.schemastore.v1.AutoFeedbackRequest
	(*Presented)(nil),              // 2: com.coralogix.schemastore.v1.Presented
	(*Opened)(nil),                 // 3: com.coralogix.schemastore.v1.Opened
	(*Typed)(nil),                  // 4: com.coralogix.schemastore.v1.Typed
	(*Submitted)(nil),              // 5: com.coralogix.schemastore.v1.Submitted
	(*Generated)(nil),              // 6: com.coralogix.schemastore.v1.Generated
	(*Edited)(nil),                 // 7: com.coralogix.schemastore.v1.Edited
	(*Executed)(nil),               // 8: com.coralogix.schemastore.v1.Executed
	(*Failure)(nil),                // 9: com.coralogix.schemastore.v1.Failure
	(*GenerationFailure)(nil),      // 10: com.coralogix.schemastore.v1.GenerationFailure
	(*AutoFeedbackResponse)(nil),   // 11: com.coralogix.schemastore.v1.AutoFeedbackResponse
	(*UserFeedbackRequest)(nil),    // 12: com.coralogix.schemastore.v1.UserFeedbackRequest
	(*UserFeedbackV2Request)(nil),  // 13: com.coralogix.schemastore.v1.UserFeedbackV2Request
	(*Positive)(nil),               // 14: com.coralogix.schemastore.v1.Positive
	(*Negative)(nil),               // 15: com.coralogix.schemastore.v1.Negative
	(*Untrue)(nil),                 // 16: com.coralogix.schemastore.v1.Untrue
	(*DidntAddressQuestion)(nil),   // 17: com.coralogix.schemastore.v1.DidntAddressQuestion
	(*Harmful)(nil),                // 18: com.coralogix.schemastore.v1.Harmful
	(*Other)(nil),                  // 19: com.coralogix.schemastore.v1.Other
	(*UserFeedbackResponse)(nil),   // 20: com.coralogix.schemastore.v1.UserFeedbackResponse
	(*UserFeedbackV2Response)(nil), // 21: com.coralogix.schemastore.v1.UserFeedbackV2Response
}
var file_com_coralogix_schemastore_v1_feedback_proto_depIdxs = []int32{
	2,  // 0: com.coralogix.schemastore.v1.AutoFeedbackRequest.presented:type_name -> com.coralogix.schemastore.v1.Presented
	3,  // 1: com.coralogix.schemastore.v1.AutoFeedbackRequest.opened:type_name -> com.coralogix.schemastore.v1.Opened
	4,  // 2: com.coralogix.schemastore.v1.AutoFeedbackRequest.typed:type_name -> com.coralogix.schemastore.v1.Typed
	5,  // 3: com.coralogix.schemastore.v1.AutoFeedbackRequest.submitted:type_name -> com.coralogix.schemastore.v1.Submitted
	6,  // 4: com.coralogix.schemastore.v1.AutoFeedbackRequest.generated:type_name -> com.coralogix.schemastore.v1.Generated
	7,  // 5: com.coralogix.schemastore.v1.AutoFeedbackRequest.edited:type_name -> com.coralogix.schemastore.v1.Edited
	8,  // 6: com.coralogix.schemastore.v1.AutoFeedbackRequest.executed:type_name -> com.coralogix.schemastore.v1.Executed
	9,  // 7: com.coralogix.schemastore.v1.AutoFeedbackRequest.failure:type_name -> com.coralogix.schemastore.v1.Failure
	10, // 8: com.coralogix.schemastore.v1.AutoFeedbackRequest.generation_failure:type_name -> com.coralogix.schemastore.v1.GenerationFailure
	14, // 9: com.coralogix.schemastore.v1.UserFeedbackRequest.positive:type_name -> com.coralogix.schemastore.v1.Positive
	15, // 10: com.coralogix.schemastore.v1.UserFeedbackRequest.negative:type_name -> com.coralogix.schemastore.v1.Negative
	16, // 11: com.coralogix.schemastore.v1.UserFeedbackRequest.untrue:type_name -> com.coralogix.schemastore.v1.Untrue
	17, // 12: com.coralogix.schemastore.v1.UserFeedbackRequest.didnt_address_question:type_name -> com.coralogix.schemastore.v1.DidntAddressQuestion
	18, // 13: com.coralogix.schemastore.v1.UserFeedbackRequest.harmful:type_name -> com.coralogix.schemastore.v1.Harmful
	19, // 14: com.coralogix.schemastore.v1.UserFeedbackRequest.other:type_name -> com.coralogix.schemastore.v1.Other
	14, // 15: com.coralogix.schemastore.v1.UserFeedbackV2Request.positive:type_name -> com.coralogix.schemastore.v1.Positive
	15, // 16: com.coralogix.schemastore.v1.UserFeedbackV2Request.negative:type_name -> com.coralogix.schemastore.v1.Negative
	0,  // 17: com.coralogix.schemastore.v1.Negative.negative_feedback:type_name -> com.coralogix.schemastore.v1.NegativeFeedback
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_com_coralogix_schemastore_v1_feedback_proto_init() }
func file_com_coralogix_schemastore_v1_feedback_proto_init() {
	if File_com_coralogix_schemastore_v1_feedback_proto != nil {
		return
	}
	file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[0].OneofWrappers = []any{
		(*AutoFeedbackRequest_Presented)(nil),
		(*AutoFeedbackRequest_Opened)(nil),
		(*AutoFeedbackRequest_Typed)(nil),
		(*AutoFeedbackRequest_Submitted)(nil),
		(*AutoFeedbackRequest_Generated)(nil),
		(*AutoFeedbackRequest_Edited)(nil),
		(*AutoFeedbackRequest_Executed)(nil),
		(*AutoFeedbackRequest_Failure)(nil),
		(*AutoFeedbackRequest_GenerationFailure)(nil),
	}
	file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[11].OneofWrappers = []any{
		(*UserFeedbackRequest_Positive)(nil),
		(*UserFeedbackRequest_Negative)(nil),
		(*UserFeedbackRequest_Untrue)(nil),
		(*UserFeedbackRequest_DidntAddressQuestion)(nil),
		(*UserFeedbackRequest_Harmful)(nil),
		(*UserFeedbackRequest_Other)(nil),
	}
	file_com_coralogix_schemastore_v1_feedback_proto_msgTypes[12].OneofWrappers = []any{
		(*UserFeedbackV2Request_Positive)(nil),
		(*UserFeedbackV2Request_Negative)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_schemastore_v1_feedback_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_schemastore_v1_feedback_proto_goTypes,
		DependencyIndexes: file_com_coralogix_schemastore_v1_feedback_proto_depIdxs,
		EnumInfos:         file_com_coralogix_schemastore_v1_feedback_proto_enumTypes,
		MessageInfos:      file_com_coralogix_schemastore_v1_feedback_proto_msgTypes,
	}.Build()
	File_com_coralogix_schemastore_v1_feedback_proto = out.File
	file_com_coralogix_schemastore_v1_feedback_proto_rawDesc = nil
	file_com_coralogix_schemastore_v1_feedback_proto_goTypes = nil
	file_com_coralogix_schemastore_v1_feedback_proto_depIdxs = nil
}
