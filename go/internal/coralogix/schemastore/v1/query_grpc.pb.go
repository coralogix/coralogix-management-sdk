// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: com/coralogix/schemastore/v1/query.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SchemaStoreQueryService_Query_FullMethodName = "/com.coralogix.schemastore.v1.SchemaStoreQueryService/Query"
)

// SchemaStoreQueryServiceClient is the client API for SchemaStoreQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaStoreQueryServiceClient interface {
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (SchemaStoreQueryService_QueryClient, error)
}

type schemaStoreQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaStoreQueryServiceClient(cc grpc.ClientConnInterface) SchemaStoreQueryServiceClient {
	return &schemaStoreQueryServiceClient{cc}
}

func (c *schemaStoreQueryServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (SchemaStoreQueryService_QueryClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SchemaStoreQueryService_ServiceDesc.Streams[0], SchemaStoreQueryService_Query_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &schemaStoreQueryServiceQueryClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SchemaStoreQueryService_QueryClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type schemaStoreQueryServiceQueryClient struct {
	grpc.ClientStream
}

func (x *schemaStoreQueryServiceQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SchemaStoreQueryServiceServer is the server API for SchemaStoreQueryService service.
// All implementations must embed UnimplementedSchemaStoreQueryServiceServer
// for forward compatibility
type SchemaStoreQueryServiceServer interface {
	Query(*QueryRequest, SchemaStoreQueryService_QueryServer) error
	mustEmbedUnimplementedSchemaStoreQueryServiceServer()
}

// UnimplementedSchemaStoreQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaStoreQueryServiceServer struct {
}

func (UnimplementedSchemaStoreQueryServiceServer) Query(*QueryRequest, SchemaStoreQueryService_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedSchemaStoreQueryServiceServer) mustEmbedUnimplementedSchemaStoreQueryServiceServer() {
}

// UnsafeSchemaStoreQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaStoreQueryServiceServer will
// result in compilation errors.
type UnsafeSchemaStoreQueryServiceServer interface {
	mustEmbedUnimplementedSchemaStoreQueryServiceServer()
}

func RegisterSchemaStoreQueryServiceServer(s grpc.ServiceRegistrar, srv SchemaStoreQueryServiceServer) {
	s.RegisterService(&SchemaStoreQueryService_ServiceDesc, srv)
}

func _SchemaStoreQueryService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchemaStoreQueryServiceServer).Query(m, &schemaStoreQueryServiceQueryServer{ServerStream: stream})
}

type SchemaStoreQueryService_QueryServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type schemaStoreQueryServiceQueryServer struct {
	grpc.ServerStream
}

func (x *schemaStoreQueryServiceQueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SchemaStoreQueryService_ServiceDesc is the grpc.ServiceDesc for SchemaStoreQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemaStoreQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.schemastore.v1.SchemaStoreQueryService",
	HandlerType: (*SchemaStoreQueryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _SchemaStoreQueryService_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/coralogix/schemastore/v1/query.proto",
}
