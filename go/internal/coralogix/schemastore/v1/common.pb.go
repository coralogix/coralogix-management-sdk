// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.1
// source: com/coralogix/schemastore/v1/common.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PriorityClass int32

const (
	PriorityClass_PRIORITY_CLASS_UNSPECIFIED PriorityClass = 0
	PriorityClass_PRIORITY_CLASS_LOW         PriorityClass = 1
	PriorityClass_PRIORITY_CLASS_MEDIUM      PriorityClass = 2
	PriorityClass_PRIORITY_CLASS_HIGH        PriorityClass = 3
)

// Enum value maps for PriorityClass.
var (
	PriorityClass_name = map[int32]string{
		0: "PRIORITY_CLASS_UNSPECIFIED",
		1: "PRIORITY_CLASS_LOW",
		2: "PRIORITY_CLASS_MEDIUM",
		3: "PRIORITY_CLASS_HIGH",
	}
	PriorityClass_value = map[string]int32{
		"PRIORITY_CLASS_UNSPECIFIED": 0,
		"PRIORITY_CLASS_LOW":         1,
		"PRIORITY_CLASS_MEDIUM":      2,
		"PRIORITY_CLASS_HIGH":        3,
	}
)

func (x PriorityClass) Enum() *PriorityClass {
	p := new(PriorityClass)
	*p = x
	return p
}

func (x PriorityClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriorityClass) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_common_proto_enumTypes[0].Descriptor()
}

func (PriorityClass) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_common_proto_enumTypes[0]
}

func (x PriorityClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriorityClass.Descriptor instead.
func (PriorityClass) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{0}
}

type DataType int32

const (
	DataType_DATA_TYPE_UNSPECIFIED DataType = 0
	DataType_DATA_TYPE_NUM         DataType = 1
	DataType_DATA_TYPE_STRING      DataType = 2
	DataType_DATA_TYPE_BOOL        DataType = 3
	// Will be returned for all arrays unless `OBSERVATIONS_FEATURE_ADVANCED_ARRAY_TYPES` is specified in the request
	// When `OBSERVATIONS_FEATURE_ADVANCED_ARRAY_TYPES` is specified, DATA_TYPE_UNTRACKED_ARRAY refers to historical data where
	// no type information on the array contents is available
	DataType_DATA_TYPE_UNTRACKED_ARRAY DataType = 4
	DataType_DATA_TYPE_OBJECT          DataType = 5
	DataType_DATA_TYPE_NUM_ARRAY       DataType = 6
	DataType_DATA_TYPE_STRING_ARRAY    DataType = 7
	DataType_DATA_TYPE_BOOL_ARRAY      DataType = 8
	DataType_DATA_TYPE_ARRAY_ARRAY     DataType = 9
	DataType_DATA_TYPE_OBJECT_ARRAY    DataType = 10
	DataType_DATA_TYPE_NULL            DataType = 11
	DataType_DATA_TYPE_NULL_ARRAY      DataType = 12
	DataType_DATA_TYPE_EMPTY_ARRAY     DataType = 13
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:  "DATA_TYPE_UNSPECIFIED",
		1:  "DATA_TYPE_NUM",
		2:  "DATA_TYPE_STRING",
		3:  "DATA_TYPE_BOOL",
		4:  "DATA_TYPE_UNTRACKED_ARRAY",
		5:  "DATA_TYPE_OBJECT",
		6:  "DATA_TYPE_NUM_ARRAY",
		7:  "DATA_TYPE_STRING_ARRAY",
		8:  "DATA_TYPE_BOOL_ARRAY",
		9:  "DATA_TYPE_ARRAY_ARRAY",
		10: "DATA_TYPE_OBJECT_ARRAY",
		11: "DATA_TYPE_NULL",
		12: "DATA_TYPE_NULL_ARRAY",
		13: "DATA_TYPE_EMPTY_ARRAY",
	}
	DataType_value = map[string]int32{
		"DATA_TYPE_UNSPECIFIED":     0,
		"DATA_TYPE_NUM":             1,
		"DATA_TYPE_STRING":          2,
		"DATA_TYPE_BOOL":            3,
		"DATA_TYPE_UNTRACKED_ARRAY": 4,
		"DATA_TYPE_OBJECT":          5,
		"DATA_TYPE_NUM_ARRAY":       6,
		"DATA_TYPE_STRING_ARRAY":    7,
		"DATA_TYPE_BOOL_ARRAY":      8,
		"DATA_TYPE_ARRAY_ARRAY":     9,
		"DATA_TYPE_OBJECT_ARRAY":    10,
		"DATA_TYPE_NULL":            11,
		"DATA_TYPE_NULL_ARRAY":      12,
		"DATA_TYPE_EMPTY_ARRAY":     13,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_common_proto_enumTypes[1].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_common_proto_enumTypes[1]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{1}
}

type TimeResolution int32

const (
	TimeResolution_TIME_RESOLUTION_UNSPECIFIED TimeResolution = 0
	TimeResolution_TIME_RESOLUTION_HOURLY      TimeResolution = 1
	TimeResolution_TIME_RESOLUTION_MONTHLY     TimeResolution = 2
)

// Enum value maps for TimeResolution.
var (
	TimeResolution_name = map[int32]string{
		0: "TIME_RESOLUTION_UNSPECIFIED",
		1: "TIME_RESOLUTION_HOURLY",
		2: "TIME_RESOLUTION_MONTHLY",
	}
	TimeResolution_value = map[string]int32{
		"TIME_RESOLUTION_UNSPECIFIED": 0,
		"TIME_RESOLUTION_HOURLY":      1,
		"TIME_RESOLUTION_MONTHLY":     2,
	}
)

func (x TimeResolution) Enum() *TimeResolution {
	p := new(TimeResolution)
	*p = x
	return p
}

func (x TimeResolution) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeResolution) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_common_proto_enumTypes[2].Descriptor()
}

func (TimeResolution) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_common_proto_enumTypes[2]
}

func (x TimeResolution) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeResolution.Descriptor instead.
func (TimeResolution) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{2}
}

type LabelResultType int32

const (
	LabelResultType_LABEL_RESULT_TYPE_UNSPECIFIED LabelResultType = 0
	LabelResultType_LABEL_RESULT_TYPE_LABEL_KEYS  LabelResultType = 1
	LabelResultType_LABEL_RESULT_TYPE_FULL        LabelResultType = 2
)

// Enum value maps for LabelResultType.
var (
	LabelResultType_name = map[int32]string{
		0: "LABEL_RESULT_TYPE_UNSPECIFIED",
		1: "LABEL_RESULT_TYPE_LABEL_KEYS",
		2: "LABEL_RESULT_TYPE_FULL",
	}
	LabelResultType_value = map[string]int32{
		"LABEL_RESULT_TYPE_UNSPECIFIED": 0,
		"LABEL_RESULT_TYPE_LABEL_KEYS":  1,
		"LABEL_RESULT_TYPE_FULL":        2,
	}
)

func (x LabelResultType) Enum() *LabelResultType {
	p := new(LabelResultType)
	*p = x
	return p
}

func (x LabelResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_common_proto_enumTypes[3].Descriptor()
}

func (LabelResultType) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_common_proto_enumTypes[3]
}

func (x LabelResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelResultType.Descriptor instead.
func (LabelResultType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{3}
}

type DataSourceType int32

const (
	DataSourceType_DATA_SOURCE_TYPE_UNSPECIFIED DataSourceType = 0
	DataSourceType_DATA_SOURCE_TYPE_LOGS        DataSourceType = 1
	DataSourceType_DATA_SOURCE_TYPE_TRACES      DataSourceType = 2
	DataSourceType_DATA_SOURCE_TYPE_METRICS     DataSourceType = 3
)

// Enum value maps for DataSourceType.
var (
	DataSourceType_name = map[int32]string{
		0: "DATA_SOURCE_TYPE_UNSPECIFIED",
		1: "DATA_SOURCE_TYPE_LOGS",
		2: "DATA_SOURCE_TYPE_TRACES",
		3: "DATA_SOURCE_TYPE_METRICS",
	}
	DataSourceType_value = map[string]int32{
		"DATA_SOURCE_TYPE_UNSPECIFIED": 0,
		"DATA_SOURCE_TYPE_LOGS":        1,
		"DATA_SOURCE_TYPE_TRACES":      2,
		"DATA_SOURCE_TYPE_METRICS":     3,
	}
)

func (x DataSourceType) Enum() *DataSourceType {
	p := new(DataSourceType)
	*p = x
	return p
}

func (x DataSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_common_proto_enumTypes[4].Descriptor()
}

func (DataSourceType) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_common_proto_enumTypes[4]
}

func (x DataSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSourceType.Descriptor instead.
func (DataSourceType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{4}
}

type MatchMode int32

const (
	MatchMode_MATCH_MODE_UNSPECIFIED MatchMode = 0
	MatchMode_MATCH_MODE_STRICT      MatchMode = 1
	MatchMode_MATCH_MODE_FUZZY       MatchMode = 2
	MatchMode_MATCH_MODE_STARTS_WITH MatchMode = 3
	MatchMode_MATCH_MODE_ENDS_WITH   MatchMode = 4
	MatchMode_MATCH_MODE_REGEX       MatchMode = 5
)

// Enum value maps for MatchMode.
var (
	MatchMode_name = map[int32]string{
		0: "MATCH_MODE_UNSPECIFIED",
		1: "MATCH_MODE_STRICT",
		2: "MATCH_MODE_FUZZY",
		3: "MATCH_MODE_STARTS_WITH",
		4: "MATCH_MODE_ENDS_WITH",
		5: "MATCH_MODE_REGEX",
	}
	MatchMode_value = map[string]int32{
		"MATCH_MODE_UNSPECIFIED": 0,
		"MATCH_MODE_STRICT":      1,
		"MATCH_MODE_FUZZY":       2,
		"MATCH_MODE_STARTS_WITH": 3,
		"MATCH_MODE_ENDS_WITH":   4,
		"MATCH_MODE_REGEX":       5,
	}
)

func (x MatchMode) Enum() *MatchMode {
	p := new(MatchMode)
	*p = x
	return p
}

func (x MatchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_common_proto_enumTypes[5].Descriptor()
}

func (MatchMode) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_common_proto_enumTypes[5]
}

func (x MatchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchMode.Descriptor instead.
func (MatchMode) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{5}
}

type CustomDatasetTargetFormat int32

const (
	CustomDatasetTargetFormat_CUSTOM_DATASET_TARGET_FORMAT_UNSPECIFIED    CustomDatasetTargetFormat = 0
	CustomDatasetTargetFormat_CUSTOM_DATASET_TARGET_FORMAT_WIDEPARQUET_V1 CustomDatasetTargetFormat = 1
)

// Enum value maps for CustomDatasetTargetFormat.
var (
	CustomDatasetTargetFormat_name = map[int32]string{
		0: "CUSTOM_DATASET_TARGET_FORMAT_UNSPECIFIED",
		1: "CUSTOM_DATASET_TARGET_FORMAT_WIDEPARQUET_V1",
	}
	CustomDatasetTargetFormat_value = map[string]int32{
		"CUSTOM_DATASET_TARGET_FORMAT_UNSPECIFIED":    0,
		"CUSTOM_DATASET_TARGET_FORMAT_WIDEPARQUET_V1": 1,
	}
)

func (x CustomDatasetTargetFormat) Enum() *CustomDatasetTargetFormat {
	p := new(CustomDatasetTargetFormat)
	*p = x
	return p
}

func (x CustomDatasetTargetFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomDatasetTargetFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_common_proto_enumTypes[6].Descriptor()
}

func (CustomDatasetTargetFormat) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_common_proto_enumTypes[6]
}

func (x CustomDatasetTargetFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomDatasetTargetFormat.Descriptor instead.
func (CustomDatasetTargetFormat) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{6}
}

type CustomDatasetTargetType int32

const (
	CustomDatasetTargetType_CUSTOM_DATASET_TARGET_TYPE_UNSPECIFIED CustomDatasetTargetType = 0
	CustomDatasetTargetType_CUSTOM_DATASET_TARGET_TYPE_S3          CustomDatasetTargetType = 1
	CustomDatasetTargetType_CUSTOM_DATASET_TARGET_TYPE_IBMCOS      CustomDatasetTargetType = 2
)

// Enum value maps for CustomDatasetTargetType.
var (
	CustomDatasetTargetType_name = map[int32]string{
		0: "CUSTOM_DATASET_TARGET_TYPE_UNSPECIFIED",
		1: "CUSTOM_DATASET_TARGET_TYPE_S3",
		2: "CUSTOM_DATASET_TARGET_TYPE_IBMCOS",
	}
	CustomDatasetTargetType_value = map[string]int32{
		"CUSTOM_DATASET_TARGET_TYPE_UNSPECIFIED": 0,
		"CUSTOM_DATASET_TARGET_TYPE_S3":          1,
		"CUSTOM_DATASET_TARGET_TYPE_IBMCOS":      2,
	}
)

func (x CustomDatasetTargetType) Enum() *CustomDatasetTargetType {
	p := new(CustomDatasetTargetType)
	*p = x
	return p
}

func (x CustomDatasetTargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomDatasetTargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_common_proto_enumTypes[7].Descriptor()
}

func (CustomDatasetTargetType) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_common_proto_enumTypes[7]
}

func (x CustomDatasetTargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomDatasetTargetType.Descriptor instead.
func (CustomDatasetTargetType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{7}
}

type EnrichmentType int32

const (
	EnrichmentType_ENRICHMENT_TYPE_UNSPECIFIED  EnrichmentType = 0
	EnrichmentType_ENRICHMENT_TYPE_CUSTOM       EnrichmentType = 1 // CSV
	EnrichmentType_ENRICHMENT_TYPE_LOOKUP       EnrichmentType = 2 // External lookups
	EnrichmentType_ENRICHMENT_TYPE_MATERIALIZED EnrichmentType = 3 // Materialized stream of events
)

// Enum value maps for EnrichmentType.
var (
	EnrichmentType_name = map[int32]string{
		0: "ENRICHMENT_TYPE_UNSPECIFIED",
		1: "ENRICHMENT_TYPE_CUSTOM",
		2: "ENRICHMENT_TYPE_LOOKUP",
		3: "ENRICHMENT_TYPE_MATERIALIZED",
	}
	EnrichmentType_value = map[string]int32{
		"ENRICHMENT_TYPE_UNSPECIFIED":  0,
		"ENRICHMENT_TYPE_CUSTOM":       1,
		"ENRICHMENT_TYPE_LOOKUP":       2,
		"ENRICHMENT_TYPE_MATERIALIZED": 3,
	}
)

func (x EnrichmentType) Enum() *EnrichmentType {
	p := new(EnrichmentType)
	*p = x
	return p
}

func (x EnrichmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnrichmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_common_proto_enumTypes[8].Descriptor()
}

func (EnrichmentType) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_common_proto_enumTypes[8]
}

func (x EnrichmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnrichmentType.Descriptor instead.
func (EnrichmentType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{8}
}

type DatasetType int32

const (
	DatasetType_DATASET_TYPE_UNSPECIFIED DatasetType = 0
	DatasetType_DATASET_TYPE_LOGS        DatasetType = 1
	DatasetType_DATASET_TYPE_SPANS       DatasetType = 2
	DatasetType_DATASET_TYPE_METRICS     DatasetType = 3
	DatasetType_DATASET_TYPE_ENRICHMENT  DatasetType = 4
	// Deprecated, please use DATASET_TYPE_DATASPACE_DATASET
	//
	// Deprecated: Marked as deprecated in com/coralogix/schemastore/v1/common.proto.
	DatasetType_DATASET_TYPE_CUSTOM DatasetType = 5
	// New dataspaces/datasets
	DatasetType_DATASET_TYPE_DATASPACE_DATASET DatasetType = 6
)

// Enum value maps for DatasetType.
var (
	DatasetType_name = map[int32]string{
		0: "DATASET_TYPE_UNSPECIFIED",
		1: "DATASET_TYPE_LOGS",
		2: "DATASET_TYPE_SPANS",
		3: "DATASET_TYPE_METRICS",
		4: "DATASET_TYPE_ENRICHMENT",
		5: "DATASET_TYPE_CUSTOM",
		6: "DATASET_TYPE_DATASPACE_DATASET",
	}
	DatasetType_value = map[string]int32{
		"DATASET_TYPE_UNSPECIFIED":       0,
		"DATASET_TYPE_LOGS":              1,
		"DATASET_TYPE_SPANS":             2,
		"DATASET_TYPE_METRICS":           3,
		"DATASET_TYPE_ENRICHMENT":        4,
		"DATASET_TYPE_CUSTOM":            5,
		"DATASET_TYPE_DATASPACE_DATASET": 6,
	}
)

func (x DatasetType) Enum() *DatasetType {
	p := new(DatasetType)
	*p = x
	return p
}

func (x DatasetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_common_proto_enumTypes[9].Descriptor()
}

func (DatasetType) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_common_proto_enumTypes[9]
}

func (x DatasetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetType.Descriptor instead.
func (DatasetType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{9}
}

type DatasetScope int32

const (
	DatasetScope_DATASET_SCOPE_UNSPECIFIED DatasetScope = 0
	DatasetScope_DATASET_SCOPE_USER_DATA   DatasetScope = 1
	DatasetScope_DATASET_SCOPE_LABEL       DatasetScope = 2
	DatasetScope_DATASET_SCOPE_METADATA    DatasetScope = 3
)

// Enum value maps for DatasetScope.
var (
	DatasetScope_name = map[int32]string{
		0: "DATASET_SCOPE_UNSPECIFIED",
		1: "DATASET_SCOPE_USER_DATA",
		2: "DATASET_SCOPE_LABEL",
		3: "DATASET_SCOPE_METADATA",
	}
	DatasetScope_value = map[string]int32{
		"DATASET_SCOPE_UNSPECIFIED": 0,
		"DATASET_SCOPE_USER_DATA":   1,
		"DATASET_SCOPE_LABEL":       2,
		"DATASET_SCOPE_METADATA":    3,
	}
)

func (x DatasetScope) Enum() *DatasetScope {
	p := new(DatasetScope)
	*p = x
	return p
}

func (x DatasetScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetScope) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_common_proto_enumTypes[10].Descriptor()
}

func (DatasetScope) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_common_proto_enumTypes[10]
}

func (x DatasetScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetScope.Descriptor instead.
func (DatasetScope) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{10}
}

type LabelFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []string               `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelFilter) Reset() {
	*x = LabelFilter{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelFilter) ProtoMessage() {}

func (x *LabelFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelFilter.ProtoReflect.Descriptor instead.
func (*LabelFilter) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *LabelFilter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LabelFilter) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type SchemaFilter struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Path              string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ExpectedTypes     []DataType             `protobuf:"varint,2,rep,packed,name=expected_types,json=expectedTypes,proto3,enum=com.coralogix.schemastore.v1.DataType" json:"expected_types,omitempty"`
	ExpectedFullTypes []*FullDataType        `protobuf:"bytes,3,rep,name=expected_full_types,json=expectedFullTypes,proto3" json:"expected_full_types,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SchemaFilter) Reset() {
	*x = SchemaFilter{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaFilter) ProtoMessage() {}

func (x *SchemaFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaFilter.ProtoReflect.Descriptor instead.
func (*SchemaFilter) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *SchemaFilter) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SchemaFilter) GetExpectedTypes() []DataType {
	if x != nil {
		return x.ExpectedTypes
	}
	return nil
}

func (x *SchemaFilter) GetExpectedFullTypes() []*FullDataType {
	if x != nil {
		return x.ExpectedFullTypes
	}
	return nil
}

type SchemaIdFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaIdFilter) Reset() {
	*x = SchemaIdFilter{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaIdFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaIdFilter) ProtoMessage() {}

func (x *SchemaIdFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaIdFilter.ProtoReflect.Descriptor instead.
func (*SchemaIdFilter) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *SchemaIdFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PriorityClassFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PriorityClass PriorityClass          `protobuf:"varint,1,opt,name=priority_class,json=priorityClass,proto3,enum=com.coralogix.schemastore.v1.PriorityClass" json:"priority_class,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriorityClassFilter) Reset() {
	*x = PriorityClassFilter{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriorityClassFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityClassFilter) ProtoMessage() {}

func (x *PriorityClassFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityClassFilter.ProtoReflect.Descriptor instead.
func (*PriorityClassFilter) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *PriorityClassFilter) GetPriorityClass() PriorityClass {
	if x != nil {
		return x.PriorityClass
	}
	return PriorityClass_PRIORITY_CLASS_UNSPECIFIED
}

type MetadataFilter struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DataTypes        []DataType             `protobuf:"varint,1,rep,packed,name=data_types,json=dataTypes,proto3,enum=com.coralogix.schemastore.v1.DataType" json:"data_types,omitempty"`
	LogicalDataTypes []string               `protobuf:"bytes,2,rep,name=logical_data_types,json=logicalDataTypes,proto3" json:"logical_data_types,omitempty"`
	PriorityClasses  []PriorityClass        `protobuf:"varint,3,rep,packed,name=priority_classes,json=priorityClasses,proto3,enum=com.coralogix.schemastore.v1.PriorityClass" json:"priority_classes,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MetadataFilter) Reset() {
	*x = MetadataFilter{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataFilter) ProtoMessage() {}

func (x *MetadataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataFilter.ProtoReflect.Descriptor instead.
func (*MetadataFilter) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *MetadataFilter) GetDataTypes() []DataType {
	if x != nil {
		return x.DataTypes
	}
	return nil
}

func (x *MetadataFilter) GetLogicalDataTypes() []string {
	if x != nil {
		return x.LogicalDataTypes
	}
	return nil
}

func (x *MetadataFilter) GetPriorityClasses() []PriorityClass {
	if x != nil {
		return x.PriorityClasses
	}
	return nil
}

type TimeRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *TimeRange) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *TimeRange) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type FullDataType struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DataType        DataType               `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=com.coralogix.schemastore.v1.DataType" json:"data_type,omitempty"`
	LogicalDataType string                 `protobuf:"bytes,2,opt,name=logical_data_type,json=logicalDataType,proto3" json:"logical_data_type,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FullDataType) Reset() {
	*x = FullDataType{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullDataType) ProtoMessage() {}

func (x *FullDataType) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullDataType.ProtoReflect.Descriptor instead.
func (*FullDataType) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{6}
}

func (x *FullDataType) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DATA_TYPE_UNSPECIFIED
}

func (x *FullDataType) GetLogicalDataType() string {
	if x != nil {
		return x.LogicalDataType
	}
	return ""
}

type Label struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values        []string               `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Label) Reset() {
	*x = Label{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{7}
}

func (x *Label) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Label) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type MatchExpression struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	MatchMode     MatchMode              `protobuf:"varint,2,opt,name=match_mode,json=matchMode,proto3,enum=com.coralogix.schemastore.v1.MatchMode" json:"match_mode,omitempty"`
	CaseSensitive bool                   `protobuf:"varint,3,opt,name=case_sensitive,json=caseSensitive,proto3" json:"case_sensitive,omitempty"`
	Invert        bool                   `protobuf:"varint,4,opt,name=invert,proto3" json:"invert,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchExpression) Reset() {
	*x = MatchExpression{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchExpression) ProtoMessage() {}

func (x *MatchExpression) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchExpression.ProtoReflect.Descriptor instead.
func (*MatchExpression) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{8}
}

func (x *MatchExpression) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MatchExpression) GetMatchMode() MatchMode {
	if x != nil {
		return x.MatchMode
	}
	return MatchMode_MATCH_MODE_UNSPECIFIED
}

func (x *MatchExpression) GetCaseSensitive() bool {
	if x != nil {
		return x.CaseSensitive
	}
	return false
}

func (x *MatchExpression) GetInvert() bool {
	if x != nil {
		return x.Invert
	}
	return false
}

type VirtualFieldFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsVirtual     bool                   `protobuf:"varint,1,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VirtualFieldFilter) Reset() {
	*x = VirtualFieldFilter{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualFieldFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualFieldFilter) ProtoMessage() {}

func (x *VirtualFieldFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualFieldFilter.ProtoReflect.Descriptor instead.
func (*VirtualFieldFilter) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{9}
}

func (x *VirtualFieldFilter) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

type CustomDatasetTarget struct {
	state              protoimpl.MessageState    `protogen:"open.v1"`
	Format             CustomDatasetTargetFormat `protobuf:"varint,1,opt,name=format,proto3,enum=com.coralogix.schemastore.v1.CustomDatasetTargetFormat" json:"format,omitempty"`
	Type               CustomDatasetTargetType   `protobuf:"varint,2,opt,name=type,proto3,enum=com.coralogix.schemastore.v1.CustomDatasetTargetType" json:"type,omitempty"`
	Prefix             string                    `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PartitioningScheme string                    `protobuf:"bytes,4,opt,name=partitioning_scheme,json=partitioningScheme,proto3" json:"partitioning_scheme,omitempty"`
	// Types that are valid to be assigned to TargetProperties:
	//
	//	*CustomDatasetTarget_S3TargetProperties
	//	*CustomDatasetTarget_IbmCosTargetProperties
	TargetProperties isCustomDatasetTarget_TargetProperties `protobuf_oneof:"target_properties"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CustomDatasetTarget) Reset() {
	*x = CustomDatasetTarget{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomDatasetTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDatasetTarget) ProtoMessage() {}

func (x *CustomDatasetTarget) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDatasetTarget.ProtoReflect.Descriptor instead.
func (*CustomDatasetTarget) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{10}
}

func (x *CustomDatasetTarget) GetFormat() CustomDatasetTargetFormat {
	if x != nil {
		return x.Format
	}
	return CustomDatasetTargetFormat_CUSTOM_DATASET_TARGET_FORMAT_UNSPECIFIED
}

func (x *CustomDatasetTarget) GetType() CustomDatasetTargetType {
	if x != nil {
		return x.Type
	}
	return CustomDatasetTargetType_CUSTOM_DATASET_TARGET_TYPE_UNSPECIFIED
}

func (x *CustomDatasetTarget) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *CustomDatasetTarget) GetPartitioningScheme() string {
	if x != nil {
		return x.PartitioningScheme
	}
	return ""
}

func (x *CustomDatasetTarget) GetTargetProperties() isCustomDatasetTarget_TargetProperties {
	if x != nil {
		return x.TargetProperties
	}
	return nil
}

func (x *CustomDatasetTarget) GetS3TargetProperties() *CustomDatasetS3TargetProperties {
	if x != nil {
		if x, ok := x.TargetProperties.(*CustomDatasetTarget_S3TargetProperties); ok {
			return x.S3TargetProperties
		}
	}
	return nil
}

func (x *CustomDatasetTarget) GetIbmCosTargetProperties() *CustomDatasetIbmCosTargetProperties {
	if x != nil {
		if x, ok := x.TargetProperties.(*CustomDatasetTarget_IbmCosTargetProperties); ok {
			return x.IbmCosTargetProperties
		}
	}
	return nil
}

type isCustomDatasetTarget_TargetProperties interface {
	isCustomDatasetTarget_TargetProperties()
}

type CustomDatasetTarget_S3TargetProperties struct {
	S3TargetProperties *CustomDatasetS3TargetProperties `protobuf:"bytes,5,opt,name=s3_target_properties,json=s3TargetProperties,proto3,oneof"`
}

type CustomDatasetTarget_IbmCosTargetProperties struct {
	IbmCosTargetProperties *CustomDatasetIbmCosTargetProperties `protobuf:"bytes,6,opt,name=ibm_cos_target_properties,json=ibmCosTargetProperties,proto3,oneof"`
}

func (*CustomDatasetTarget_S3TargetProperties) isCustomDatasetTarget_TargetProperties() {}

func (*CustomDatasetTarget_IbmCosTargetProperties) isCustomDatasetTarget_TargetProperties() {}

type CustomDatasetS3TargetProperties struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Region        string                 `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Bucket        string                 `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomDatasetS3TargetProperties) Reset() {
	*x = CustomDatasetS3TargetProperties{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomDatasetS3TargetProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDatasetS3TargetProperties) ProtoMessage() {}

func (x *CustomDatasetS3TargetProperties) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDatasetS3TargetProperties.ProtoReflect.Descriptor instead.
func (*CustomDatasetS3TargetProperties) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{11}
}

func (x *CustomDatasetS3TargetProperties) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CustomDatasetS3TargetProperties) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

type CustomDatasetIbmCosTargetProperties struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Crn           string                 `protobuf:"bytes,1,opt,name=crn,proto3" json:"crn,omitempty"`
	Endpoint      string                 `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	BucketType    string                 `protobuf:"bytes,3,opt,name=bucket_type,json=bucketType,proto3" json:"bucket_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomDatasetIbmCosTargetProperties) Reset() {
	*x = CustomDatasetIbmCosTargetProperties{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomDatasetIbmCosTargetProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDatasetIbmCosTargetProperties) ProtoMessage() {}

func (x *CustomDatasetIbmCosTargetProperties) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDatasetIbmCosTargetProperties.ProtoReflect.Descriptor instead.
func (*CustomDatasetIbmCosTargetProperties) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{12}
}

func (x *CustomDatasetIbmCosTargetProperties) GetCrn() string {
	if x != nil {
		return x.Crn
	}
	return ""
}

func (x *CustomDatasetIbmCosTargetProperties) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *CustomDatasetIbmCosTargetProperties) GetBucketType() string {
	if x != nil {
		return x.BucketType
	}
	return ""
}

type Enrichment struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName    string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	EnrichmentType EnrichmentType         `protobuf:"varint,4,opt,name=enrichment_type,json=enrichmentType,proto3,enum=com.coralogix.schemastore.v1.EnrichmentType" json:"enrichment_type,omitempty"`
	Description    string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Version        uint32                 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	MatchingKey    string                 `protobuf:"bytes,7,opt,name=matching_key,json=matchingKey,proto3" json:"matching_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Enrichment) Reset() {
	*x = Enrichment{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Enrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enrichment) ProtoMessage() {}

func (x *Enrichment) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enrichment.ProtoReflect.Descriptor instead.
func (*Enrichment) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{13}
}

func (x *Enrichment) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Enrichment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Enrichment) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Enrichment) GetEnrichmentType() EnrichmentType {
	if x != nil {
		return x.EnrichmentType
	}
	return EnrichmentType_ENRICHMENT_TYPE_UNSPECIFIED
}

func (x *Enrichment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Enrichment) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Enrichment) GetMatchingKey() string {
	if x != nil {
		return x.MatchingKey
	}
	return ""
}

type DatasetFilter struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DatasetType    DatasetType            `protobuf:"varint,1,opt,name=dataset_type,json=datasetType,proto3,enum=com.coralogix.schemastore.v1.DatasetType" json:"dataset_type,omitempty"`
	DatasetId      *string                `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3,oneof" json:"dataset_id,omitempty"`
	NamespaceId    *string                `protobuf:"bytes,3,opt,name=namespace_id,json=namespaceId,proto3,oneof" json:"namespace_id,omitempty"`
	EnrichmentType *EnrichmentType        `protobuf:"varint,4,opt,name=enrichment_type,json=enrichmentType,proto3,enum=com.coralogix.schemastore.v1.EnrichmentType,oneof" json:"enrichment_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DatasetFilter) Reset() {
	*x = DatasetFilter{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetFilter) ProtoMessage() {}

func (x *DatasetFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetFilter.ProtoReflect.Descriptor instead.
func (*DatasetFilter) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{14}
}

func (x *DatasetFilter) GetDatasetType() DatasetType {
	if x != nil {
		return x.DatasetType
	}
	return DatasetType_DATASET_TYPE_UNSPECIFIED
}

func (x *DatasetFilter) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *DatasetFilter) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *DatasetFilter) GetEnrichmentType() EnrichmentType {
	if x != nil && x.EnrichmentType != nil {
		return *x.EnrichmentType
	}
	return EnrichmentType_ENRICHMENT_TYPE_UNSPECIFIED
}

type Dataset struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	DatasetType DatasetType            `protobuf:"varint,1,opt,name=dataset_type,json=datasetType,proto3,enum=com.coralogix.schemastore.v1.DatasetType" json:"dataset_type,omitempty"`
	DatasetId   string                 `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Types that are valid to be assigned to Dataset:
	//
	//	*Dataset_BuiltInDataset
	//	*Dataset_CustomDataset
	//	*Dataset_EnrichmentDataset
	Dataset       isDataset_Dataset `protobuf_oneof:"dataset"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{15}
}

func (x *Dataset) GetDatasetType() DatasetType {
	if x != nil {
		return x.DatasetType
	}
	return DatasetType_DATASET_TYPE_UNSPECIFIED
}

func (x *Dataset) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *Dataset) GetDataset() isDataset_Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *Dataset) GetBuiltInDataset() *BuiltInDataset {
	if x != nil {
		if x, ok := x.Dataset.(*Dataset_BuiltInDataset); ok {
			return x.BuiltInDataset
		}
	}
	return nil
}

func (x *Dataset) GetCustomDataset() *CustomDataset {
	if x != nil {
		if x, ok := x.Dataset.(*Dataset_CustomDataset); ok {
			return x.CustomDataset
		}
	}
	return nil
}

func (x *Dataset) GetEnrichmentDataset() *EnrichmentDataset {
	if x != nil {
		if x, ok := x.Dataset.(*Dataset_EnrichmentDataset); ok {
			return x.EnrichmentDataset
		}
	}
	return nil
}

type isDataset_Dataset interface {
	isDataset_Dataset()
}

type Dataset_BuiltInDataset struct {
	BuiltInDataset *BuiltInDataset `protobuf:"bytes,3,opt,name=built_in_dataset,json=builtInDataset,proto3,oneof"`
}

type Dataset_CustomDataset struct {
	CustomDataset *CustomDataset `protobuf:"bytes,4,opt,name=custom_dataset,json=customDataset,proto3,oneof"`
}

type Dataset_EnrichmentDataset struct {
	EnrichmentDataset *EnrichmentDataset `protobuf:"bytes,5,opt,name=enrichment_dataset,json=enrichmentDataset,proto3,oneof"`
}

func (*Dataset_BuiltInDataset) isDataset_Dataset() {}

func (*Dataset_CustomDataset) isDataset_Dataset() {}

func (*Dataset_EnrichmentDataset) isDataset_Dataset() {}

type BuiltInDataset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuiltInDataset) Reset() {
	*x = BuiltInDataset{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuiltInDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltInDataset) ProtoMessage() {}

func (x *BuiltInDataset) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltInDataset.ProtoReflect.Descriptor instead.
func (*BuiltInDataset) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{16}
}

type CustomDataset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeamId        uint32                 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	DatasetId     string                 `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	NamespaceId   string                 `protobuf:"bytes,3,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Targets       []*CustomDatasetTarget `protobuf:"bytes,4,rep,name=targets,proto3" json:"targets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomDataset) Reset() {
	*x = CustomDataset{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDataset) ProtoMessage() {}

func (x *CustomDataset) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDataset.ProtoReflect.Descriptor instead.
func (*CustomDataset) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{17}
}

func (x *CustomDataset) GetTeamId() uint32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *CustomDataset) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *CustomDataset) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *CustomDataset) GetTargets() []*CustomDatasetTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

type EnrichmentDataset struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TeamId         uint32                 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	DatasetId      string                 `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	EnrichmentType EnrichmentType         `protobuf:"varint,3,opt,name=enrichment_type,json=enrichmentType,proto3,enum=com.coralogix.schemastore.v1.EnrichmentType" json:"enrichment_type,omitempty"`
	InternalId     uint32                 `protobuf:"varint,4,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	DisplayName    string                 `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description    string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Version        uint32                 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	MatchingKey    string                 `protobuf:"bytes,8,opt,name=matching_key,json=matchingKey,proto3" json:"matching_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EnrichmentDataset) Reset() {
	*x = EnrichmentDataset{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnrichmentDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichmentDataset) ProtoMessage() {}

func (x *EnrichmentDataset) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichmentDataset.ProtoReflect.Descriptor instead.
func (*EnrichmentDataset) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{18}
}

func (x *EnrichmentDataset) GetTeamId() uint32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *EnrichmentDataset) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *EnrichmentDataset) GetEnrichmentType() EnrichmentType {
	if x != nil {
		return x.EnrichmentType
	}
	return EnrichmentType_ENRICHMENT_TYPE_UNSPECIFIED
}

func (x *EnrichmentDataset) GetInternalId() uint32 {
	if x != nil {
		return x.InternalId
	}
	return 0
}

func (x *EnrichmentDataset) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *EnrichmentDataset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EnrichmentDataset) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *EnrichmentDataset) GetMatchingKey() string {
	if x != nil {
		return x.MatchingKey
	}
	return ""
}

type DatasetDescriptor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DatasetType   DatasetType            `protobuf:"varint,1,opt,name=dataset_type,json=datasetType,proto3,enum=com.coralogix.schemastore.v1.DatasetType" json:"dataset_type,omitempty"`
	Dataset       *string                `protobuf:"bytes,2,opt,name=dataset,proto3,oneof" json:"dataset,omitempty"`
	Dataspace     *string                `protobuf:"bytes,3,opt,name=dataspace,proto3,oneof" json:"dataspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatasetDescriptor) Reset() {
	*x = DatasetDescriptor{}
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetDescriptor) ProtoMessage() {}

func (x *DatasetDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_common_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetDescriptor.ProtoReflect.Descriptor instead.
func (*DatasetDescriptor) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP(), []int{19}
}

func (x *DatasetDescriptor) GetDatasetType() DatasetType {
	if x != nil {
		return x.DatasetType
	}
	return DatasetType_DATASET_TYPE_UNSPECIFIED
}

func (x *DatasetDescriptor) GetDataset() string {
	if x != nil && x.Dataset != nil {
		return *x.Dataset
	}
	return ""
}

func (x *DatasetDescriptor) GetDataspace() string {
	if x != nil && x.Dataspace != nil {
		return *x.Dataspace
	}
	return ""
}

var File_com_coralogix_schemastore_v1_common_proto protoreflect.FileDescriptor

const file_com_coralogix_schemastore_v1_common_proto_rawDesc = "" +
	"\n" +
	")com/coralogix/schemastore/v1/common.proto\x12\x1ccom.coralogix.schemastore.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"5\n" +
	"\vLabelFilter\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x03(\tR\x05value\"\xcd\x01\n" +
	"\fSchemaFilter\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12M\n" +
	"\x0eexpected_types\x18\x02 \x03(\x0e2&.com.coralogix.schemastore.v1.DataTypeR\rexpectedTypes\x12Z\n" +
	"\x13expected_full_types\x18\x03 \x03(\v2*.com.coralogix.schemastore.v1.FullDataTypeR\x11expectedFullTypes\" \n" +
	"\x0eSchemaIdFilter\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\"i\n" +
	"\x13PriorityClassFilter\x12R\n" +
	"\x0epriority_class\x18\x01 \x01(\x0e2+.com.coralogix.schemastore.v1.PriorityClassR\rpriorityClass\"\xdd\x01\n" +
	"\x0eMetadataFilter\x12E\n" +
	"\n" +
	"data_types\x18\x01 \x03(\x0e2&.com.coralogix.schemastore.v1.DataTypeR\tdataTypes\x12,\n" +
	"\x12logical_data_types\x18\x02 \x03(\tR\x10logicalDataTypes\x12V\n" +
	"\x10priority_classes\x18\x03 \x03(\x0e2+.com.coralogix.schemastore.v1.PriorityClassR\x0fpriorityClasses\"k\n" +
	"\tTimeRange\x120\n" +
	"\x05start\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x05start\x12,\n" +
	"\x03end\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x03end\"\x7f\n" +
	"\fFullDataType\x12C\n" +
	"\tdata_type\x18\x01 \x01(\x0e2&.com.coralogix.schemastore.v1.DataTypeR\bdataType\x12*\n" +
	"\x11logical_data_type\x18\x02 \x01(\tR\x0flogicalDataType\"1\n" +
	"\x05Label\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x16\n" +
	"\x06values\x18\x02 \x03(\tR\x06values\"\xae\x01\n" +
	"\x0fMatchExpression\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12F\n" +
	"\n" +
	"match_mode\x18\x02 \x01(\x0e2'.com.coralogix.schemastore.v1.MatchModeR\tmatchMode\x12%\n" +
	"\x0ecase_sensitive\x18\x03 \x01(\bR\rcaseSensitive\x12\x16\n" +
	"\x06invert\x18\x04 \x01(\bR\x06invert\"3\n" +
	"\x12VirtualFieldFilter\x12\x1d\n" +
	"\n" +
	"is_virtual\x18\x01 \x01(\bR\tisVirtual\"\x82\x04\n" +
	"\x13CustomDatasetTarget\x12O\n" +
	"\x06format\x18\x01 \x01(\x0e27.com.coralogix.schemastore.v1.CustomDatasetTargetFormatR\x06format\x12I\n" +
	"\x04type\x18\x02 \x01(\x0e25.com.coralogix.schemastore.v1.CustomDatasetTargetTypeR\x04type\x12\x16\n" +
	"\x06prefix\x18\x03 \x01(\tR\x06prefix\x12/\n" +
	"\x13partitioning_scheme\x18\x04 \x01(\tR\x12partitioningScheme\x12q\n" +
	"\x14s3_target_properties\x18\x05 \x01(\v2=.com.coralogix.schemastore.v1.CustomDatasetS3TargetPropertiesH\x00R\x12s3TargetProperties\x12~\n" +
	"\x19ibm_cos_target_properties\x18\x06 \x01(\v2A.com.coralogix.schemastore.v1.CustomDatasetIbmCosTargetPropertiesH\x00R\x16ibmCosTargetPropertiesB\x13\n" +
	"\x11target_properties\"Q\n" +
	"\x1fCustomDatasetS3TargetProperties\x12\x16\n" +
	"\x06region\x18\x01 \x01(\tR\x06region\x12\x16\n" +
	"\x06bucket\x18\x02 \x01(\tR\x06bucket\"t\n" +
	"#CustomDatasetIbmCosTargetProperties\x12\x10\n" +
	"\x03crn\x18\x01 \x01(\tR\x03crn\x12\x1a\n" +
	"\bendpoint\x18\x02 \x01(\tR\bendpoint\x12\x1f\n" +
	"\vbucket_type\x18\x03 \x01(\tR\n" +
	"bucketType\"\x89\x02\n" +
	"\n" +
	"Enrichment\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12U\n" +
	"\x0fenrichment_type\x18\x04 \x01(\x0e2,.com.coralogix.schemastore.v1.EnrichmentTypeR\x0eenrichmentType\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x18\n" +
	"\aversion\x18\x06 \x01(\rR\aversion\x12!\n" +
	"\fmatching_key\x18\a \x01(\tR\vmatchingKey\"\xb9\x02\n" +
	"\rDatasetFilter\x12L\n" +
	"\fdataset_type\x18\x01 \x01(\x0e2).com.coralogix.schemastore.v1.DatasetTypeR\vdatasetType\x12\"\n" +
	"\n" +
	"dataset_id\x18\x02 \x01(\tH\x00R\tdatasetId\x88\x01\x01\x12&\n" +
	"\fnamespace_id\x18\x03 \x01(\tH\x01R\vnamespaceId\x88\x01\x01\x12Z\n" +
	"\x0fenrichment_type\x18\x04 \x01(\x0e2,.com.coralogix.schemastore.v1.EnrichmentTypeH\x02R\x0eenrichmentType\x88\x01\x01B\r\n" +
	"\v_dataset_idB\x0f\n" +
	"\r_namespace_idB\x12\n" +
	"\x10_enrichment_type\"\x93\x03\n" +
	"\aDataset\x12L\n" +
	"\fdataset_type\x18\x01 \x01(\x0e2).com.coralogix.schemastore.v1.DatasetTypeR\vdatasetType\x12\x1d\n" +
	"\n" +
	"dataset_id\x18\x02 \x01(\tR\tdatasetId\x12X\n" +
	"\x10built_in_dataset\x18\x03 \x01(\v2,.com.coralogix.schemastore.v1.BuiltInDatasetH\x00R\x0ebuiltInDataset\x12T\n" +
	"\x0ecustom_dataset\x18\x04 \x01(\v2+.com.coralogix.schemastore.v1.CustomDatasetH\x00R\rcustomDataset\x12`\n" +
	"\x12enrichment_dataset\x18\x05 \x01(\v2/.com.coralogix.schemastore.v1.EnrichmentDatasetH\x00R\x11enrichmentDatasetB\t\n" +
	"\adataset\"\x10\n" +
	"\x0eBuiltInDataset\"\xb7\x01\n" +
	"\rCustomDataset\x12\x17\n" +
	"\ateam_id\x18\x01 \x01(\rR\x06teamId\x12\x1d\n" +
	"\n" +
	"dataset_id\x18\x02 \x01(\tR\tdatasetId\x12!\n" +
	"\fnamespace_id\x18\x03 \x01(\tR\vnamespaceId\x12K\n" +
	"\atargets\x18\x04 \x03(\v21.com.coralogix.schemastore.v1.CustomDatasetTargetR\atargets\"\xc5\x02\n" +
	"\x11EnrichmentDataset\x12\x17\n" +
	"\ateam_id\x18\x01 \x01(\rR\x06teamId\x12\x1d\n" +
	"\n" +
	"dataset_id\x18\x02 \x01(\tR\tdatasetId\x12U\n" +
	"\x0fenrichment_type\x18\x03 \x01(\x0e2,.com.coralogix.schemastore.v1.EnrichmentTypeR\x0eenrichmentType\x12\x1f\n" +
	"\vinternal_id\x18\x04 \x01(\rR\n" +
	"internalId\x12!\n" +
	"\fdisplay_name\x18\x05 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12\x18\n" +
	"\aversion\x18\a \x01(\rR\aversion\x12!\n" +
	"\fmatching_key\x18\b \x01(\tR\vmatchingKey\"\xbd\x01\n" +
	"\x11DatasetDescriptor\x12L\n" +
	"\fdataset_type\x18\x01 \x01(\x0e2).com.coralogix.schemastore.v1.DatasetTypeR\vdatasetType\x12\x1d\n" +
	"\adataset\x18\x02 \x01(\tH\x00R\adataset\x88\x01\x01\x12!\n" +
	"\tdataspace\x18\x03 \x01(\tH\x01R\tdataspace\x88\x01\x01B\n" +
	"\n" +
	"\b_datasetB\f\n" +
	"\n" +
	"_dataspace*{\n" +
	"\rPriorityClass\x12\x1e\n" +
	"\x1aPRIORITY_CLASS_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12PRIORITY_CLASS_LOW\x10\x01\x12\x19\n" +
	"\x15PRIORITY_CLASS_MEDIUM\x10\x02\x12\x17\n" +
	"\x13PRIORITY_CLASS_HIGH\x10\x03*\xe6\x02\n" +
	"\bDataType\x12\x19\n" +
	"\x15DATA_TYPE_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rDATA_TYPE_NUM\x10\x01\x12\x14\n" +
	"\x10DATA_TYPE_STRING\x10\x02\x12\x12\n" +
	"\x0eDATA_TYPE_BOOL\x10\x03\x12\x1d\n" +
	"\x19DATA_TYPE_UNTRACKED_ARRAY\x10\x04\x12\x14\n" +
	"\x10DATA_TYPE_OBJECT\x10\x05\x12\x17\n" +
	"\x13DATA_TYPE_NUM_ARRAY\x10\x06\x12\x1a\n" +
	"\x16DATA_TYPE_STRING_ARRAY\x10\a\x12\x18\n" +
	"\x14DATA_TYPE_BOOL_ARRAY\x10\b\x12\x19\n" +
	"\x15DATA_TYPE_ARRAY_ARRAY\x10\t\x12\x1a\n" +
	"\x16DATA_TYPE_OBJECT_ARRAY\x10\n" +
	"\x12\x12\n" +
	"\x0eDATA_TYPE_NULL\x10\v\x12\x18\n" +
	"\x14DATA_TYPE_NULL_ARRAY\x10\f\x12\x19\n" +
	"\x15DATA_TYPE_EMPTY_ARRAY\x10\r*j\n" +
	"\x0eTimeResolution\x12\x1f\n" +
	"\x1bTIME_RESOLUTION_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16TIME_RESOLUTION_HOURLY\x10\x01\x12\x1b\n" +
	"\x17TIME_RESOLUTION_MONTHLY\x10\x02*r\n" +
	"\x0fLabelResultType\x12!\n" +
	"\x1dLABEL_RESULT_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cLABEL_RESULT_TYPE_LABEL_KEYS\x10\x01\x12\x1a\n" +
	"\x16LABEL_RESULT_TYPE_FULL\x10\x02*\x88\x01\n" +
	"\x0eDataSourceType\x12 \n" +
	"\x1cDATA_SOURCE_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15DATA_SOURCE_TYPE_LOGS\x10\x01\x12\x1b\n" +
	"\x17DATA_SOURCE_TYPE_TRACES\x10\x02\x12\x1c\n" +
	"\x18DATA_SOURCE_TYPE_METRICS\x10\x03*\xa0\x01\n" +
	"\tMatchMode\x12\x1a\n" +
	"\x16MATCH_MODE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11MATCH_MODE_STRICT\x10\x01\x12\x14\n" +
	"\x10MATCH_MODE_FUZZY\x10\x02\x12\x1a\n" +
	"\x16MATCH_MODE_STARTS_WITH\x10\x03\x12\x18\n" +
	"\x14MATCH_MODE_ENDS_WITH\x10\x04\x12\x14\n" +
	"\x10MATCH_MODE_REGEX\x10\x05*z\n" +
	"\x19CustomDatasetTargetFormat\x12,\n" +
	"(CUSTOM_DATASET_TARGET_FORMAT_UNSPECIFIED\x10\x00\x12/\n" +
	"+CUSTOM_DATASET_TARGET_FORMAT_WIDEPARQUET_V1\x10\x01*\x8f\x01\n" +
	"\x17CustomDatasetTargetType\x12*\n" +
	"&CUSTOM_DATASET_TARGET_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dCUSTOM_DATASET_TARGET_TYPE_S3\x10\x01\x12%\n" +
	"!CUSTOM_DATASET_TARGET_TYPE_IBMCOS\x10\x02*\x8b\x01\n" +
	"\x0eEnrichmentType\x12\x1f\n" +
	"\x1bENRICHMENT_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16ENRICHMENT_TYPE_CUSTOM\x10\x01\x12\x1a\n" +
	"\x16ENRICHMENT_TYPE_LOOKUP\x10\x02\x12 \n" +
	"\x1cENRICHMENT_TYPE_MATERIALIZED\x10\x03*\xd2\x01\n" +
	"\vDatasetType\x12\x1c\n" +
	"\x18DATASET_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11DATASET_TYPE_LOGS\x10\x01\x12\x16\n" +
	"\x12DATASET_TYPE_SPANS\x10\x02\x12\x18\n" +
	"\x14DATASET_TYPE_METRICS\x10\x03\x12\x1b\n" +
	"\x17DATASET_TYPE_ENRICHMENT\x10\x04\x12\x1b\n" +
	"\x13DATASET_TYPE_CUSTOM\x10\x05\x1a\x02\b\x01\x12\"\n" +
	"\x1eDATASET_TYPE_DATASPACE_DATASET\x10\x06*\x7f\n" +
	"\fDatasetScope\x12\x1d\n" +
	"\x19DATASET_SCOPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17DATASET_SCOPE_USER_DATA\x10\x01\x12\x17\n" +
	"\x13DATASET_SCOPE_LABEL\x10\x02\x12\x1a\n" +
	"\x16DATASET_SCOPE_METADATA\x10\x03b\x06proto3"

var (
	file_com_coralogix_schemastore_v1_common_proto_rawDescOnce sync.Once
	file_com_coralogix_schemastore_v1_common_proto_rawDescData []byte
)

func file_com_coralogix_schemastore_v1_common_proto_rawDescGZIP() []byte {
	file_com_coralogix_schemastore_v1_common_proto_rawDescOnce.Do(func() {
		file_com_coralogix_schemastore_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_coralogix_schemastore_v1_common_proto_rawDesc), len(file_com_coralogix_schemastore_v1_common_proto_rawDesc)))
	})
	return file_com_coralogix_schemastore_v1_common_proto_rawDescData
}

var file_com_coralogix_schemastore_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_com_coralogix_schemastore_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_com_coralogix_schemastore_v1_common_proto_goTypes = []any{
	(PriorityClass)(0),                          // 0: com.coralogix.schemastore.v1.PriorityClass
	(DataType)(0),                               // 1: com.coralogix.schemastore.v1.DataType
	(TimeResolution)(0),                         // 2: com.coralogix.schemastore.v1.TimeResolution
	(LabelResultType)(0),                        // 3: com.coralogix.schemastore.v1.LabelResultType
	(DataSourceType)(0),                         // 4: com.coralogix.schemastore.v1.DataSourceType
	(MatchMode)(0),                              // 5: com.coralogix.schemastore.v1.MatchMode
	(CustomDatasetTargetFormat)(0),              // 6: com.coralogix.schemastore.v1.CustomDatasetTargetFormat
	(CustomDatasetTargetType)(0),                // 7: com.coralogix.schemastore.v1.CustomDatasetTargetType
	(EnrichmentType)(0),                         // 8: com.coralogix.schemastore.v1.EnrichmentType
	(DatasetType)(0),                            // 9: com.coralogix.schemastore.v1.DatasetType
	(DatasetScope)(0),                           // 10: com.coralogix.schemastore.v1.DatasetScope
	(*LabelFilter)(nil),                         // 11: com.coralogix.schemastore.v1.LabelFilter
	(*SchemaFilter)(nil),                        // 12: com.coralogix.schemastore.v1.SchemaFilter
	(*SchemaIdFilter)(nil),                      // 13: com.coralogix.schemastore.v1.SchemaIdFilter
	(*PriorityClassFilter)(nil),                 // 14: com.coralogix.schemastore.v1.PriorityClassFilter
	(*MetadataFilter)(nil),                      // 15: com.coralogix.schemastore.v1.MetadataFilter
	(*TimeRange)(nil),                           // 16: com.coralogix.schemastore.v1.TimeRange
	(*FullDataType)(nil),                        // 17: com.coralogix.schemastore.v1.FullDataType
	(*Label)(nil),                               // 18: com.coralogix.schemastore.v1.Label
	(*MatchExpression)(nil),                     // 19: com.coralogix.schemastore.v1.MatchExpression
	(*VirtualFieldFilter)(nil),                  // 20: com.coralogix.schemastore.v1.VirtualFieldFilter
	(*CustomDatasetTarget)(nil),                 // 21: com.coralogix.schemastore.v1.CustomDatasetTarget
	(*CustomDatasetS3TargetProperties)(nil),     // 22: com.coralogix.schemastore.v1.CustomDatasetS3TargetProperties
	(*CustomDatasetIbmCosTargetProperties)(nil), // 23: com.coralogix.schemastore.v1.CustomDatasetIbmCosTargetProperties
	(*Enrichment)(nil),                          // 24: com.coralogix.schemastore.v1.Enrichment
	(*DatasetFilter)(nil),                       // 25: com.coralogix.schemastore.v1.DatasetFilter
	(*Dataset)(nil),                             // 26: com.coralogix.schemastore.v1.Dataset
	(*BuiltInDataset)(nil),                      // 27: com.coralogix.schemastore.v1.BuiltInDataset
	(*CustomDataset)(nil),                       // 28: com.coralogix.schemastore.v1.CustomDataset
	(*EnrichmentDataset)(nil),                   // 29: com.coralogix.schemastore.v1.EnrichmentDataset
	(*DatasetDescriptor)(nil),                   // 30: com.coralogix.schemastore.v1.DatasetDescriptor
	(*timestamppb.Timestamp)(nil),               // 31: google.protobuf.Timestamp
}
var file_com_coralogix_schemastore_v1_common_proto_depIdxs = []int32{
	1,  // 0: com.coralogix.schemastore.v1.SchemaFilter.expected_types:type_name -> com.coralogix.schemastore.v1.DataType
	17, // 1: com.coralogix.schemastore.v1.SchemaFilter.expected_full_types:type_name -> com.coralogix.schemastore.v1.FullDataType
	0,  // 2: com.coralogix.schemastore.v1.PriorityClassFilter.priority_class:type_name -> com.coralogix.schemastore.v1.PriorityClass
	1,  // 3: com.coralogix.schemastore.v1.MetadataFilter.data_types:type_name -> com.coralogix.schemastore.v1.DataType
	0,  // 4: com.coralogix.schemastore.v1.MetadataFilter.priority_classes:type_name -> com.coralogix.schemastore.v1.PriorityClass
	31, // 5: com.coralogix.schemastore.v1.TimeRange.start:type_name -> google.protobuf.Timestamp
	31, // 6: com.coralogix.schemastore.v1.TimeRange.end:type_name -> google.protobuf.Timestamp
	1,  // 7: com.coralogix.schemastore.v1.FullDataType.data_type:type_name -> com.coralogix.schemastore.v1.DataType
	5,  // 8: com.coralogix.schemastore.v1.MatchExpression.match_mode:type_name -> com.coralogix.schemastore.v1.MatchMode
	6,  // 9: com.coralogix.schemastore.v1.CustomDatasetTarget.format:type_name -> com.coralogix.schemastore.v1.CustomDatasetTargetFormat
	7,  // 10: com.coralogix.schemastore.v1.CustomDatasetTarget.type:type_name -> com.coralogix.schemastore.v1.CustomDatasetTargetType
	22, // 11: com.coralogix.schemastore.v1.CustomDatasetTarget.s3_target_properties:type_name -> com.coralogix.schemastore.v1.CustomDatasetS3TargetProperties
	23, // 12: com.coralogix.schemastore.v1.CustomDatasetTarget.ibm_cos_target_properties:type_name -> com.coralogix.schemastore.v1.CustomDatasetIbmCosTargetProperties
	8,  // 13: com.coralogix.schemastore.v1.Enrichment.enrichment_type:type_name -> com.coralogix.schemastore.v1.EnrichmentType
	9,  // 14: com.coralogix.schemastore.v1.DatasetFilter.dataset_type:type_name -> com.coralogix.schemastore.v1.DatasetType
	8,  // 15: com.coralogix.schemastore.v1.DatasetFilter.enrichment_type:type_name -> com.coralogix.schemastore.v1.EnrichmentType
	9,  // 16: com.coralogix.schemastore.v1.Dataset.dataset_type:type_name -> com.coralogix.schemastore.v1.DatasetType
	27, // 17: com.coralogix.schemastore.v1.Dataset.built_in_dataset:type_name -> com.coralogix.schemastore.v1.BuiltInDataset
	28, // 18: com.coralogix.schemastore.v1.Dataset.custom_dataset:type_name -> com.coralogix.schemastore.v1.CustomDataset
	29, // 19: com.coralogix.schemastore.v1.Dataset.enrichment_dataset:type_name -> com.coralogix.schemastore.v1.EnrichmentDataset
	21, // 20: com.coralogix.schemastore.v1.CustomDataset.targets:type_name -> com.coralogix.schemastore.v1.CustomDatasetTarget
	8,  // 21: com.coralogix.schemastore.v1.EnrichmentDataset.enrichment_type:type_name -> com.coralogix.schemastore.v1.EnrichmentType
	9,  // 22: com.coralogix.schemastore.v1.DatasetDescriptor.dataset_type:type_name -> com.coralogix.schemastore.v1.DatasetType
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_com_coralogix_schemastore_v1_common_proto_init() }
func file_com_coralogix_schemastore_v1_common_proto_init() {
	if File_com_coralogix_schemastore_v1_common_proto != nil {
		return
	}
	file_com_coralogix_schemastore_v1_common_proto_msgTypes[10].OneofWrappers = []any{
		(*CustomDatasetTarget_S3TargetProperties)(nil),
		(*CustomDatasetTarget_IbmCosTargetProperties)(nil),
	}
	file_com_coralogix_schemastore_v1_common_proto_msgTypes[14].OneofWrappers = []any{}
	file_com_coralogix_schemastore_v1_common_proto_msgTypes[15].OneofWrappers = []any{
		(*Dataset_BuiltInDataset)(nil),
		(*Dataset_CustomDataset)(nil),
		(*Dataset_EnrichmentDataset)(nil),
	}
	file_com_coralogix_schemastore_v1_common_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_coralogix_schemastore_v1_common_proto_rawDesc), len(file_com_coralogix_schemastore_v1_common_proto_rawDesc)),
			NumEnums:      11,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_schemastore_v1_common_proto_goTypes,
		DependencyIndexes: file_com_coralogix_schemastore_v1_common_proto_depIdxs,
		EnumInfos:         file_com_coralogix_schemastore_v1_common_proto_enumTypes,
		MessageInfos:      file_com_coralogix_schemastore_v1_common_proto_msgTypes,
	}.Build()
	File_com_coralogix_schemastore_v1_common_proto = out.File
	file_com_coralogix_schemastore_v1_common_proto_goTypes = nil
	file_com_coralogix_schemastore_v1_common_proto_depIdxs = nil
}
