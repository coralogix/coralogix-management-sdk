// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: com/coralogix/schemastore/v1/query.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryRequestExpr_Operator int32

const (
	QueryRequestExpr_OPERATOR_UNSPECIFIED QueryRequestExpr_Operator = 0
	QueryRequestExpr_OPERATOR_EQ          QueryRequestExpr_Operator = 1
	QueryRequestExpr_OPERATOR_NOT_EQ      QueryRequestExpr_Operator = 2
	QueryRequestExpr_OPERATOR_GT_EQ       QueryRequestExpr_Operator = 3
	QueryRequestExpr_OPERATOR_LT          QueryRequestExpr_Operator = 4
	QueryRequestExpr_OPERATOR_AND         QueryRequestExpr_Operator = 5
	QueryRequestExpr_OPERATOR_OR          QueryRequestExpr_Operator = 6
)

// Enum value maps for QueryRequestExpr_Operator.
var (
	QueryRequestExpr_Operator_name = map[int32]string{
		0: "OPERATOR_UNSPECIFIED",
		1: "OPERATOR_EQ",
		2: "OPERATOR_NOT_EQ",
		3: "OPERATOR_GT_EQ",
		4: "OPERATOR_LT",
		5: "OPERATOR_AND",
		6: "OPERATOR_OR",
	}
	QueryRequestExpr_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"OPERATOR_EQ":          1,
		"OPERATOR_NOT_EQ":      2,
		"OPERATOR_GT_EQ":       3,
		"OPERATOR_LT":          4,
		"OPERATOR_AND":         5,
		"OPERATOR_OR":          6,
	}
)

func (x QueryRequestExpr_Operator) Enum() *QueryRequestExpr_Operator {
	p := new(QueryRequestExpr_Operator)
	*p = x
	return p
}

func (x QueryRequestExpr_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryRequestExpr_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_query_proto_enumTypes[0].Descriptor()
}

func (QueryRequestExpr_Operator) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_query_proto_enumTypes[0]
}

func (x QueryRequestExpr_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryRequestExpr_Operator.Descriptor instead.
func (QueryRequestExpr_Operator) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{1, 0}
}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualTable string              `protobuf:"bytes,1,opt,name=virtual_table,json=virtualTable,proto3" json:"virtual_table,omitempty"`
	Shard        *uint32             `protobuf:"varint,2,opt,name=shard,proto3,oneof" json:"shard,omitempty"`
	CompanyIds   []uint32            `protobuf:"varint,3,rep,packed,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
	Filters      []*QueryRequestExpr `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit        *uint32             `protobuf:"varint,5,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{0}
}

func (x *QueryRequest) GetVirtualTable() string {
	if x != nil {
		return x.VirtualTable
	}
	return ""
}

func (x *QueryRequest) GetShard() uint32 {
	if x != nil && x.Shard != nil {
		return *x.Shard
	}
	return 0
}

func (x *QueryRequest) GetCompanyIds() []uint32 {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

func (x *QueryRequest) GetFilters() []*QueryRequestExpr {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *QueryRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type QueryRequestExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expr:
	//
	//	*QueryRequestExpr_Literal_
	//	*QueryRequestExpr_Column_
	//	*QueryRequestExpr_BinaryExpr_
	//	*QueryRequestExpr_Not_
	//	*QueryRequestExpr_Function_
	Expr isQueryRequestExpr_Expr `protobuf_oneof:"expr"`
}

func (x *QueryRequestExpr) Reset() {
	*x = QueryRequestExpr{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequestExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestExpr) ProtoMessage() {}

func (x *QueryRequestExpr) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequestExpr.ProtoReflect.Descriptor instead.
func (*QueryRequestExpr) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{1}
}

func (m *QueryRequestExpr) GetExpr() isQueryRequestExpr_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (x *QueryRequestExpr) GetLiteral() *QueryRequestExpr_Literal {
	if x, ok := x.GetExpr().(*QueryRequestExpr_Literal_); ok {
		return x.Literal
	}
	return nil
}

func (x *QueryRequestExpr) GetColumn() *QueryRequestExpr_Column {
	if x, ok := x.GetExpr().(*QueryRequestExpr_Column_); ok {
		return x.Column
	}
	return nil
}

func (x *QueryRequestExpr) GetBinaryExpr() *QueryRequestExpr_BinaryExpr {
	if x, ok := x.GetExpr().(*QueryRequestExpr_BinaryExpr_); ok {
		return x.BinaryExpr
	}
	return nil
}

func (x *QueryRequestExpr) GetNot() *QueryRequestExpr_Not {
	if x, ok := x.GetExpr().(*QueryRequestExpr_Not_); ok {
		return x.Not
	}
	return nil
}

func (x *QueryRequestExpr) GetFunction() *QueryRequestExpr_Function {
	if x, ok := x.GetExpr().(*QueryRequestExpr_Function_); ok {
		return x.Function
	}
	return nil
}

type isQueryRequestExpr_Expr interface {
	isQueryRequestExpr_Expr()
}

type QueryRequestExpr_Literal_ struct {
	Literal *QueryRequestExpr_Literal `protobuf:"bytes,1,opt,name=literal,proto3,oneof"`
}

type QueryRequestExpr_Column_ struct {
	Column *QueryRequestExpr_Column `protobuf:"bytes,2,opt,name=column,proto3,oneof"`
}

type QueryRequestExpr_BinaryExpr_ struct {
	BinaryExpr *QueryRequestExpr_BinaryExpr `protobuf:"bytes,3,opt,name=binary_expr,json=binaryExpr,proto3,oneof"`
}

type QueryRequestExpr_Not_ struct {
	Not *QueryRequestExpr_Not `protobuf:"bytes,4,opt,name=not,proto3,oneof"`
}

type QueryRequestExpr_Function_ struct {
	Function *QueryRequestExpr_Function `protobuf:"bytes,5,opt,name=function,proto3,oneof"`
}

func (*QueryRequestExpr_Literal_) isQueryRequestExpr_Expr() {}

func (*QueryRequestExpr_Column_) isQueryRequestExpr_Expr() {}

func (*QueryRequestExpr_BinaryExpr_) isQueryRequestExpr_Expr() {}

func (*QueryRequestExpr_Not_) isQueryRequestExpr_Expr() {}

func (*QueryRequestExpr_Function_) isQueryRequestExpr_Expr() {}

type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrowStreamBytes []byte `protobuf:"bytes,1,opt,name=arrow_stream_bytes,json=arrowStreamBytes,proto3" json:"arrow_stream_bytes,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{2}
}

func (x *QueryResponse) GetArrowStreamBytes() []byte {
	if x != nil {
		return x.ArrowStreamBytes
	}
	return nil
}

type QueryRequestExpr_Literal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*QueryRequestExpr_Literal_Null
	//	*QueryRequestExpr_Literal_String_
	//	*QueryRequestExpr_Literal_Timestamp
	Value isQueryRequestExpr_Literal_Value `protobuf_oneof:"value"`
}

func (x *QueryRequestExpr_Literal) Reset() {
	*x = QueryRequestExpr_Literal{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequestExpr_Literal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestExpr_Literal) ProtoMessage() {}

func (x *QueryRequestExpr_Literal) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequestExpr_Literal.ProtoReflect.Descriptor instead.
func (*QueryRequestExpr_Literal) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{1, 0}
}

func (m *QueryRequestExpr_Literal) GetValue() isQueryRequestExpr_Literal_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *QueryRequestExpr_Literal) GetNull() *QueryRequestExpr_Null {
	if x, ok := x.GetValue().(*QueryRequestExpr_Literal_Null); ok {
		return x.Null
	}
	return nil
}

func (x *QueryRequestExpr_Literal) GetString_() string {
	if x, ok := x.GetValue().(*QueryRequestExpr_Literal_String_); ok {
		return x.String_
	}
	return ""
}

func (x *QueryRequestExpr_Literal) GetTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetValue().(*QueryRequestExpr_Literal_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

type isQueryRequestExpr_Literal_Value interface {
	isQueryRequestExpr_Literal_Value()
}

type QueryRequestExpr_Literal_Null struct {
	Null *QueryRequestExpr_Null `protobuf:"bytes,1,opt,name=null,proto3,oneof"`
}

type QueryRequestExpr_Literal_String_ struct {
	String_ string `protobuf:"bytes,2,opt,name=string,proto3,oneof"`
}

type QueryRequestExpr_Literal_Timestamp struct {
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3,oneof"`
}

func (*QueryRequestExpr_Literal_Null) isQueryRequestExpr_Literal_Value() {}

func (*QueryRequestExpr_Literal_String_) isQueryRequestExpr_Literal_Value() {}

func (*QueryRequestExpr_Literal_Timestamp) isQueryRequestExpr_Literal_Value() {}

type QueryRequestExpr_Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryRequestExpr_Null) Reset() {
	*x = QueryRequestExpr_Null{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequestExpr_Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestExpr_Null) ProtoMessage() {}

func (x *QueryRequestExpr_Null) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequestExpr_Null.ProtoReflect.Descriptor instead.
func (*QueryRequestExpr_Null) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{1, 1}
}

type QueryRequestExpr_Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keypath *QueryRequestExpr_Keypath `protobuf:"bytes,1,opt,name=keypath,proto3" json:"keypath,omitempty"`
}

func (x *QueryRequestExpr_Column) Reset() {
	*x = QueryRequestExpr_Column{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequestExpr_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestExpr_Column) ProtoMessage() {}

func (x *QueryRequestExpr_Column) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequestExpr_Column.ProtoReflect.Descriptor instead.
func (*QueryRequestExpr_Column) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{1, 2}
}

func (x *QueryRequestExpr_Column) GetKeypath() *QueryRequestExpr_Keypath {
	if x != nil {
		return x.Keypath
	}
	return nil
}

type QueryRequestExpr_Keypath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetScope DatasetScope `protobuf:"varint,1,opt,name=dataset_scope,json=datasetScope,proto3,enum=com.coralogix.schemastore.v1.DatasetScope" json:"dataset_scope,omitempty"`
	Path         []string     `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *QueryRequestExpr_Keypath) Reset() {
	*x = QueryRequestExpr_Keypath{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequestExpr_Keypath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestExpr_Keypath) ProtoMessage() {}

func (x *QueryRequestExpr_Keypath) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequestExpr_Keypath.ProtoReflect.Descriptor instead.
func (*QueryRequestExpr_Keypath) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{1, 3}
}

func (x *QueryRequestExpr_Keypath) GetDatasetScope() DatasetScope {
	if x != nil {
		return x.DatasetScope
	}
	return DatasetScope_DATASET_SCOPE_UNSPECIFIED
}

func (x *QueryRequestExpr_Keypath) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type QueryRequestExpr_BinaryExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *QueryRequestExpr         `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Op    QueryRequestExpr_Operator `protobuf:"varint,2,opt,name=op,proto3,enum=com.coralogix.schemastore.v1.QueryRequestExpr_Operator" json:"op,omitempty"`
	Right *QueryRequestExpr         `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *QueryRequestExpr_BinaryExpr) Reset() {
	*x = QueryRequestExpr_BinaryExpr{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequestExpr_BinaryExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestExpr_BinaryExpr) ProtoMessage() {}

func (x *QueryRequestExpr_BinaryExpr) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequestExpr_BinaryExpr.ProtoReflect.Descriptor instead.
func (*QueryRequestExpr_BinaryExpr) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{1, 4}
}

func (x *QueryRequestExpr_BinaryExpr) GetLeft() *QueryRequestExpr {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *QueryRequestExpr_BinaryExpr) GetOp() QueryRequestExpr_Operator {
	if x != nil {
		return x.Op
	}
	return QueryRequestExpr_OPERATOR_UNSPECIFIED
}

func (x *QueryRequestExpr_BinaryExpr) GetRight() *QueryRequestExpr {
	if x != nil {
		return x.Right
	}
	return nil
}

type QueryRequestExpr_Not struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *QueryRequestExpr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *QueryRequestExpr_Not) Reset() {
	*x = QueryRequestExpr_Not{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequestExpr_Not) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestExpr_Not) ProtoMessage() {}

func (x *QueryRequestExpr_Not) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequestExpr_Not.ProtoReflect.Descriptor instead.
func (*QueryRequestExpr_Not) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{1, 5}
}

func (x *QueryRequestExpr_Not) GetExpr() *QueryRequestExpr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type QueryRequestExpr_Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//
	//	*QueryRequestExpr_Function_RegexMatch_
	//	*QueryRequestExpr_Function_SearchText_
	//	*QueryRequestExpr_Function_StartsWith_
	//	*QueryRequestExpr_Function_EndsWith_
	Function isQueryRequestExpr_Function_Function `protobuf_oneof:"function"`
}

func (x *QueryRequestExpr_Function) Reset() {
	*x = QueryRequestExpr_Function{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequestExpr_Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestExpr_Function) ProtoMessage() {}

func (x *QueryRequestExpr_Function) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequestExpr_Function.ProtoReflect.Descriptor instead.
func (*QueryRequestExpr_Function) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{1, 6}
}

func (m *QueryRequestExpr_Function) GetFunction() isQueryRequestExpr_Function_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *QueryRequestExpr_Function) GetRegexMatch() *QueryRequestExpr_Function_RegexMatch {
	if x, ok := x.GetFunction().(*QueryRequestExpr_Function_RegexMatch_); ok {
		return x.RegexMatch
	}
	return nil
}

func (x *QueryRequestExpr_Function) GetSearchText() *QueryRequestExpr_Function_SearchText {
	if x, ok := x.GetFunction().(*QueryRequestExpr_Function_SearchText_); ok {
		return x.SearchText
	}
	return nil
}

func (x *QueryRequestExpr_Function) GetStartsWith() *QueryRequestExpr_Function_StartsWith {
	if x, ok := x.GetFunction().(*QueryRequestExpr_Function_StartsWith_); ok {
		return x.StartsWith
	}
	return nil
}

func (x *QueryRequestExpr_Function) GetEndsWith() *QueryRequestExpr_Function_EndsWith {
	if x, ok := x.GetFunction().(*QueryRequestExpr_Function_EndsWith_); ok {
		return x.EndsWith
	}
	return nil
}

type isQueryRequestExpr_Function_Function interface {
	isQueryRequestExpr_Function_Function()
}

type QueryRequestExpr_Function_RegexMatch_ struct {
	RegexMatch *QueryRequestExpr_Function_RegexMatch `protobuf:"bytes,1,opt,name=regex_match,json=regexMatch,proto3,oneof"`
}

type QueryRequestExpr_Function_SearchText_ struct {
	SearchText *QueryRequestExpr_Function_SearchText `protobuf:"bytes,2,opt,name=search_text,json=searchText,proto3,oneof"`
}

type QueryRequestExpr_Function_StartsWith_ struct {
	StartsWith *QueryRequestExpr_Function_StartsWith `protobuf:"bytes,3,opt,name=starts_with,json=startsWith,proto3,oneof"`
}

type QueryRequestExpr_Function_EndsWith_ struct {
	EndsWith *QueryRequestExpr_Function_EndsWith `protobuf:"bytes,4,opt,name=ends_with,json=endsWith,proto3,oneof"`
}

func (*QueryRequestExpr_Function_RegexMatch_) isQueryRequestExpr_Function_Function() {}

func (*QueryRequestExpr_Function_SearchText_) isQueryRequestExpr_Function_Function() {}

func (*QueryRequestExpr_Function_StartsWith_) isQueryRequestExpr_Function_Function() {}

func (*QueryRequestExpr_Function_EndsWith_) isQueryRequestExpr_Function_Function() {}

type QueryRequestExpr_Function_RegexMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr  *QueryRequestExpr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	Regex string            `protobuf:"bytes,2,opt,name=regex,proto3" json:"regex,omitempty"`
}

func (x *QueryRequestExpr_Function_RegexMatch) Reset() {
	*x = QueryRequestExpr_Function_RegexMatch{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequestExpr_Function_RegexMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestExpr_Function_RegexMatch) ProtoMessage() {}

func (x *QueryRequestExpr_Function_RegexMatch) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequestExpr_Function_RegexMatch.ProtoReflect.Descriptor instead.
func (*QueryRequestExpr_Function_RegexMatch) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{1, 6, 0}
}

func (x *QueryRequestExpr_Function_RegexMatch) GetExpr() *QueryRequestExpr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *QueryRequestExpr_Function_RegexMatch) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

type QueryRequestExpr_Function_SearchText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr     *QueryRequestExpr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	RawQuery string            `protobuf:"bytes,2,opt,name=raw_query,json=rawQuery,proto3" json:"raw_query,omitempty"`
	Tokens   []string          `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *QueryRequestExpr_Function_SearchText) Reset() {
	*x = QueryRequestExpr_Function_SearchText{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequestExpr_Function_SearchText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestExpr_Function_SearchText) ProtoMessage() {}

func (x *QueryRequestExpr_Function_SearchText) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequestExpr_Function_SearchText.ProtoReflect.Descriptor instead.
func (*QueryRequestExpr_Function_SearchText) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{1, 6, 1}
}

func (x *QueryRequestExpr_Function_SearchText) GetExpr() *QueryRequestExpr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *QueryRequestExpr_Function_SearchText) GetRawQuery() string {
	if x != nil {
		return x.RawQuery
	}
	return ""
}

func (x *QueryRequestExpr_Function_SearchText) GetTokens() []string {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type QueryRequestExpr_Function_StartsWith struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr   *QueryRequestExpr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	Prefix string            `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *QueryRequestExpr_Function_StartsWith) Reset() {
	*x = QueryRequestExpr_Function_StartsWith{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequestExpr_Function_StartsWith) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestExpr_Function_StartsWith) ProtoMessage() {}

func (x *QueryRequestExpr_Function_StartsWith) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequestExpr_Function_StartsWith.ProtoReflect.Descriptor instead.
func (*QueryRequestExpr_Function_StartsWith) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{1, 6, 2}
}

func (x *QueryRequestExpr_Function_StartsWith) GetExpr() *QueryRequestExpr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *QueryRequestExpr_Function_StartsWith) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type QueryRequestExpr_Function_EndsWith struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr   *QueryRequestExpr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	Suffix string            `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
}

func (x *QueryRequestExpr_Function_EndsWith) Reset() {
	*x = QueryRequestExpr_Function_EndsWith{}
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequestExpr_Function_EndsWith) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestExpr_Function_EndsWith) ProtoMessage() {}

func (x *QueryRequestExpr_Function_EndsWith) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_query_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequestExpr_Function_EndsWith.ProtoReflect.Descriptor instead.
func (*QueryRequestExpr_Function_EndsWith) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP(), []int{1, 6, 3}
}

func (x *QueryRequestExpr_Function_EndsWith) GetExpr() *QueryRequestExpr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *QueryRequestExpr_Function_EndsWith) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

var File_com_coralogix_schemastore_v1_query_proto protoreflect.FileDescriptor

var file_com_coralogix_schemastore_v1_query_proto_rawDesc = []byte{
	0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0xf9, 0x10, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x52, 0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x5c, 0x0a, 0x0b, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x46, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x70, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12,
	0x55, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x72, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb3, 0x01, 0x0a, 0x07, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x18, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x06, 0x0a, 0x04,
	0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x5a, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x50,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x2e,
	0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68,
	0x1a, 0x6e, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x1a, 0xdf, 0x01, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x42, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x12, 0x47, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x44, 0x0a, 0x05,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x1a, 0x49, 0x0a, 0x03, 0x4e, 0x6f, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x1a, 0xee, 0x06,
	0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x0b, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x65, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x65, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12,
	0x5f, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x72, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x1a, 0x66, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x42,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x1a, 0x85, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x61, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x1a, 0x68, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x42,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x66, 0x0a, 0x08, 0x45, 0x6e,
	0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92,
	0x01, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x45, 0x51, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x54, 0x5f, 0x45, 0x51, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x54, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x44,
	0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4f,
	0x52, 0x10, 0x06, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x3d, 0x0a, 0x0d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x7d, 0x0a, 0x17, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_com_coralogix_schemastore_v1_query_proto_rawDescOnce sync.Once
	file_com_coralogix_schemastore_v1_query_proto_rawDescData = file_com_coralogix_schemastore_v1_query_proto_rawDesc
)

func file_com_coralogix_schemastore_v1_query_proto_rawDescGZIP() []byte {
	file_com_coralogix_schemastore_v1_query_proto_rawDescOnce.Do(func() {
		file_com_coralogix_schemastore_v1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_schemastore_v1_query_proto_rawDescData)
	})
	return file_com_coralogix_schemastore_v1_query_proto_rawDescData
}

var file_com_coralogix_schemastore_v1_query_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_coralogix_schemastore_v1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_com_coralogix_schemastore_v1_query_proto_goTypes = []any{
	(QueryRequestExpr_Operator)(0),               // 0: com.coralogix.schemastore.v1.QueryRequestExpr.Operator
	(*QueryRequest)(nil),                         // 1: com.coralogix.schemastore.v1.QueryRequest
	(*QueryRequestExpr)(nil),                     // 2: com.coralogix.schemastore.v1.QueryRequestExpr
	(*QueryResponse)(nil),                        // 3: com.coralogix.schemastore.v1.QueryResponse
	(*QueryRequestExpr_Literal)(nil),             // 4: com.coralogix.schemastore.v1.QueryRequestExpr.Literal
	(*QueryRequestExpr_Null)(nil),                // 5: com.coralogix.schemastore.v1.QueryRequestExpr.Null
	(*QueryRequestExpr_Column)(nil),              // 6: com.coralogix.schemastore.v1.QueryRequestExpr.Column
	(*QueryRequestExpr_Keypath)(nil),             // 7: com.coralogix.schemastore.v1.QueryRequestExpr.Keypath
	(*QueryRequestExpr_BinaryExpr)(nil),          // 8: com.coralogix.schemastore.v1.QueryRequestExpr.BinaryExpr
	(*QueryRequestExpr_Not)(nil),                 // 9: com.coralogix.schemastore.v1.QueryRequestExpr.Not
	(*QueryRequestExpr_Function)(nil),            // 10: com.coralogix.schemastore.v1.QueryRequestExpr.Function
	(*QueryRequestExpr_Function_RegexMatch)(nil), // 11: com.coralogix.schemastore.v1.QueryRequestExpr.Function.RegexMatch
	(*QueryRequestExpr_Function_SearchText)(nil), // 12: com.coralogix.schemastore.v1.QueryRequestExpr.Function.SearchText
	(*QueryRequestExpr_Function_StartsWith)(nil), // 13: com.coralogix.schemastore.v1.QueryRequestExpr.Function.StartsWith
	(*QueryRequestExpr_Function_EndsWith)(nil),   // 14: com.coralogix.schemastore.v1.QueryRequestExpr.Function.EndsWith
	(*timestamppb.Timestamp)(nil),                // 15: google.protobuf.Timestamp
	(DatasetScope)(0),                            // 16: com.coralogix.schemastore.v1.DatasetScope
}
var file_com_coralogix_schemastore_v1_query_proto_depIdxs = []int32{
	2,  // 0: com.coralogix.schemastore.v1.QueryRequest.filters:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr
	4,  // 1: com.coralogix.schemastore.v1.QueryRequestExpr.literal:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr.Literal
	6,  // 2: com.coralogix.schemastore.v1.QueryRequestExpr.column:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr.Column
	8,  // 3: com.coralogix.schemastore.v1.QueryRequestExpr.binary_expr:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr.BinaryExpr
	9,  // 4: com.coralogix.schemastore.v1.QueryRequestExpr.not:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr.Not
	10, // 5: com.coralogix.schemastore.v1.QueryRequestExpr.function:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr.Function
	5,  // 6: com.coralogix.schemastore.v1.QueryRequestExpr.Literal.null:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr.Null
	15, // 7: com.coralogix.schemastore.v1.QueryRequestExpr.Literal.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 8: com.coralogix.schemastore.v1.QueryRequestExpr.Column.keypath:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr.Keypath
	16, // 9: com.coralogix.schemastore.v1.QueryRequestExpr.Keypath.dataset_scope:type_name -> com.coralogix.schemastore.v1.DatasetScope
	2,  // 10: com.coralogix.schemastore.v1.QueryRequestExpr.BinaryExpr.left:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr
	0,  // 11: com.coralogix.schemastore.v1.QueryRequestExpr.BinaryExpr.op:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr.Operator
	2,  // 12: com.coralogix.schemastore.v1.QueryRequestExpr.BinaryExpr.right:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr
	2,  // 13: com.coralogix.schemastore.v1.QueryRequestExpr.Not.expr:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr
	11, // 14: com.coralogix.schemastore.v1.QueryRequestExpr.Function.regex_match:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr.Function.RegexMatch
	12, // 15: com.coralogix.schemastore.v1.QueryRequestExpr.Function.search_text:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr.Function.SearchText
	13, // 16: com.coralogix.schemastore.v1.QueryRequestExpr.Function.starts_with:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr.Function.StartsWith
	14, // 17: com.coralogix.schemastore.v1.QueryRequestExpr.Function.ends_with:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr.Function.EndsWith
	2,  // 18: com.coralogix.schemastore.v1.QueryRequestExpr.Function.RegexMatch.expr:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr
	2,  // 19: com.coralogix.schemastore.v1.QueryRequestExpr.Function.SearchText.expr:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr
	2,  // 20: com.coralogix.schemastore.v1.QueryRequestExpr.Function.StartsWith.expr:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr
	2,  // 21: com.coralogix.schemastore.v1.QueryRequestExpr.Function.EndsWith.expr:type_name -> com.coralogix.schemastore.v1.QueryRequestExpr
	1,  // 22: com.coralogix.schemastore.v1.SchemaStoreQueryService.Query:input_type -> com.coralogix.schemastore.v1.QueryRequest
	3,  // 23: com.coralogix.schemastore.v1.SchemaStoreQueryService.Query:output_type -> com.coralogix.schemastore.v1.QueryResponse
	23, // [23:24] is the sub-list for method output_type
	22, // [22:23] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_com_coralogix_schemastore_v1_query_proto_init() }
func file_com_coralogix_schemastore_v1_query_proto_init() {
	if File_com_coralogix_schemastore_v1_query_proto != nil {
		return
	}
	file_com_coralogix_schemastore_v1_common_proto_init()
	file_com_coralogix_schemastore_v1_query_proto_msgTypes[0].OneofWrappers = []any{}
	file_com_coralogix_schemastore_v1_query_proto_msgTypes[1].OneofWrappers = []any{
		(*QueryRequestExpr_Literal_)(nil),
		(*QueryRequestExpr_Column_)(nil),
		(*QueryRequestExpr_BinaryExpr_)(nil),
		(*QueryRequestExpr_Not_)(nil),
		(*QueryRequestExpr_Function_)(nil),
	}
	file_com_coralogix_schemastore_v1_query_proto_msgTypes[3].OneofWrappers = []any{
		(*QueryRequestExpr_Literal_Null)(nil),
		(*QueryRequestExpr_Literal_String_)(nil),
		(*QueryRequestExpr_Literal_Timestamp)(nil),
	}
	file_com_coralogix_schemastore_v1_query_proto_msgTypes[9].OneofWrappers = []any{
		(*QueryRequestExpr_Function_RegexMatch_)(nil),
		(*QueryRequestExpr_Function_SearchText_)(nil),
		(*QueryRequestExpr_Function_StartsWith_)(nil),
		(*QueryRequestExpr_Function_EndsWith_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_schemastore_v1_query_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogix_schemastore_v1_query_proto_goTypes,
		DependencyIndexes: file_com_coralogix_schemastore_v1_query_proto_depIdxs,
		EnumInfos:         file_com_coralogix_schemastore_v1_query_proto_enumTypes,
		MessageInfos:      file_com_coralogix_schemastore_v1_query_proto_msgTypes,
	}.Build()
	File_com_coralogix_schemastore_v1_query_proto = out.File
	file_com_coralogix_schemastore_v1_query_proto_rawDesc = nil
	file_com_coralogix_schemastore_v1_query_proto_goTypes = nil
	file_com_coralogix_schemastore_v1_query_proto_depIdxs = nil
}
