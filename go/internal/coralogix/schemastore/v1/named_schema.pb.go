// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: com/coralogix/schemastore/v1/named_schema.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateNamedSchemaOnConflict int32

const (
	CreateNamedSchemaOnConflict_CREATE_NAMED_SCHEMA_ON_CONFLICT_FAIL_UNSPECIFIED CreateNamedSchemaOnConflict = 0
	CreateNamedSchemaOnConflict_CREATE_NAMED_SCHEMA_ON_CONFLICT_REPLACE          CreateNamedSchemaOnConflict = 1
)

// Enum value maps for CreateNamedSchemaOnConflict.
var (
	CreateNamedSchemaOnConflict_name = map[int32]string{
		0: "CREATE_NAMED_SCHEMA_ON_CONFLICT_FAIL_UNSPECIFIED",
		1: "CREATE_NAMED_SCHEMA_ON_CONFLICT_REPLACE",
	}
	CreateNamedSchemaOnConflict_value = map[string]int32{
		"CREATE_NAMED_SCHEMA_ON_CONFLICT_FAIL_UNSPECIFIED": 0,
		"CREATE_NAMED_SCHEMA_ON_CONFLICT_REPLACE":          1,
	}
)

func (x CreateNamedSchemaOnConflict) Enum() *CreateNamedSchemaOnConflict {
	p := new(CreateNamedSchemaOnConflict)
	*p = x
	return p
}

func (x CreateNamedSchemaOnConflict) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateNamedSchemaOnConflict) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_named_schema_proto_enumTypes[0].Descriptor()
}

func (CreateNamedSchemaOnConflict) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_named_schema_proto_enumTypes[0]
}

func (x CreateNamedSchemaOnConflict) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateNamedSchemaOnConflict.Descriptor instead.
func (CreateNamedSchemaOnConflict) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{0}
}

type NamedSchemaTemplateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathArray       []string `protobuf:"bytes,1,rep,name=path_array,json=pathArray,proto3" json:"path_array,omitempty"`
	DataType        DataType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=com.coralogix.schemastore.v1.DataType" json:"data_type,omitempty"`
	LogicalDataType string   `protobuf:"bytes,3,opt,name=logical_data_type,json=logicalDataType,proto3" json:"logical_data_type,omitempty"`
}

func (x *NamedSchemaTemplateField) Reset() {
	*x = NamedSchemaTemplateField{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedSchemaTemplateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedSchemaTemplateField) ProtoMessage() {}

func (x *NamedSchemaTemplateField) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedSchemaTemplateField.ProtoReflect.Descriptor instead.
func (*NamedSchemaTemplateField) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{0}
}

func (x *NamedSchemaTemplateField) GetPathArray() []string {
	if x != nil {
		return x.PathArray
	}
	return nil
}

func (x *NamedSchemaTemplateField) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DATA_TYPE_UNSPECIFIED
}

func (x *NamedSchemaTemplateField) GetLogicalDataType() string {
	if x != nil {
		return x.LogicalDataType
	}
	return ""
}

type NamedSchemaTemplateId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateType *NamedSchemaTemplateType `protobuf:"bytes,1,opt,name=template_type,json=templateType,proto3" json:"template_type,omitempty"`
	TemplateName string                   `protobuf:"bytes,2,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
}

func (x *NamedSchemaTemplateId) Reset() {
	*x = NamedSchemaTemplateId{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedSchemaTemplateId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedSchemaTemplateId) ProtoMessage() {}

func (x *NamedSchemaTemplateId) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedSchemaTemplateId.ProtoReflect.Descriptor instead.
func (*NamedSchemaTemplateId) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{1}
}

func (x *NamedSchemaTemplateId) GetTemplateType() *NamedSchemaTemplateType {
	if x != nil {
		return x.TemplateType
	}
	return nil
}

func (x *NamedSchemaTemplateId) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

type NamedSchemaTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *NamedSchemaTemplateId      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields []*NamedSchemaTemplateField `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *NamedSchemaTemplate) Reset() {
	*x = NamedSchemaTemplate{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedSchemaTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedSchemaTemplate) ProtoMessage() {}

func (x *NamedSchemaTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedSchemaTemplate.ProtoReflect.Descriptor instead.
func (*NamedSchemaTemplate) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{2}
}

func (x *NamedSchemaTemplate) GetId() *NamedSchemaTemplateId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NamedSchemaTemplate) GetFields() []*NamedSchemaTemplateField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type NamedSchemaTemplateType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TemplateType:
	//
	//	*NamedSchemaTemplateType_GlobalTemplate
	//	*NamedSchemaTemplateType_CompanyTemplate
	TemplateType isNamedSchemaTemplateType_TemplateType `protobuf_oneof:"template_type"`
}

func (x *NamedSchemaTemplateType) Reset() {
	*x = NamedSchemaTemplateType{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedSchemaTemplateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedSchemaTemplateType) ProtoMessage() {}

func (x *NamedSchemaTemplateType) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedSchemaTemplateType.ProtoReflect.Descriptor instead.
func (*NamedSchemaTemplateType) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{3}
}

func (m *NamedSchemaTemplateType) GetTemplateType() isNamedSchemaTemplateType_TemplateType {
	if m != nil {
		return m.TemplateType
	}
	return nil
}

func (x *NamedSchemaTemplateType) GetGlobalTemplate() *GlobalNamedSchemaTemplate {
	if x, ok := x.GetTemplateType().(*NamedSchemaTemplateType_GlobalTemplate); ok {
		return x.GlobalTemplate
	}
	return nil
}

func (x *NamedSchemaTemplateType) GetCompanyTemplate() *CompanyNamedSchemaTemplate {
	if x, ok := x.GetTemplateType().(*NamedSchemaTemplateType_CompanyTemplate); ok {
		return x.CompanyTemplate
	}
	return nil
}

type isNamedSchemaTemplateType_TemplateType interface {
	isNamedSchemaTemplateType_TemplateType()
}

type NamedSchemaTemplateType_GlobalTemplate struct {
	GlobalTemplate *GlobalNamedSchemaTemplate `protobuf:"bytes,1,opt,name=global_template,json=globalTemplate,proto3,oneof"`
}

type NamedSchemaTemplateType_CompanyTemplate struct {
	CompanyTemplate *CompanyNamedSchemaTemplate `protobuf:"bytes,2,opt,name=company_template,json=companyTemplate,proto3,oneof"`
}

func (*NamedSchemaTemplateType_GlobalTemplate) isNamedSchemaTemplateType_TemplateType() {}

func (*NamedSchemaTemplateType_CompanyTemplate) isNamedSchemaTemplateType_TemplateType() {}

type GlobalNamedSchemaTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GlobalNamedSchemaTemplate) Reset() {
	*x = GlobalNamedSchemaTemplate{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalNamedSchemaTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalNamedSchemaTemplate) ProtoMessage() {}

func (x *GlobalNamedSchemaTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalNamedSchemaTemplate.ProtoReflect.Descriptor instead.
func (*GlobalNamedSchemaTemplate) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{4}
}

type CompanyNamedSchemaTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId uint32 `protobuf:"varint,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *CompanyNamedSchemaTemplate) Reset() {
	*x = CompanyNamedSchemaTemplate{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyNamedSchemaTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyNamedSchemaTemplate) ProtoMessage() {}

func (x *CompanyNamedSchemaTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyNamedSchemaTemplate.ProtoReflect.Descriptor instead.
func (*CompanyNamedSchemaTemplate) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{5}
}

func (x *CompanyNamedSchemaTemplate) GetCompanyId() uint32 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

type CreateNamedSchemaTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema     *NamedSchemaTemplate        `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	OnConflict CreateNamedSchemaOnConflict `protobuf:"varint,2,opt,name=on_conflict,json=onConflict,proto3,enum=com.coralogix.schemastore.v1.CreateNamedSchemaOnConflict" json:"on_conflict,omitempty"`
}

func (x *CreateNamedSchemaTemplateRequest) Reset() {
	*x = CreateNamedSchemaTemplateRequest{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNamedSchemaTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamedSchemaTemplateRequest) ProtoMessage() {}

func (x *CreateNamedSchemaTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamedSchemaTemplateRequest.ProtoReflect.Descriptor instead.
func (*CreateNamedSchemaTemplateRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{6}
}

func (x *CreateNamedSchemaTemplateRequest) GetSchema() *NamedSchemaTemplate {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CreateNamedSchemaTemplateRequest) GetOnConflict() CreateNamedSchemaOnConflict {
	if x != nil {
		return x.OnConflict
	}
	return CreateNamedSchemaOnConflict_CREATE_NAMED_SCHEMA_ON_CONFLICT_FAIL_UNSPECIFIED
}

type CreateNamedSchemaTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema *NamedSchemaTemplate `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *CreateNamedSchemaTemplateResponse) Reset() {
	*x = CreateNamedSchemaTemplateResponse{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNamedSchemaTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamedSchemaTemplateResponse) ProtoMessage() {}

func (x *CreateNamedSchemaTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamedSchemaTemplateResponse.ProtoReflect.Descriptor instead.
func (*CreateNamedSchemaTemplateResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{7}
}

func (x *CreateNamedSchemaTemplateResponse) GetSchema() *NamedSchemaTemplate {
	if x != nil {
		return x.Schema
	}
	return nil
}

type GetNamedSchemaTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *NamedSchemaTemplateId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetNamedSchemaTemplateRequest) Reset() {
	*x = GetNamedSchemaTemplateRequest{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNamedSchemaTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamedSchemaTemplateRequest) ProtoMessage() {}

func (x *GetNamedSchemaTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamedSchemaTemplateRequest.ProtoReflect.Descriptor instead.
func (*GetNamedSchemaTemplateRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{8}
}

func (x *GetNamedSchemaTemplateRequest) GetId() *NamedSchemaTemplateId {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetNamedSchemaTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema *NamedSchemaTemplate `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *GetNamedSchemaTemplateResponse) Reset() {
	*x = GetNamedSchemaTemplateResponse{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNamedSchemaTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamedSchemaTemplateResponse) ProtoMessage() {}

func (x *GetNamedSchemaTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamedSchemaTemplateResponse.ProtoReflect.Descriptor instead.
func (*GetNamedSchemaTemplateResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{9}
}

func (x *GetNamedSchemaTemplateResponse) GetSchema() *NamedSchemaTemplate {
	if x != nil {
		return x.Schema
	}
	return nil
}

type ListNamedSchemaTemplatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateType *NamedSchemaTemplateType `protobuf:"bytes,1,opt,name=template_type,json=templateType,proto3" json:"template_type,omitempty"`
	Limit        uint32                   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListNamedSchemaTemplatesRequest) Reset() {
	*x = ListNamedSchemaTemplatesRequest{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamedSchemaTemplatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamedSchemaTemplatesRequest) ProtoMessage() {}

func (x *ListNamedSchemaTemplatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamedSchemaTemplatesRequest.ProtoReflect.Descriptor instead.
func (*ListNamedSchemaTemplatesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{10}
}

func (x *ListNamedSchemaTemplatesRequest) GetTemplateType() *NamedSchemaTemplateType {
	if x != nil {
		return x.TemplateType
	}
	return nil
}

func (x *ListNamedSchemaTemplatesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListNamedSchemaTemplatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateNames []string `protobuf:"bytes,1,rep,name=template_names,json=templateNames,proto3" json:"template_names,omitempty"`
}

func (x *ListNamedSchemaTemplatesResponse) Reset() {
	*x = ListNamedSchemaTemplatesResponse{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamedSchemaTemplatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamedSchemaTemplatesResponse) ProtoMessage() {}

func (x *ListNamedSchemaTemplatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamedSchemaTemplatesResponse.ProtoReflect.Descriptor instead.
func (*ListNamedSchemaTemplatesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{11}
}

func (x *ListNamedSchemaTemplatesResponse) GetTemplateNames() []string {
	if x != nil {
		return x.TemplateNames
	}
	return nil
}

type DeleteNamedSchemaTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *NamedSchemaTemplateId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteNamedSchemaTemplateRequest) Reset() {
	*x = DeleteNamedSchemaTemplateRequest{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNamedSchemaTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamedSchemaTemplateRequest) ProtoMessage() {}

func (x *DeleteNamedSchemaTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamedSchemaTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteNamedSchemaTemplateRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteNamedSchemaTemplateRequest) GetId() *NamedSchemaTemplateId {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeleteNamedSchemaTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteNamedSchemaTemplateResponse) Reset() {
	*x = DeleteNamedSchemaTemplateResponse{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNamedSchemaTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamedSchemaTemplateResponse) ProtoMessage() {}

func (x *DeleteNamedSchemaTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamedSchemaTemplateResponse.ProtoReflect.Descriptor instead.
func (*DeleteNamedSchemaTemplateResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{13}
}

// Company specific variants
type CreateCompanyNamedSchemaTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName string                      `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	Fields     []*NamedSchemaTemplateField `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	OnConflict CreateNamedSchemaOnConflict `protobuf:"varint,3,opt,name=on_conflict,json=onConflict,proto3,enum=com.coralogix.schemastore.v1.CreateNamedSchemaOnConflict" json:"on_conflict,omitempty"`
}

func (x *CreateCompanyNamedSchemaTemplateRequest) Reset() {
	*x = CreateCompanyNamedSchemaTemplateRequest{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCompanyNamedSchemaTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyNamedSchemaTemplateRequest) ProtoMessage() {}

func (x *CreateCompanyNamedSchemaTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyNamedSchemaTemplateRequest.ProtoReflect.Descriptor instead.
func (*CreateCompanyNamedSchemaTemplateRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{14}
}

func (x *CreateCompanyNamedSchemaTemplateRequest) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *CreateCompanyNamedSchemaTemplateRequest) GetFields() []*NamedSchemaTemplateField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CreateCompanyNamedSchemaTemplateRequest) GetOnConflict() CreateNamedSchemaOnConflict {
	if x != nil {
		return x.OnConflict
	}
	return CreateNamedSchemaOnConflict_CREATE_NAMED_SCHEMA_ON_CONFLICT_FAIL_UNSPECIFIED
}

type CreateCompanyNamedSchemaTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema *NamedSchemaTemplate `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *CreateCompanyNamedSchemaTemplateResponse) Reset() {
	*x = CreateCompanyNamedSchemaTemplateResponse{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCompanyNamedSchemaTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyNamedSchemaTemplateResponse) ProtoMessage() {}

func (x *CreateCompanyNamedSchemaTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyNamedSchemaTemplateResponse.ProtoReflect.Descriptor instead.
func (*CreateCompanyNamedSchemaTemplateResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{15}
}

func (x *CreateCompanyNamedSchemaTemplateResponse) GetSchema() *NamedSchemaTemplate {
	if x != nil {
		return x.Schema
	}
	return nil
}

type GetCompanyNamedSchemaTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName string `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
}

func (x *GetCompanyNamedSchemaTemplateRequest) Reset() {
	*x = GetCompanyNamedSchemaTemplateRequest{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompanyNamedSchemaTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyNamedSchemaTemplateRequest) ProtoMessage() {}

func (x *GetCompanyNamedSchemaTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyNamedSchemaTemplateRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyNamedSchemaTemplateRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{16}
}

func (x *GetCompanyNamedSchemaTemplateRequest) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

type GetCompanyNamedSchemaTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema *NamedSchemaTemplate `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *GetCompanyNamedSchemaTemplateResponse) Reset() {
	*x = GetCompanyNamedSchemaTemplateResponse{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompanyNamedSchemaTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyNamedSchemaTemplateResponse) ProtoMessage() {}

func (x *GetCompanyNamedSchemaTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyNamedSchemaTemplateResponse.ProtoReflect.Descriptor instead.
func (*GetCompanyNamedSchemaTemplateResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{17}
}

func (x *GetCompanyNamedSchemaTemplateResponse) GetSchema() *NamedSchemaTemplate {
	if x != nil {
		return x.Schema
	}
	return nil
}

type ListCompanyNamedSchemaTemplatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListCompanyNamedSchemaTemplatesRequest) Reset() {
	*x = ListCompanyNamedSchemaTemplatesRequest{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCompanyNamedSchemaTemplatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyNamedSchemaTemplatesRequest) ProtoMessage() {}

func (x *ListCompanyNamedSchemaTemplatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyNamedSchemaTemplatesRequest.ProtoReflect.Descriptor instead.
func (*ListCompanyNamedSchemaTemplatesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{18}
}

func (x *ListCompanyNamedSchemaTemplatesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListCompanyNamedSchemaTemplatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateNames []string `protobuf:"bytes,1,rep,name=template_names,json=templateNames,proto3" json:"template_names,omitempty"`
}

func (x *ListCompanyNamedSchemaTemplatesResponse) Reset() {
	*x = ListCompanyNamedSchemaTemplatesResponse{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCompanyNamedSchemaTemplatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyNamedSchemaTemplatesResponse) ProtoMessage() {}

func (x *ListCompanyNamedSchemaTemplatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyNamedSchemaTemplatesResponse.ProtoReflect.Descriptor instead.
func (*ListCompanyNamedSchemaTemplatesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{19}
}

func (x *ListCompanyNamedSchemaTemplatesResponse) GetTemplateNames() []string {
	if x != nil {
		return x.TemplateNames
	}
	return nil
}

type DeleteCompanyNamedSchemaTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName string `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
}

func (x *DeleteCompanyNamedSchemaTemplateRequest) Reset() {
	*x = DeleteCompanyNamedSchemaTemplateRequest{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCompanyNamedSchemaTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCompanyNamedSchemaTemplateRequest) ProtoMessage() {}

func (x *DeleteCompanyNamedSchemaTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCompanyNamedSchemaTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteCompanyNamedSchemaTemplateRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteCompanyNamedSchemaTemplateRequest) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

type DeleteCompanyNamedSchemaTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCompanyNamedSchemaTemplateResponse) Reset() {
	*x = DeleteCompanyNamedSchemaTemplateResponse{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCompanyNamedSchemaTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCompanyNamedSchemaTemplateResponse) ProtoMessage() {}

func (x *DeleteCompanyNamedSchemaTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCompanyNamedSchemaTemplateResponse.ProtoReflect.Descriptor instead.
func (*DeleteCompanyNamedSchemaTemplateResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{21}
}

type GetMergedNamedSchemaTemplateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*NamedSchemaTemplateId `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetMergedNamedSchemaTemplateFieldsRequest) Reset() {
	*x = GetMergedNamedSchemaTemplateFieldsRequest{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMergedNamedSchemaTemplateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMergedNamedSchemaTemplateFieldsRequest) ProtoMessage() {}

func (x *GetMergedNamedSchemaTemplateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMergedNamedSchemaTemplateFieldsRequest.ProtoReflect.Descriptor instead.
func (*GetMergedNamedSchemaTemplateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{22}
}

func (x *GetMergedNamedSchemaTemplateFieldsRequest) GetIds() []*NamedSchemaTemplateId {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetMergedNamedSchemaTemplateFieldsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*MergedNamedSchemaTemplateField `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetMergedNamedSchemaTemplateFieldsResponse) Reset() {
	*x = GetMergedNamedSchemaTemplateFieldsResponse{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMergedNamedSchemaTemplateFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMergedNamedSchemaTemplateFieldsResponse) ProtoMessage() {}

func (x *GetMergedNamedSchemaTemplateFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMergedNamedSchemaTemplateFieldsResponse.ProtoReflect.Descriptor instead.
func (*GetMergedNamedSchemaTemplateFieldsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{23}
}

func (x *GetMergedNamedSchemaTemplateFieldsResponse) GetFields() []*MergedNamedSchemaTemplateField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type MergedNamedSchemaTemplateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathArray []string `protobuf:"bytes,1,rep,name=path_array,json=pathArray,proto3" json:"path_array,omitempty"`
	// One set of data types per occurance of the field in the templates
	DataTypes []*NamedSchemaDataType `protobuf:"bytes,2,rep,name=data_types,json=dataTypes,proto3" json:"data_types,omitempty"`
}

func (x *MergedNamedSchemaTemplateField) Reset() {
	*x = MergedNamedSchemaTemplateField{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergedNamedSchemaTemplateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergedNamedSchemaTemplateField) ProtoMessage() {}

func (x *MergedNamedSchemaTemplateField) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergedNamedSchemaTemplateField.ProtoReflect.Descriptor instead.
func (*MergedNamedSchemaTemplateField) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{24}
}

func (x *MergedNamedSchemaTemplateField) GetPathArray() []string {
	if x != nil {
		return x.PathArray
	}
	return nil
}

func (x *MergedNamedSchemaTemplateField) GetDataTypes() []*NamedSchemaDataType {
	if x != nil {
		return x.DataTypes
	}
	return nil
}

type NamedSchemaDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType        DataType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=com.coralogix.schemastore.v1.DataType" json:"data_type,omitempty"`
	LogicalDataType string   `protobuf:"bytes,3,opt,name=logical_data_type,json=logicalDataType,proto3" json:"logical_data_type,omitempty"`
}

func (x *NamedSchemaDataType) Reset() {
	*x = NamedSchemaDataType{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedSchemaDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedSchemaDataType) ProtoMessage() {}

func (x *NamedSchemaDataType) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedSchemaDataType.ProtoReflect.Descriptor instead.
func (*NamedSchemaDataType) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{25}
}

func (x *NamedSchemaDataType) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DATA_TYPE_UNSPECIFIED
}

func (x *NamedSchemaDataType) GetLogicalDataType() string {
	if x != nil {
		return x.LogicalDataType
	}
	return ""
}

type BatchGetNamedSchemaTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []*NamedSchemaTemplateId `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *BatchGetNamedSchemaTemplateRequest) Reset() {
	*x = BatchGetNamedSchemaTemplateRequest{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetNamedSchemaTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetNamedSchemaTemplateRequest) ProtoMessage() {}

func (x *BatchGetNamedSchemaTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetNamedSchemaTemplateRequest.ProtoReflect.Descriptor instead.
func (*BatchGetNamedSchemaTemplateRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{26}
}

func (x *BatchGetNamedSchemaTemplateRequest) GetId() []*NamedSchemaTemplateId {
	if x != nil {
		return x.Id
	}
	return nil
}

type BatchGetNamedSchemaTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema []*NamedSchemaTemplate `protobuf:"bytes,1,rep,name=schema,proto3" json:"schema,omitempty"`
}

func (x *BatchGetNamedSchemaTemplateResponse) Reset() {
	*x = BatchGetNamedSchemaTemplateResponse{}
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetNamedSchemaTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetNamedSchemaTemplateResponse) ProtoMessage() {}

func (x *BatchGetNamedSchemaTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetNamedSchemaTemplateResponse.ProtoReflect.Descriptor instead.
func (*BatchGetNamedSchemaTemplateResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP(), []int{27}
}

func (x *BatchGetNamedSchemaTemplateResponse) GetSchema() []*NamedSchemaTemplate {
	if x != nil {
		return x.Schema
	}
	return nil
}

var File_com_coralogix_schemastore_v1_named_schema_proto protoreflect.FileDescriptor

var file_com_coralogix_schemastore_v1_named_schema_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x29, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x18, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74,
	0x68, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x15, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x5a, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x4e, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0xf5, 0x01, 0x0a, 0x17, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x65, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x22, 0x3b, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x22, 0xc9, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x5a, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x52, 0x0a, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x22, 0x6e, 0x0a,
	0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x64, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x22, 0x99, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x49, 0x0a, 0x20,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x23, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x52, 0x0a, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x22, 0x75,
	0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x47, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x72,
	0x0a, 0x25, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x22, 0x3e, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x50, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x27, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x2a, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x0a, 0x29,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x82, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x1e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x74, 0x68, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x50, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x69, 0x0a, 0x22, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x70, 0x0a,
	0x23, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2a,
	0x80, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12,
	0x34, 0x0a, 0x30, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49,
	0x43, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x10, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_schemastore_v1_named_schema_proto_rawDescOnce sync.Once
	file_com_coralogix_schemastore_v1_named_schema_proto_rawDescData = file_com_coralogix_schemastore_v1_named_schema_proto_rawDesc
)

func file_com_coralogix_schemastore_v1_named_schema_proto_rawDescGZIP() []byte {
	file_com_coralogix_schemastore_v1_named_schema_proto_rawDescOnce.Do(func() {
		file_com_coralogix_schemastore_v1_named_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_schemastore_v1_named_schema_proto_rawDescData)
	})
	return file_com_coralogix_schemastore_v1_named_schema_proto_rawDescData
}

var file_com_coralogix_schemastore_v1_named_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_com_coralogix_schemastore_v1_named_schema_proto_goTypes = []any{
	(CreateNamedSchemaOnConflict)(0),                   // 0: com.coralogix.schemastore.v1.CreateNamedSchemaOnConflict
	(*NamedSchemaTemplateField)(nil),                   // 1: com.coralogix.schemastore.v1.NamedSchemaTemplateField
	(*NamedSchemaTemplateId)(nil),                      // 2: com.coralogix.schemastore.v1.NamedSchemaTemplateId
	(*NamedSchemaTemplate)(nil),                        // 3: com.coralogix.schemastore.v1.NamedSchemaTemplate
	(*NamedSchemaTemplateType)(nil),                    // 4: com.coralogix.schemastore.v1.NamedSchemaTemplateType
	(*GlobalNamedSchemaTemplate)(nil),                  // 5: com.coralogix.schemastore.v1.GlobalNamedSchemaTemplate
	(*CompanyNamedSchemaTemplate)(nil),                 // 6: com.coralogix.schemastore.v1.CompanyNamedSchemaTemplate
	(*CreateNamedSchemaTemplateRequest)(nil),           // 7: com.coralogix.schemastore.v1.CreateNamedSchemaTemplateRequest
	(*CreateNamedSchemaTemplateResponse)(nil),          // 8: com.coralogix.schemastore.v1.CreateNamedSchemaTemplateResponse
	(*GetNamedSchemaTemplateRequest)(nil),              // 9: com.coralogix.schemastore.v1.GetNamedSchemaTemplateRequest
	(*GetNamedSchemaTemplateResponse)(nil),             // 10: com.coralogix.schemastore.v1.GetNamedSchemaTemplateResponse
	(*ListNamedSchemaTemplatesRequest)(nil),            // 11: com.coralogix.schemastore.v1.ListNamedSchemaTemplatesRequest
	(*ListNamedSchemaTemplatesResponse)(nil),           // 12: com.coralogix.schemastore.v1.ListNamedSchemaTemplatesResponse
	(*DeleteNamedSchemaTemplateRequest)(nil),           // 13: com.coralogix.schemastore.v1.DeleteNamedSchemaTemplateRequest
	(*DeleteNamedSchemaTemplateResponse)(nil),          // 14: com.coralogix.schemastore.v1.DeleteNamedSchemaTemplateResponse
	(*CreateCompanyNamedSchemaTemplateRequest)(nil),    // 15: com.coralogix.schemastore.v1.CreateCompanyNamedSchemaTemplateRequest
	(*CreateCompanyNamedSchemaTemplateResponse)(nil),   // 16: com.coralogix.schemastore.v1.CreateCompanyNamedSchemaTemplateResponse
	(*GetCompanyNamedSchemaTemplateRequest)(nil),       // 17: com.coralogix.schemastore.v1.GetCompanyNamedSchemaTemplateRequest
	(*GetCompanyNamedSchemaTemplateResponse)(nil),      // 18: com.coralogix.schemastore.v1.GetCompanyNamedSchemaTemplateResponse
	(*ListCompanyNamedSchemaTemplatesRequest)(nil),     // 19: com.coralogix.schemastore.v1.ListCompanyNamedSchemaTemplatesRequest
	(*ListCompanyNamedSchemaTemplatesResponse)(nil),    // 20: com.coralogix.schemastore.v1.ListCompanyNamedSchemaTemplatesResponse
	(*DeleteCompanyNamedSchemaTemplateRequest)(nil),    // 21: com.coralogix.schemastore.v1.DeleteCompanyNamedSchemaTemplateRequest
	(*DeleteCompanyNamedSchemaTemplateResponse)(nil),   // 22: com.coralogix.schemastore.v1.DeleteCompanyNamedSchemaTemplateResponse
	(*GetMergedNamedSchemaTemplateFieldsRequest)(nil),  // 23: com.coralogix.schemastore.v1.GetMergedNamedSchemaTemplateFieldsRequest
	(*GetMergedNamedSchemaTemplateFieldsResponse)(nil), // 24: com.coralogix.schemastore.v1.GetMergedNamedSchemaTemplateFieldsResponse
	(*MergedNamedSchemaTemplateField)(nil),             // 25: com.coralogix.schemastore.v1.MergedNamedSchemaTemplateField
	(*NamedSchemaDataType)(nil),                        // 26: com.coralogix.schemastore.v1.NamedSchemaDataType
	(*BatchGetNamedSchemaTemplateRequest)(nil),         // 27: com.coralogix.schemastore.v1.BatchGetNamedSchemaTemplateRequest
	(*BatchGetNamedSchemaTemplateResponse)(nil),        // 28: com.coralogix.schemastore.v1.BatchGetNamedSchemaTemplateResponse
	(DataType)(0), // 29: com.coralogix.schemastore.v1.DataType
}
var file_com_coralogix_schemastore_v1_named_schema_proto_depIdxs = []int32{
	29, // 0: com.coralogix.schemastore.v1.NamedSchemaTemplateField.data_type:type_name -> com.coralogix.schemastore.v1.DataType
	4,  // 1: com.coralogix.schemastore.v1.NamedSchemaTemplateId.template_type:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplateType
	2,  // 2: com.coralogix.schemastore.v1.NamedSchemaTemplate.id:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplateId
	1,  // 3: com.coralogix.schemastore.v1.NamedSchemaTemplate.fields:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplateField
	5,  // 4: com.coralogix.schemastore.v1.NamedSchemaTemplateType.global_template:type_name -> com.coralogix.schemastore.v1.GlobalNamedSchemaTemplate
	6,  // 5: com.coralogix.schemastore.v1.NamedSchemaTemplateType.company_template:type_name -> com.coralogix.schemastore.v1.CompanyNamedSchemaTemplate
	3,  // 6: com.coralogix.schemastore.v1.CreateNamedSchemaTemplateRequest.schema:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplate
	0,  // 7: com.coralogix.schemastore.v1.CreateNamedSchemaTemplateRequest.on_conflict:type_name -> com.coralogix.schemastore.v1.CreateNamedSchemaOnConflict
	3,  // 8: com.coralogix.schemastore.v1.CreateNamedSchemaTemplateResponse.schema:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplate
	2,  // 9: com.coralogix.schemastore.v1.GetNamedSchemaTemplateRequest.id:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplateId
	3,  // 10: com.coralogix.schemastore.v1.GetNamedSchemaTemplateResponse.schema:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplate
	4,  // 11: com.coralogix.schemastore.v1.ListNamedSchemaTemplatesRequest.template_type:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplateType
	2,  // 12: com.coralogix.schemastore.v1.DeleteNamedSchemaTemplateRequest.id:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplateId
	1,  // 13: com.coralogix.schemastore.v1.CreateCompanyNamedSchemaTemplateRequest.fields:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplateField
	0,  // 14: com.coralogix.schemastore.v1.CreateCompanyNamedSchemaTemplateRequest.on_conflict:type_name -> com.coralogix.schemastore.v1.CreateNamedSchemaOnConflict
	3,  // 15: com.coralogix.schemastore.v1.CreateCompanyNamedSchemaTemplateResponse.schema:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplate
	3,  // 16: com.coralogix.schemastore.v1.GetCompanyNamedSchemaTemplateResponse.schema:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplate
	2,  // 17: com.coralogix.schemastore.v1.GetMergedNamedSchemaTemplateFieldsRequest.ids:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplateId
	25, // 18: com.coralogix.schemastore.v1.GetMergedNamedSchemaTemplateFieldsResponse.fields:type_name -> com.coralogix.schemastore.v1.MergedNamedSchemaTemplateField
	26, // 19: com.coralogix.schemastore.v1.MergedNamedSchemaTemplateField.data_types:type_name -> com.coralogix.schemastore.v1.NamedSchemaDataType
	29, // 20: com.coralogix.schemastore.v1.NamedSchemaDataType.data_type:type_name -> com.coralogix.schemastore.v1.DataType
	2,  // 21: com.coralogix.schemastore.v1.BatchGetNamedSchemaTemplateRequest.id:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplateId
	3,  // 22: com.coralogix.schemastore.v1.BatchGetNamedSchemaTemplateResponse.schema:type_name -> com.coralogix.schemastore.v1.NamedSchemaTemplate
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_com_coralogix_schemastore_v1_named_schema_proto_init() }
func file_com_coralogix_schemastore_v1_named_schema_proto_init() {
	if File_com_coralogix_schemastore_v1_named_schema_proto != nil {
		return
	}
	file_com_coralogix_schemastore_v1_common_proto_init()
	file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes[3].OneofWrappers = []any{
		(*NamedSchemaTemplateType_GlobalTemplate)(nil),
		(*NamedSchemaTemplateType_CompanyTemplate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_schemastore_v1_named_schema_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_schemastore_v1_named_schema_proto_goTypes,
		DependencyIndexes: file_com_coralogix_schemastore_v1_named_schema_proto_depIdxs,
		EnumInfos:         file_com_coralogix_schemastore_v1_named_schema_proto_enumTypes,
		MessageInfos:      file_com_coralogix_schemastore_v1_named_schema_proto_msgTypes,
	}.Build()
	File_com_coralogix_schemastore_v1_named_schema_proto = out.File
	file_com_coralogix_schemastore_v1_named_schema_proto_rawDesc = nil
	file_com_coralogix_schemastore_v1_named_schema_proto_goTypes = nil
	file_com_coralogix_schemastore_v1_named_schema_proto_depIdxs = nil
}
