// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: com/coralogix/schemastore/v1/metrics.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamIds      []uint32       `protobuf:"varint,1,rep,packed,name=team_ids,json=teamIds,proto3" json:"team_ids,omitempty"`
	TimeRange    *TimeRange     `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Name         string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ResultLimit  int32          `protobuf:"varint,4,opt,name=result_limit,json=resultLimit,proto3" json:"result_limit,omitempty"`
	LabelFilters []*LabelFilter `protobuf:"bytes,5,rep,name=label_filters,json=labelFilters,proto3" json:"label_filters,omitempty"`
}

func (x *MetricNamesRequest) Reset() {
	*x = MetricNamesRequest{}
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricNamesRequest) ProtoMessage() {}

func (x *MetricNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricNamesRequest.ProtoReflect.Descriptor instead.
func (*MetricNamesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *MetricNamesRequest) GetTeamIds() []uint32 {
	if x != nil {
		return x.TeamIds
	}
	return nil
}

func (x *MetricNamesRequest) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *MetricNamesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricNamesRequest) GetResultLimit() int32 {
	if x != nil {
		return x.ResultLimit
	}
	return 0
}

func (x *MetricNamesRequest) GetLabelFilters() []*LabelFilter {
	if x != nil {
		return x.LabelFilters
	}
	return nil
}

type MetricNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*MetricField `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *MetricNamesResponse) Reset() {
	*x = MetricNamesResponse{}
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricNamesResponse) ProtoMessage() {}

func (x *MetricNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricNamesResponse.ProtoReflect.Descriptor instead.
func (*MetricNamesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *MetricNamesResponse) GetMetrics() []*MetricField {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type MetricLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamIds   []uint32   `protobuf:"varint,1,rep,packed,name=team_ids,json=teamIds,proto3" json:"team_ids,omitempty"`
	TimeRange *TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// Deprecated: please use exact_names instead
	//
	// Deprecated: Marked as deprecated in com/coralogix/schemastore/v1/metrics.proto.
	ExactName                 string         `protobuf:"bytes,3,opt,name=exact_name,json=exactName,proto3" json:"exact_name,omitempty"`
	ExactNames                []string       `protobuf:"bytes,10,rep,name=exact_names,json=exactNames,proto3" json:"exact_names,omitempty"`
	LabelFilters              []*LabelFilter `protobuf:"bytes,4,rep,name=label_filters,json=labelFilters,proto3" json:"label_filters,omitempty"`
	ResultLabelFilter         []string       `protobuf:"bytes,5,rep,name=result_label_filter,json=resultLabelFilter,proto3" json:"result_label_filter,omitempty"`
	ResultLabelValueFilter    []string       `protobuf:"bytes,8,rep,name=result_label_value_filter,json=resultLabelValueFilter,proto3" json:"result_label_value_filter,omitempty"`
	ResultLabelValueMatchMode MatchMode      `protobuf:"varint,9,opt,name=result_label_value_match_mode,json=resultLabelValueMatchMode,proto3,enum=com.coralogix.schemastore.v1.MatchMode" json:"result_label_value_match_mode,omitempty"`
	ResultLimit               int32          `protobuf:"varint,6,opt,name=result_limit,json=resultLimit,proto3" json:"result_limit,omitempty"`
	LabelValuesPerResult      int32          `protobuf:"varint,7,opt,name=label_values_per_result,json=labelValuesPerResult,proto3" json:"label_values_per_result,omitempty"`
}

func (x *MetricLabelsRequest) Reset() {
	*x = MetricLabelsRequest{}
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricLabelsRequest) ProtoMessage() {}

func (x *MetricLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricLabelsRequest.ProtoReflect.Descriptor instead.
func (*MetricLabelsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *MetricLabelsRequest) GetTeamIds() []uint32 {
	if x != nil {
		return x.TeamIds
	}
	return nil
}

func (x *MetricLabelsRequest) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogix/schemastore/v1/metrics.proto.
func (x *MetricLabelsRequest) GetExactName() string {
	if x != nil {
		return x.ExactName
	}
	return ""
}

func (x *MetricLabelsRequest) GetExactNames() []string {
	if x != nil {
		return x.ExactNames
	}
	return nil
}

func (x *MetricLabelsRequest) GetLabelFilters() []*LabelFilter {
	if x != nil {
		return x.LabelFilters
	}
	return nil
}

func (x *MetricLabelsRequest) GetResultLabelFilter() []string {
	if x != nil {
		return x.ResultLabelFilter
	}
	return nil
}

func (x *MetricLabelsRequest) GetResultLabelValueFilter() []string {
	if x != nil {
		return x.ResultLabelValueFilter
	}
	return nil
}

func (x *MetricLabelsRequest) GetResultLabelValueMatchMode() MatchMode {
	if x != nil {
		return x.ResultLabelValueMatchMode
	}
	return MatchMode_MATCH_MODE_UNSPECIFIED
}

func (x *MetricLabelsRequest) GetResultLimit() int32 {
	if x != nil {
		return x.ResultLimit
	}
	return 0
}

func (x *MetricLabelsRequest) GetLabelValuesPerResult() int32 {
	if x != nil {
		return x.LabelValuesPerResult
	}
	return 0
}

type MetricLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Returned when no names are specified in the request
	Labels []*MetricLabel `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// Returned when a labels for list of exact_names is requested
	LabelsByName []*MetricLabelsByName `protobuf:"bytes,2,rep,name=labels_by_name,json=labelsByName,proto3" json:"labels_by_name,omitempty"`
}

func (x *MetricLabelsResponse) Reset() {
	*x = MetricLabelsResponse{}
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricLabelsResponse) ProtoMessage() {}

func (x *MetricLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricLabelsResponse.ProtoReflect.Descriptor instead.
func (*MetricLabelsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *MetricLabelsResponse) GetLabels() []*MetricLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricLabelsResponse) GetLabelsByName() []*MetricLabelsByName {
	if x != nil {
		return x.LabelsByName
	}
	return nil
}

type MetricLabelsByName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels []*MetricLabel `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *MetricLabelsByName) Reset() {
	*x = MetricLabelsByName{}
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricLabelsByName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricLabelsByName) ProtoMessage() {}

func (x *MetricLabelsByName) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricLabelsByName.ProtoReflect.Descriptor instead.
func (*MetricLabelsByName) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *MetricLabelsByName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricLabelsByName) GetLabels() []*MetricLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

type MetricField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MetricField) Reset() {
	*x = MetricField{}
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricField) ProtoMessage() {}

func (x *MetricField) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricField.ProtoReflect.Descriptor instead.
func (*MetricField) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_metrics_proto_rawDescGZIP(), []int{5}
}

func (x *MetricField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MetricLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                  []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	IsCardinalityProtected bool     `protobuf:"varint,3,opt,name=is_cardinality_protected,json=isCardinalityProtected,proto3" json:"is_cardinality_protected,omitempty"`
}

func (x *MetricLabel) Reset() {
	*x = MetricLabel{}
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricLabel) ProtoMessage() {}

func (x *MetricLabel) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_metrics_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricLabel.ProtoReflect.Descriptor instead.
func (*MetricLabel) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_metrics_proto_rawDescGZIP(), []int{6}
}

func (x *MetricLabel) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MetricLabel) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MetricLabel) GetIsCardinalityProtected() bool {
	if x != nil {
		return x.IsCardinalityProtected
	}
	return false
}

var File_com_coralogix_schemastore_v1_metrics_proto protoreflect.FileDescriptor

var file_com_coralogix_schemastore_v1_metrics_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4e, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x5a, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x22, 0xbc, 0x04, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x65, 0x78, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x1d,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x19, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xb1, 0x01, 0x0a, 0x14, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x56, 0x0a,
	0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x22, 0x21, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x18,
	0x69, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x69, 0x73, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_schemastore_v1_metrics_proto_rawDescOnce sync.Once
	file_com_coralogix_schemastore_v1_metrics_proto_rawDescData = file_com_coralogix_schemastore_v1_metrics_proto_rawDesc
)

func file_com_coralogix_schemastore_v1_metrics_proto_rawDescGZIP() []byte {
	file_com_coralogix_schemastore_v1_metrics_proto_rawDescOnce.Do(func() {
		file_com_coralogix_schemastore_v1_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_schemastore_v1_metrics_proto_rawDescData)
	})
	return file_com_coralogix_schemastore_v1_metrics_proto_rawDescData
}

var file_com_coralogix_schemastore_v1_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_com_coralogix_schemastore_v1_metrics_proto_goTypes = []any{
	(*MetricNamesRequest)(nil),   // 0: com.coralogix.schemastore.v1.MetricNamesRequest
	(*MetricNamesResponse)(nil),  // 1: com.coralogix.schemastore.v1.MetricNamesResponse
	(*MetricLabelsRequest)(nil),  // 2: com.coralogix.schemastore.v1.MetricLabelsRequest
	(*MetricLabelsResponse)(nil), // 3: com.coralogix.schemastore.v1.MetricLabelsResponse
	(*MetricLabelsByName)(nil),   // 4: com.coralogix.schemastore.v1.MetricLabelsByName
	(*MetricField)(nil),          // 5: com.coralogix.schemastore.v1.MetricField
	(*MetricLabel)(nil),          // 6: com.coralogix.schemastore.v1.MetricLabel
	(*TimeRange)(nil),            // 7: com.coralogix.schemastore.v1.TimeRange
	(*LabelFilter)(nil),          // 8: com.coralogix.schemastore.v1.LabelFilter
	(MatchMode)(0),               // 9: com.coralogix.schemastore.v1.MatchMode
}
var file_com_coralogix_schemastore_v1_metrics_proto_depIdxs = []int32{
	7, // 0: com.coralogix.schemastore.v1.MetricNamesRequest.time_range:type_name -> com.coralogix.schemastore.v1.TimeRange
	8, // 1: com.coralogix.schemastore.v1.MetricNamesRequest.label_filters:type_name -> com.coralogix.schemastore.v1.LabelFilter
	5, // 2: com.coralogix.schemastore.v1.MetricNamesResponse.metrics:type_name -> com.coralogix.schemastore.v1.MetricField
	7, // 3: com.coralogix.schemastore.v1.MetricLabelsRequest.time_range:type_name -> com.coralogix.schemastore.v1.TimeRange
	8, // 4: com.coralogix.schemastore.v1.MetricLabelsRequest.label_filters:type_name -> com.coralogix.schemastore.v1.LabelFilter
	9, // 5: com.coralogix.schemastore.v1.MetricLabelsRequest.result_label_value_match_mode:type_name -> com.coralogix.schemastore.v1.MatchMode
	6, // 6: com.coralogix.schemastore.v1.MetricLabelsResponse.labels:type_name -> com.coralogix.schemastore.v1.MetricLabel
	4, // 7: com.coralogix.schemastore.v1.MetricLabelsResponse.labels_by_name:type_name -> com.coralogix.schemastore.v1.MetricLabelsByName
	6, // 8: com.coralogix.schemastore.v1.MetricLabelsByName.labels:type_name -> com.coralogix.schemastore.v1.MetricLabel
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_com_coralogix_schemastore_v1_metrics_proto_init() }
func file_com_coralogix_schemastore_v1_metrics_proto_init() {
	if File_com_coralogix_schemastore_v1_metrics_proto != nil {
		return
	}
	file_com_coralogix_schemastore_v1_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_schemastore_v1_metrics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_schemastore_v1_metrics_proto_goTypes,
		DependencyIndexes: file_com_coralogix_schemastore_v1_metrics_proto_depIdxs,
		MessageInfos:      file_com_coralogix_schemastore_v1_metrics_proto_msgTypes,
	}.Build()
	File_com_coralogix_schemastore_v1_metrics_proto = out.File
	file_com_coralogix_schemastore_v1_metrics_proto_rawDesc = nil
	file_com_coralogix_schemastore_v1_metrics_proto_goTypes = nil
	file_com_coralogix_schemastore_v1_metrics_proto_depIdxs = nil
}
