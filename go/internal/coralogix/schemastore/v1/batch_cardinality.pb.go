// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.0
// source: com/coralogix/schemastore/v1/batch_cardinality.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchCardinalityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogPaths      []*BatchCardinalityRequestPath  `protobuf:"bytes,1,rep,name=log_paths,json=logPaths,proto3" json:"log_paths,omitempty"`
	LogLabels     []*BatchCardinalityRequestPath  `protobuf:"bytes,2,rep,name=log_labels,json=logLabels,proto3" json:"log_labels,omitempty"`
	TracingPaths  []*BatchCardinalityRequestPath  `protobuf:"bytes,3,rep,name=tracing_paths,json=tracingPaths,proto3" json:"tracing_paths,omitempty"`
	TracingLabels []*BatchCardinalityRequestPath  `protobuf:"bytes,4,rep,name=tracing_labels,json=tracingLabels,proto3" json:"tracing_labels,omitempty"`
	Options       *BatchCardinalityRequestOptions `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *BatchCardinalityRequest) Reset() {
	*x = BatchCardinalityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCardinalityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCardinalityRequest) ProtoMessage() {}

func (x *BatchCardinalityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCardinalityRequest.ProtoReflect.Descriptor instead.
func (*BatchCardinalityRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDescGZIP(), []int{0}
}

func (x *BatchCardinalityRequest) GetLogPaths() []*BatchCardinalityRequestPath {
	if x != nil {
		return x.LogPaths
	}
	return nil
}

func (x *BatchCardinalityRequest) GetLogLabels() []*BatchCardinalityRequestPath {
	if x != nil {
		return x.LogLabels
	}
	return nil
}

func (x *BatchCardinalityRequest) GetTracingPaths() []*BatchCardinalityRequestPath {
	if x != nil {
		return x.TracingPaths
	}
	return nil
}

func (x *BatchCardinalityRequest) GetTracingLabels() []*BatchCardinalityRequestPath {
	if x != nil {
		return x.TracingLabels
	}
	return nil
}

func (x *BatchCardinalityRequest) GetOptions() *BatchCardinalityRequestOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type BatchCardinalityRequestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamIds   []uint32   `protobuf:"varint,1,rep,packed,name=team_ids,json=teamIds,proto3" json:"team_ids,omitempty"`
	TimeRange *TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
}

func (x *BatchCardinalityRequestOptions) Reset() {
	*x = BatchCardinalityRequestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCardinalityRequestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCardinalityRequestOptions) ProtoMessage() {}

func (x *BatchCardinalityRequestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCardinalityRequestOptions.ProtoReflect.Descriptor instead.
func (*BatchCardinalityRequestOptions) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDescGZIP(), []int{1}
}

func (x *BatchCardinalityRequestOptions) GetTeamIds() []uint32 {
	if x != nil {
		return x.TeamIds
	}
	return nil
}

func (x *BatchCardinalityRequestOptions) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

type BatchCardinalityRequestPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *BatchCardinalityRequestPath) Reset() {
	*x = BatchCardinalityRequestPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCardinalityRequestPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCardinalityRequestPath) ProtoMessage() {}

func (x *BatchCardinalityRequestPath) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCardinalityRequestPath.ProtoReflect.Descriptor instead.
func (*BatchCardinalityRequestPath) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDescGZIP(), []int{2}
}

func (x *BatchCardinalityRequestPath) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type BatchCardinalityRequestPathResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	Cardinality uint64   `protobuf:"varint,2,opt,name=cardinality,proto3" json:"cardinality,omitempty"`
}

func (x *BatchCardinalityRequestPathResult) Reset() {
	*x = BatchCardinalityRequestPathResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCardinalityRequestPathResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCardinalityRequestPathResult) ProtoMessage() {}

func (x *BatchCardinalityRequestPathResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCardinalityRequestPathResult.ProtoReflect.Descriptor instead.
func (*BatchCardinalityRequestPathResult) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDescGZIP(), []int{3}
}

func (x *BatchCardinalityRequestPathResult) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *BatchCardinalityRequestPathResult) GetCardinality() uint64 {
	if x != nil {
		return x.Cardinality
	}
	return 0
}

type BatchCardinalityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogPaths      []*BatchCardinalityRequestPathResult `protobuf:"bytes,1,rep,name=log_paths,json=logPaths,proto3" json:"log_paths,omitempty"`
	LogLabels     []*BatchCardinalityRequestPathResult `protobuf:"bytes,2,rep,name=log_labels,json=logLabels,proto3" json:"log_labels,omitempty"`
	TracingPaths  []*BatchCardinalityRequestPathResult `protobuf:"bytes,3,rep,name=tracing_paths,json=tracingPaths,proto3" json:"tracing_paths,omitempty"`
	TracingLabels []*BatchCardinalityRequestPathResult `protobuf:"bytes,4,rep,name=tracing_labels,json=tracingLabels,proto3" json:"tracing_labels,omitempty"`
}

func (x *BatchCardinalityResponse) Reset() {
	*x = BatchCardinalityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCardinalityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCardinalityResponse) ProtoMessage() {}

func (x *BatchCardinalityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCardinalityResponse.ProtoReflect.Descriptor instead.
func (*BatchCardinalityResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDescGZIP(), []int{4}
}

func (x *BatchCardinalityResponse) GetLogPaths() []*BatchCardinalityRequestPathResult {
	if x != nil {
		return x.LogPaths
	}
	return nil
}

func (x *BatchCardinalityResponse) GetLogLabels() []*BatchCardinalityRequestPathResult {
	if x != nil {
		return x.LogLabels
	}
	return nil
}

func (x *BatchCardinalityResponse) GetTracingPaths() []*BatchCardinalityRequestPathResult {
	if x != nil {
		return x.TracingPaths
	}
	return nil
}

func (x *BatchCardinalityResponse) GetTracingLabels() []*BatchCardinalityRequestPathResult {
	if x != nil {
		return x.TracingLabels
	}
	return nil
}

var File_com_coralogix_schemastore_v1_batch_cardinality_proto protoreflect.FileDescriptor

var file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDesc = []byte{
	0x0a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe5, 0x03, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x09, 0x6c,
	0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x58, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5e, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x60, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x56, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x31, 0x0a,
	0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x59, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xa6, 0x03, 0x0a, 0x18,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x5e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x6c, 0x6f, 0x67,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x64, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x66, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDescOnce sync.Once
	file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDescData = file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDesc
)

func file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDescGZIP() []byte {
	file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDescOnce.Do(func() {
		file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDescData)
	})
	return file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDescData
}

var file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_com_coralogix_schemastore_v1_batch_cardinality_proto_goTypes = []any{
	(*BatchCardinalityRequest)(nil),           // 0: com.coralogix.schemastore.v1.BatchCardinalityRequest
	(*BatchCardinalityRequestOptions)(nil),    // 1: com.coralogix.schemastore.v1.BatchCardinalityRequestOptions
	(*BatchCardinalityRequestPath)(nil),       // 2: com.coralogix.schemastore.v1.BatchCardinalityRequestPath
	(*BatchCardinalityRequestPathResult)(nil), // 3: com.coralogix.schemastore.v1.BatchCardinalityRequestPathResult
	(*BatchCardinalityResponse)(nil),          // 4: com.coralogix.schemastore.v1.BatchCardinalityResponse
	(*TimeRange)(nil),                         // 5: com.coralogix.schemastore.v1.TimeRange
}
var file_com_coralogix_schemastore_v1_batch_cardinality_proto_depIdxs = []int32{
	2,  // 0: com.coralogix.schemastore.v1.BatchCardinalityRequest.log_paths:type_name -> com.coralogix.schemastore.v1.BatchCardinalityRequestPath
	2,  // 1: com.coralogix.schemastore.v1.BatchCardinalityRequest.log_labels:type_name -> com.coralogix.schemastore.v1.BatchCardinalityRequestPath
	2,  // 2: com.coralogix.schemastore.v1.BatchCardinalityRequest.tracing_paths:type_name -> com.coralogix.schemastore.v1.BatchCardinalityRequestPath
	2,  // 3: com.coralogix.schemastore.v1.BatchCardinalityRequest.tracing_labels:type_name -> com.coralogix.schemastore.v1.BatchCardinalityRequestPath
	1,  // 4: com.coralogix.schemastore.v1.BatchCardinalityRequest.options:type_name -> com.coralogix.schemastore.v1.BatchCardinalityRequestOptions
	5,  // 5: com.coralogix.schemastore.v1.BatchCardinalityRequestOptions.time_range:type_name -> com.coralogix.schemastore.v1.TimeRange
	3,  // 6: com.coralogix.schemastore.v1.BatchCardinalityResponse.log_paths:type_name -> com.coralogix.schemastore.v1.BatchCardinalityRequestPathResult
	3,  // 7: com.coralogix.schemastore.v1.BatchCardinalityResponse.log_labels:type_name -> com.coralogix.schemastore.v1.BatchCardinalityRequestPathResult
	3,  // 8: com.coralogix.schemastore.v1.BatchCardinalityResponse.tracing_paths:type_name -> com.coralogix.schemastore.v1.BatchCardinalityRequestPathResult
	3,  // 9: com.coralogix.schemastore.v1.BatchCardinalityResponse.tracing_labels:type_name -> com.coralogix.schemastore.v1.BatchCardinalityRequestPathResult
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_com_coralogix_schemastore_v1_batch_cardinality_proto_init() }
func file_com_coralogix_schemastore_v1_batch_cardinality_proto_init() {
	if File_com_coralogix_schemastore_v1_batch_cardinality_proto != nil {
		return
	}
	file_com_coralogix_schemastore_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCardinalityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCardinalityRequestOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCardinalityRequestPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCardinalityRequestPathResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCardinalityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_schemastore_v1_batch_cardinality_proto_goTypes,
		DependencyIndexes: file_com_coralogix_schemastore_v1_batch_cardinality_proto_depIdxs,
		MessageInfos:      file_com_coralogix_schemastore_v1_batch_cardinality_proto_msgTypes,
	}.Build()
	File_com_coralogix_schemastore_v1_batch_cardinality_proto = out.File
	file_com_coralogix_schemastore_v1_batch_cardinality_proto_rawDesc = nil
	file_com_coralogix_schemastore_v1_batch_cardinality_proto_goTypes = nil
	file_com_coralogix_schemastore_v1_batch_cardinality_proto_depIdxs = nil
}
