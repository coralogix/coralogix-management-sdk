// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: com/coralogix/schemastore/v1/flat.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeypathFormat int32

const (
	KeypathFormat_KEYPATH_FORMAT_UNSPECIFIED KeypathFormat = 0
	KeypathFormat_KEYPATH_FORMAT_DEFAULT     KeypathFormat = 1
	KeypathFormat_KEYPATH_FORMAT_DATAPRIME   KeypathFormat = 2
	KeypathFormat_KEYPATH_FORMAT_LUCENE      KeypathFormat = 3
)

// Enum value maps for KeypathFormat.
var (
	KeypathFormat_name = map[int32]string{
		0: "KEYPATH_FORMAT_UNSPECIFIED",
		1: "KEYPATH_FORMAT_DEFAULT",
		2: "KEYPATH_FORMAT_DATAPRIME",
		3: "KEYPATH_FORMAT_LUCENE",
	}
	KeypathFormat_value = map[string]int32{
		"KEYPATH_FORMAT_UNSPECIFIED": 0,
		"KEYPATH_FORMAT_DEFAULT":     1,
		"KEYPATH_FORMAT_DATAPRIME":   2,
		"KEYPATH_FORMAT_LUCENE":      3,
	}
)

func (x KeypathFormat) Enum() *KeypathFormat {
	p := new(KeypathFormat)
	*p = x
	return p
}

func (x KeypathFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeypathFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_flat_proto_enumTypes[0].Descriptor()
}

func (KeypathFormat) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_flat_proto_enumTypes[0]
}

func (x KeypathFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeypathFormat.Descriptor instead.
func (KeypathFormat) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{0}
}

type ObservationsFeature int32

const (
	ObservationsFeature_OBSERVATIONS_FEATURE_UNSPECIFIED ObservationsFeature = 0
	// Empty keypaths contain type information about the root log (e.g. whether it is an object or raw string)
	// and are not included by default. Set this to true to include them.
	ObservationsFeature_OBSERVATIONS_FEATURE_INCLUDE_EMPTY_KEYPATHS ObservationsFeature = 1
	ObservationsFeature_OBSERVATIONS_FEATURE_ADVANCED_ARRAY_TYPES   ObservationsFeature = 2
	ObservationsFeature_OBSERVATIONS_FEATURE_INCLUDE_NULL_KEYPATHS  ObservationsFeature = 3
	// Not every consumer supports virtual fields so they are not included by default.
	// This setting is also "implied" by the virtual_field_filter field when filtering for only virtual fields.
	ObservationsFeature_OBSERVATIONS_FEATURE_INCLUDE_VIRTUAL_FIELDS ObservationsFeature = 4
)

// Enum value maps for ObservationsFeature.
var (
	ObservationsFeature_name = map[int32]string{
		0: "OBSERVATIONS_FEATURE_UNSPECIFIED",
		1: "OBSERVATIONS_FEATURE_INCLUDE_EMPTY_KEYPATHS",
		2: "OBSERVATIONS_FEATURE_ADVANCED_ARRAY_TYPES",
		3: "OBSERVATIONS_FEATURE_INCLUDE_NULL_KEYPATHS",
		4: "OBSERVATIONS_FEATURE_INCLUDE_VIRTUAL_FIELDS",
	}
	ObservationsFeature_value = map[string]int32{
		"OBSERVATIONS_FEATURE_UNSPECIFIED":            0,
		"OBSERVATIONS_FEATURE_INCLUDE_EMPTY_KEYPATHS": 1,
		"OBSERVATIONS_FEATURE_ADVANCED_ARRAY_TYPES":   2,
		"OBSERVATIONS_FEATURE_INCLUDE_NULL_KEYPATHS":  3,
		"OBSERVATIONS_FEATURE_INCLUDE_VIRTUAL_FIELDS": 4,
	}
)

func (x ObservationsFeature) Enum() *ObservationsFeature {
	p := new(ObservationsFeature)
	*p = x
	return p
}

func (x ObservationsFeature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationsFeature) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_schemastore_v1_flat_proto_enumTypes[1].Descriptor()
}

func (ObservationsFeature) Type() protoreflect.EnumType {
	return &file_com_coralogix_schemastore_v1_flat_proto_enumTypes[1]
}

func (x ObservationsFeature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationsFeature.Descriptor instead.
func (ObservationsFeature) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{1}
}

type ObservationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamIds []uint32 `protobuf:"varint,1,rep,packed,name=team_ids,json=teamIds,proto3" json:"team_ids,omitempty"`
	// If you do not provide a time range, results will only be returned for datasets that are not time-partitioned
	TimeRange          *TimeRange           `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Datasets           []*DatasetDescriptor `protobuf:"bytes,13,rep,name=datasets,proto3" json:"datasets,omitempty"`
	DatasetScopes      []DatasetScope       `protobuf:"varint,4,rep,packed,name=dataset_scopes,json=datasetScopes,proto3,enum=com.coralogix.schemastore.v1.DatasetScope" json:"dataset_scopes,omitempty"`
	KeypathFilters     []*MatchExpression   `protobuf:"bytes,5,rep,name=keypath_filters,json=keypathFilters,proto3" json:"keypath_filters,omitempty"`
	ValueFilters       []*MatchExpression   `protobuf:"bytes,6,rep,name=value_filters,json=valueFilters,proto3" json:"value_filters,omitempty"`
	VirtualFieldFilter *VirtualFieldFilter  `protobuf:"bytes,16,opt,name=virtual_field_filter,json=virtualFieldFilter,proto3" json:"virtual_field_filter,omitempty"`
	LabelFilters       []*LabelFilterV2     `protobuf:"bytes,7,rep,name=label_filters,json=labelFilters,proto3" json:"label_filters,omitempty"`
	MetadataFilters    []*MetadataFilter    `protobuf:"bytes,8,rep,name=metadata_filters,json=metadataFilters,proto3" json:"metadata_filters,omitempty"`
	TimeResolution     TimeResolution       `protobuf:"varint,9,opt,name=time_resolution,json=timeResolution,proto3,enum=com.coralogix.schemastore.v1.TimeResolution" json:"time_resolution,omitempty"`
	ObservationsLimit  int32                `protobuf:"varint,10,opt,name=observations_limit,json=observationsLimit,proto3" json:"observations_limit,omitempty"`
	ValueLimit         int32                `protobuf:"varint,11,opt,name=value_limit,json=valueLimit,proto3" json:"value_limit,omitempty"`
	KeypathFormats     []KeypathFormat      `protobuf:"varint,12,rep,packed,name=keypath_formats,json=keypathFormats,proto3,enum=com.coralogix.schemastore.v1.KeypathFormat" json:"keypath_formats,omitempty"`
	// Deprecated: use datasets instead
	//
	// Deprecated: Marked as deprecated in com/coralogix/schemastore/v1/flat.proto.
	DatasetTypes              []DatasetType         `protobuf:"varint,3,rep,packed,name=dataset_types,json=datasetTypes,proto3,enum=com.coralogix.schemastore.v1.DatasetType" json:"dataset_types,omitempty"`
	CalculateValueCardinality bool                  `protobuf:"varint,14,opt,name=calculate_value_cardinality,json=calculateValueCardinality,proto3" json:"calculate_value_cardinality,omitempty"`
	Features                  []ObservationsFeature `protobuf:"varint,15,rep,packed,name=features,proto3,enum=com.coralogix.schemastore.v1.ObservationsFeature" json:"features,omitempty"`
	// See PreferredSchema type for more
	// Empty implies, only real observations are returned
	PreferredSchemas []*PreferredSchema `protobuf:"bytes,17,rep,name=preferred_schemas,json=preferredSchemas,proto3" json:"preferred_schemas,omitempty"`
}

func (x *ObservationsRequest) Reset() {
	*x = ObservationsRequest{}
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationsRequest) ProtoMessage() {}

func (x *ObservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationsRequest.ProtoReflect.Descriptor instead.
func (*ObservationsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{0}
}

func (x *ObservationsRequest) GetTeamIds() []uint32 {
	if x != nil {
		return x.TeamIds
	}
	return nil
}

func (x *ObservationsRequest) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *ObservationsRequest) GetDatasets() []*DatasetDescriptor {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *ObservationsRequest) GetDatasetScopes() []DatasetScope {
	if x != nil {
		return x.DatasetScopes
	}
	return nil
}

func (x *ObservationsRequest) GetKeypathFilters() []*MatchExpression {
	if x != nil {
		return x.KeypathFilters
	}
	return nil
}

func (x *ObservationsRequest) GetValueFilters() []*MatchExpression {
	if x != nil {
		return x.ValueFilters
	}
	return nil
}

func (x *ObservationsRequest) GetVirtualFieldFilter() *VirtualFieldFilter {
	if x != nil {
		return x.VirtualFieldFilter
	}
	return nil
}

func (x *ObservationsRequest) GetLabelFilters() []*LabelFilterV2 {
	if x != nil {
		return x.LabelFilters
	}
	return nil
}

func (x *ObservationsRequest) GetMetadataFilters() []*MetadataFilter {
	if x != nil {
		return x.MetadataFilters
	}
	return nil
}

func (x *ObservationsRequest) GetTimeResolution() TimeResolution {
	if x != nil {
		return x.TimeResolution
	}
	return TimeResolution_TIME_RESOLUTION_UNSPECIFIED
}

func (x *ObservationsRequest) GetObservationsLimit() int32 {
	if x != nil {
		return x.ObservationsLimit
	}
	return 0
}

func (x *ObservationsRequest) GetValueLimit() int32 {
	if x != nil {
		return x.ValueLimit
	}
	return 0
}

func (x *ObservationsRequest) GetKeypathFormats() []KeypathFormat {
	if x != nil {
		return x.KeypathFormats
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogix/schemastore/v1/flat.proto.
func (x *ObservationsRequest) GetDatasetTypes() []DatasetType {
	if x != nil {
		return x.DatasetTypes
	}
	return nil
}

func (x *ObservationsRequest) GetCalculateValueCardinality() bool {
	if x != nil {
		return x.CalculateValueCardinality
	}
	return false
}

func (x *ObservationsRequest) GetFeatures() []ObservationsFeature {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *ObservationsRequest) GetPreferredSchemas() []*PreferredSchema {
	if x != nil {
		return x.PreferredSchemas
	}
	return nil
}

type ObservationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*ObservationGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *ObservationsResponse) Reset() {
	*x = ObservationsResponse{}
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationsResponse) ProtoMessage() {}

func (x *ObservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationsResponse.ProtoReflect.Descriptor instead.
func (*ObservationsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{1}
}

func (x *ObservationsResponse) GetGroups() []*ObservationGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type ObservationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset           *DatasetDescriptor  `protobuf:"bytes,6,opt,name=dataset,proto3" json:"dataset,omitempty"`
	DatasetScope      DatasetScope        `protobuf:"varint,2,opt,name=dataset_scope,json=datasetScope,proto3,enum=com.coralogix.schemastore.v1.DatasetScope" json:"dataset_scope,omitempty"`
	Keypath           []string            `protobuf:"bytes,3,rep,name=keypath,proto3" json:"keypath,omitempty"`
	Observations      []*Observation      `protobuf:"bytes,4,rep,name=observations,proto3" json:"observations,omitempty"`
	FormattedKeypaths []*FormattedKeypath `protobuf:"bytes,5,rep,name=formatted_keypaths,json=formattedKeypaths,proto3" json:"formatted_keypaths,omitempty"`
	// Deprecated: more complete type is dataset
	//
	// Deprecated: Marked as deprecated in com/coralogix/schemastore/v1/flat.proto.
	DatasetType DatasetType `protobuf:"varint,1,opt,name=dataset_type,json=datasetType,proto3,enum=com.coralogix.schemastore.v1.DatasetType" json:"dataset_type,omitempty"`
}

func (x *ObservationGroup) Reset() {
	*x = ObservationGroup{}
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObservationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationGroup) ProtoMessage() {}

func (x *ObservationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationGroup.ProtoReflect.Descriptor instead.
func (*ObservationGroup) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{2}
}

func (x *ObservationGroup) GetDataset() *DatasetDescriptor {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *ObservationGroup) GetDatasetScope() DatasetScope {
	if x != nil {
		return x.DatasetScope
	}
	return DatasetScope_DATASET_SCOPE_UNSPECIFIED
}

func (x *ObservationGroup) GetKeypath() []string {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (x *ObservationGroup) GetObservations() []*Observation {
	if x != nil {
		return x.Observations
	}
	return nil
}

func (x *ObservationGroup) GetFormattedKeypaths() []*FormattedKeypath {
	if x != nil {
		return x.FormattedKeypaths
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogix/schemastore/v1/flat.proto.
func (x *ObservationGroup) GetDatasetType() DatasetType {
	if x != nil {
		return x.DatasetType
	}
	return DatasetType_DATASET_TYPE_UNSPECIFIED
}

type Observation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType        *DataType      `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=com.coralogix.schemastore.v1.DataType,oneof" json:"data_type,omitempty"`
	LogicalDataType *string        `protobuf:"bytes,2,opt,name=logical_data_type,json=logicalDataType,proto3,oneof" json:"logical_data_type,omitempty"`
	PriorityClass   *PriorityClass `protobuf:"varint,3,opt,name=priority_class,json=priorityClass,proto3,enum=com.coralogix.schemastore.v1.PriorityClass,oneof" json:"priority_class,omitempty"`
	Values          []string       `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	Cardinality     *Cardinality   `protobuf:"bytes,5,opt,name=cardinality,proto3,oneof" json:"cardinality,omitempty"`
	// Read https://www.notion.so/coralogix/Cardinality-fields-in-observations-API-34328e4a20f04dc3b09de248f93f0ad7?pvs=4 for more info
	IsCardinalityProtected bool                `protobuf:"varint,6,opt,name=is_cardinality_protected,json=isCardinalityProtected,proto3" json:"is_cardinality_protected,omitempty"`
	VirtualFieldDetail     *VirtualFieldDetail `protobuf:"bytes,7,opt,name=virtual_field_detail,json=virtualFieldDetail,proto3,oneof" json:"virtual_field_detail,omitempty"`
	Preference             *Preference         `protobuf:"bytes,8,opt,name=preference,proto3,oneof" json:"preference,omitempty"`
}

func (x *Observation) Reset() {
	*x = Observation{}
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Observation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation) ProtoMessage() {}

func (x *Observation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation.ProtoReflect.Descriptor instead.
func (*Observation) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{3}
}

func (x *Observation) GetDataType() DataType {
	if x != nil && x.DataType != nil {
		return *x.DataType
	}
	return DataType_DATA_TYPE_UNSPECIFIED
}

func (x *Observation) GetLogicalDataType() string {
	if x != nil && x.LogicalDataType != nil {
		return *x.LogicalDataType
	}
	return ""
}

func (x *Observation) GetPriorityClass() PriorityClass {
	if x != nil && x.PriorityClass != nil {
		return *x.PriorityClass
	}
	return PriorityClass_PRIORITY_CLASS_UNSPECIFIED
}

func (x *Observation) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Observation) GetCardinality() *Cardinality {
	if x != nil {
		return x.Cardinality
	}
	return nil
}

func (x *Observation) GetIsCardinalityProtected() bool {
	if x != nil {
		return x.IsCardinalityProtected
	}
	return false
}

func (x *Observation) GetVirtualFieldDetail() *VirtualFieldDetail {
	if x != nil {
		return x.VirtualFieldDetail
	}
	return nil
}

func (x *Observation) GetPreference() *Preference {
	if x != nil {
		return x.Preference
	}
	return nil
}

type VirtualFieldDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DpxlExpr      string `protobuf:"bytes,2,opt,name=dpxl_expr,json=dpxlExpr,proto3" json:"dpxl_expr,omitempty"`
	DatasetRegexp string `protobuf:"bytes,3,opt,name=dataset_regexp,json=datasetRegexp,proto3" json:"dataset_regexp,omitempty"`
}

func (x *VirtualFieldDetail) Reset() {
	*x = VirtualFieldDetail{}
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualFieldDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualFieldDetail) ProtoMessage() {}

func (x *VirtualFieldDetail) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualFieldDetail.ProtoReflect.Descriptor instead.
func (*VirtualFieldDetail) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{4}
}

func (x *VirtualFieldDetail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirtualFieldDetail) GetDpxlExpr() string {
	if x != nil {
		return x.DpxlExpr
	}
	return ""
}

func (x *VirtualFieldDetail) GetDatasetRegexp() string {
	if x != nil {
		return x.DatasetRegexp
	}
	return ""
}

type ExactCardinality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExactCardinality) Reset() {
	*x = ExactCardinality{}
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExactCardinality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExactCardinality) ProtoMessage() {}

func (x *ExactCardinality) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExactCardinality.ProtoReflect.Descriptor instead.
func (*ExactCardinality) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{5}
}

func (x *ExactCardinality) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type EstimatedCardinality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EstimatedCardinality) Reset() {
	*x = EstimatedCardinality{}
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EstimatedCardinality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimatedCardinality) ProtoMessage() {}

func (x *EstimatedCardinality) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimatedCardinality.ProtoReflect.Descriptor instead.
func (*EstimatedCardinality) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{6}
}

func (x *EstimatedCardinality) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Cardinality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Cardinality:
	//
	//	*Cardinality_ExactCardinality
	//	*Cardinality_EstimatedCardinality
	Cardinality isCardinality_Cardinality `protobuf_oneof:"cardinality"`
}

func (x *Cardinality) Reset() {
	*x = Cardinality{}
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cardinality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cardinality) ProtoMessage() {}

func (x *Cardinality) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cardinality.ProtoReflect.Descriptor instead.
func (*Cardinality) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{7}
}

func (m *Cardinality) GetCardinality() isCardinality_Cardinality {
	if m != nil {
		return m.Cardinality
	}
	return nil
}

func (x *Cardinality) GetExactCardinality() *ExactCardinality {
	if x, ok := x.GetCardinality().(*Cardinality_ExactCardinality); ok {
		return x.ExactCardinality
	}
	return nil
}

func (x *Cardinality) GetEstimatedCardinality() *EstimatedCardinality {
	if x, ok := x.GetCardinality().(*Cardinality_EstimatedCardinality); ok {
		return x.EstimatedCardinality
	}
	return nil
}

type isCardinality_Cardinality interface {
	isCardinality_Cardinality()
}

type Cardinality_ExactCardinality struct {
	ExactCardinality *ExactCardinality `protobuf:"bytes,1,opt,name=exact_cardinality,json=exactCardinality,proto3,oneof"`
}

type Cardinality_EstimatedCardinality struct {
	EstimatedCardinality *EstimatedCardinality `protobuf:"bytes,2,opt,name=estimated_cardinality,json=estimatedCardinality,proto3,oneof"`
}

func (*Cardinality_ExactCardinality) isCardinality_Cardinality() {}

func (*Cardinality_EstimatedCardinality) isCardinality_Cardinality() {}

type FormattedKeypath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format  KeypathFormat `protobuf:"varint,1,opt,name=format,proto3,enum=com.coralogix.schemastore.v1.KeypathFormat" json:"format,omitempty"`
	Keypath []string      `protobuf:"bytes,2,rep,name=keypath,proto3" json:"keypath,omitempty"`
}

func (x *FormattedKeypath) Reset() {
	*x = FormattedKeypath{}
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormattedKeypath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormattedKeypath) ProtoMessage() {}

func (x *FormattedKeypath) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormattedKeypath.ProtoReflect.Descriptor instead.
func (*FormattedKeypath) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{8}
}

func (x *FormattedKeypath) GetFormat() KeypathFormat {
	if x != nil {
		return x.Format
	}
	return KeypathFormat_KEYPATH_FORMAT_UNSPECIFIED
}

func (x *FormattedKeypath) GetKeypath() []string {
	if x != nil {
		return x.Keypath
	}
	return nil
}

type LabelFilterV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Filters []*MatchExpression `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	// Read https://www.notion.so/coralogix/Cardinality-fields-in-observations-API-34328e4a20f04dc3b09de248f93f0ad7?pvs=4 for more info
	ExcludeHighCardinality bool `protobuf:"varint,3,opt,name=exclude_high_cardinality,json=excludeHighCardinality,proto3" json:"exclude_high_cardinality,omitempty"`
}

func (x *LabelFilterV2) Reset() {
	*x = LabelFilterV2{}
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelFilterV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelFilterV2) ProtoMessage() {}

func (x *LabelFilterV2) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelFilterV2.ProtoReflect.Descriptor instead.
func (*LabelFilterV2) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{9}
}

func (x *LabelFilterV2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LabelFilterV2) GetFilters() []*MatchExpression {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *LabelFilterV2) GetExcludeHighCardinality() bool {
	if x != nil {
		return x.ExcludeHighCardinality
	}
	return false
}

// Allows requesting preferred schemas in the ObservationsAPI
// The DatasetDescriptor *must* be fully resolved, i.e. no wildcards
// when company_id is empty, global named template is assumed
type PreferredSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset      *DatasetDescriptor `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	TemplateName string             `protobuf:"bytes,2,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	CompanyId    *uint32            `protobuf:"varint,3,opt,name=company_id,json=companyId,proto3,oneof" json:"company_id,omitempty"`
}

func (x *PreferredSchema) Reset() {
	*x = PreferredSchema{}
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreferredSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreferredSchema) ProtoMessage() {}

func (x *PreferredSchema) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreferredSchema.ProtoReflect.Descriptor instead.
func (*PreferredSchema) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{10}
}

func (x *PreferredSchema) GetDataset() *DatasetDescriptor {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *PreferredSchema) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *PreferredSchema) GetCompanyId() uint32 {
	if x != nil && x.CompanyId != nil {
		return *x.CompanyId
	}
	return 0
}

// Marks individual observations as either preferred or not
type Preference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPreferred bool `protobuf:"varint,1,opt,name=is_preferred,json=isPreferred,proto3" json:"is_preferred,omitempty"`
}

func (x *Preference) Reset() {
	*x = Preference{}
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Preference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preference) ProtoMessage() {}

func (x *Preference) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_schemastore_v1_flat_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preference.ProtoReflect.Descriptor instead.
func (*Preference) Descriptor() ([]byte, []int) {
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP(), []int{11}
}

func (x *Preference) GetIsPreferred() bool {
	if x != nil {
		return x.IsPreferred
	}
	return false
}

var File_com_coralogix_schemastore_v1_flat_proto protoreflect.FileDescriptor

var file_com_coralogix_schemastore_v1_flat_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x6c, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8f, 0x0a, 0x0a, 0x13, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4b, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x56, 0x0a,
	0x0f, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x14, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x50, 0x0a,
	0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56,
	0x32, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x57, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x54, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x08, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x22, 0x5e, 0x0a, 0x14, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x22, 0xc8, 0x03, 0x0a, 0x10, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x49, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x4d, 0x0a, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d,
	0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x50, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xac, 0x05, 0x0a, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48,
	0x02, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x63,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x03, 0x52, 0x0b, 0x63,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x18, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x69, 0x73, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x04, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x05,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x68,
	0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x70, 0x78, 0x6c, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x70, 0x78, 0x6c, 0x45, 0x78, 0x70,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x22, 0x28, 0x0a, 0x10, 0x45, 0x78, 0x61, 0x63,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x2c, 0x0a, 0x14, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xe6, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x5d, 0x0a, 0x11, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x63, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x10, 0x65,
	0x78, 0x61, 0x63, 0x74, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x69, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x71, 0x0a, 0x10, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x12, 0x43, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79,
	0x70, 0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x22, 0xa6, 0x01, 0x0a,
	0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x32, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x69, 0x67, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xb4, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x49, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x0a,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x2a, 0x84, 0x01,
	0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x1e, 0x0a, 0x1a, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4b,
	0x45, 0x59, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x50, 0x52, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x45, 0x59,
	0x50, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4c, 0x55, 0x43, 0x45,
	0x4e, 0x45, 0x10, 0x03, 0x2a, 0xfc, 0x01, 0x0a, 0x13, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x20,
	0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55,
	0x44, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x54, 0x48,
	0x53, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x41,
	0x4e, 0x43, 0x45, 0x44, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55,
	0x44, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x54, 0x48, 0x53,
	0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55,
	0x44, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x53, 0x10, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_schemastore_v1_flat_proto_rawDescOnce sync.Once
	file_com_coralogix_schemastore_v1_flat_proto_rawDescData = file_com_coralogix_schemastore_v1_flat_proto_rawDesc
)

func file_com_coralogix_schemastore_v1_flat_proto_rawDescGZIP() []byte {
	file_com_coralogix_schemastore_v1_flat_proto_rawDescOnce.Do(func() {
		file_com_coralogix_schemastore_v1_flat_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_schemastore_v1_flat_proto_rawDescData)
	})
	return file_com_coralogix_schemastore_v1_flat_proto_rawDescData
}

var file_com_coralogix_schemastore_v1_flat_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_com_coralogix_schemastore_v1_flat_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_com_coralogix_schemastore_v1_flat_proto_goTypes = []any{
	(KeypathFormat)(0),           // 0: com.coralogix.schemastore.v1.KeypathFormat
	(ObservationsFeature)(0),     // 1: com.coralogix.schemastore.v1.ObservationsFeature
	(*ObservationsRequest)(nil),  // 2: com.coralogix.schemastore.v1.ObservationsRequest
	(*ObservationsResponse)(nil), // 3: com.coralogix.schemastore.v1.ObservationsResponse
	(*ObservationGroup)(nil),     // 4: com.coralogix.schemastore.v1.ObservationGroup
	(*Observation)(nil),          // 5: com.coralogix.schemastore.v1.Observation
	(*VirtualFieldDetail)(nil),   // 6: com.coralogix.schemastore.v1.VirtualFieldDetail
	(*ExactCardinality)(nil),     // 7: com.coralogix.schemastore.v1.ExactCardinality
	(*EstimatedCardinality)(nil), // 8: com.coralogix.schemastore.v1.EstimatedCardinality
	(*Cardinality)(nil),          // 9: com.coralogix.schemastore.v1.Cardinality
	(*FormattedKeypath)(nil),     // 10: com.coralogix.schemastore.v1.FormattedKeypath
	(*LabelFilterV2)(nil),        // 11: com.coralogix.schemastore.v1.LabelFilterV2
	(*PreferredSchema)(nil),      // 12: com.coralogix.schemastore.v1.PreferredSchema
	(*Preference)(nil),           // 13: com.coralogix.schemastore.v1.Preference
	(*TimeRange)(nil),            // 14: com.coralogix.schemastore.v1.TimeRange
	(*DatasetDescriptor)(nil),    // 15: com.coralogix.schemastore.v1.DatasetDescriptor
	(DatasetScope)(0),            // 16: com.coralogix.schemastore.v1.DatasetScope
	(*MatchExpression)(nil),      // 17: com.coralogix.schemastore.v1.MatchExpression
	(*VirtualFieldFilter)(nil),   // 18: com.coralogix.schemastore.v1.VirtualFieldFilter
	(*MetadataFilter)(nil),       // 19: com.coralogix.schemastore.v1.MetadataFilter
	(TimeResolution)(0),          // 20: com.coralogix.schemastore.v1.TimeResolution
	(DatasetType)(0),             // 21: com.coralogix.schemastore.v1.DatasetType
	(DataType)(0),                // 22: com.coralogix.schemastore.v1.DataType
	(PriorityClass)(0),           // 23: com.coralogix.schemastore.v1.PriorityClass
}
var file_com_coralogix_schemastore_v1_flat_proto_depIdxs = []int32{
	14, // 0: com.coralogix.schemastore.v1.ObservationsRequest.time_range:type_name -> com.coralogix.schemastore.v1.TimeRange
	15, // 1: com.coralogix.schemastore.v1.ObservationsRequest.datasets:type_name -> com.coralogix.schemastore.v1.DatasetDescriptor
	16, // 2: com.coralogix.schemastore.v1.ObservationsRequest.dataset_scopes:type_name -> com.coralogix.schemastore.v1.DatasetScope
	17, // 3: com.coralogix.schemastore.v1.ObservationsRequest.keypath_filters:type_name -> com.coralogix.schemastore.v1.MatchExpression
	17, // 4: com.coralogix.schemastore.v1.ObservationsRequest.value_filters:type_name -> com.coralogix.schemastore.v1.MatchExpression
	18, // 5: com.coralogix.schemastore.v1.ObservationsRequest.virtual_field_filter:type_name -> com.coralogix.schemastore.v1.VirtualFieldFilter
	11, // 6: com.coralogix.schemastore.v1.ObservationsRequest.label_filters:type_name -> com.coralogix.schemastore.v1.LabelFilterV2
	19, // 7: com.coralogix.schemastore.v1.ObservationsRequest.metadata_filters:type_name -> com.coralogix.schemastore.v1.MetadataFilter
	20, // 8: com.coralogix.schemastore.v1.ObservationsRequest.time_resolution:type_name -> com.coralogix.schemastore.v1.TimeResolution
	0,  // 9: com.coralogix.schemastore.v1.ObservationsRequest.keypath_formats:type_name -> com.coralogix.schemastore.v1.KeypathFormat
	21, // 10: com.coralogix.schemastore.v1.ObservationsRequest.dataset_types:type_name -> com.coralogix.schemastore.v1.DatasetType
	1,  // 11: com.coralogix.schemastore.v1.ObservationsRequest.features:type_name -> com.coralogix.schemastore.v1.ObservationsFeature
	12, // 12: com.coralogix.schemastore.v1.ObservationsRequest.preferred_schemas:type_name -> com.coralogix.schemastore.v1.PreferredSchema
	4,  // 13: com.coralogix.schemastore.v1.ObservationsResponse.groups:type_name -> com.coralogix.schemastore.v1.ObservationGroup
	15, // 14: com.coralogix.schemastore.v1.ObservationGroup.dataset:type_name -> com.coralogix.schemastore.v1.DatasetDescriptor
	16, // 15: com.coralogix.schemastore.v1.ObservationGroup.dataset_scope:type_name -> com.coralogix.schemastore.v1.DatasetScope
	5,  // 16: com.coralogix.schemastore.v1.ObservationGroup.observations:type_name -> com.coralogix.schemastore.v1.Observation
	10, // 17: com.coralogix.schemastore.v1.ObservationGroup.formatted_keypaths:type_name -> com.coralogix.schemastore.v1.FormattedKeypath
	21, // 18: com.coralogix.schemastore.v1.ObservationGroup.dataset_type:type_name -> com.coralogix.schemastore.v1.DatasetType
	22, // 19: com.coralogix.schemastore.v1.Observation.data_type:type_name -> com.coralogix.schemastore.v1.DataType
	23, // 20: com.coralogix.schemastore.v1.Observation.priority_class:type_name -> com.coralogix.schemastore.v1.PriorityClass
	9,  // 21: com.coralogix.schemastore.v1.Observation.cardinality:type_name -> com.coralogix.schemastore.v1.Cardinality
	6,  // 22: com.coralogix.schemastore.v1.Observation.virtual_field_detail:type_name -> com.coralogix.schemastore.v1.VirtualFieldDetail
	13, // 23: com.coralogix.schemastore.v1.Observation.preference:type_name -> com.coralogix.schemastore.v1.Preference
	7,  // 24: com.coralogix.schemastore.v1.Cardinality.exact_cardinality:type_name -> com.coralogix.schemastore.v1.ExactCardinality
	8,  // 25: com.coralogix.schemastore.v1.Cardinality.estimated_cardinality:type_name -> com.coralogix.schemastore.v1.EstimatedCardinality
	0,  // 26: com.coralogix.schemastore.v1.FormattedKeypath.format:type_name -> com.coralogix.schemastore.v1.KeypathFormat
	17, // 27: com.coralogix.schemastore.v1.LabelFilterV2.filters:type_name -> com.coralogix.schemastore.v1.MatchExpression
	15, // 28: com.coralogix.schemastore.v1.PreferredSchema.dataset:type_name -> com.coralogix.schemastore.v1.DatasetDescriptor
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_com_coralogix_schemastore_v1_flat_proto_init() }
func file_com_coralogix_schemastore_v1_flat_proto_init() {
	if File_com_coralogix_schemastore_v1_flat_proto != nil {
		return
	}
	file_com_coralogix_schemastore_v1_common_proto_init()
	file_com_coralogix_schemastore_v1_flat_proto_msgTypes[3].OneofWrappers = []any{}
	file_com_coralogix_schemastore_v1_flat_proto_msgTypes[7].OneofWrappers = []any{
		(*Cardinality_ExactCardinality)(nil),
		(*Cardinality_EstimatedCardinality)(nil),
	}
	file_com_coralogix_schemastore_v1_flat_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_schemastore_v1_flat_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_schemastore_v1_flat_proto_goTypes,
		DependencyIndexes: file_com_coralogix_schemastore_v1_flat_proto_depIdxs,
		EnumInfos:         file_com_coralogix_schemastore_v1_flat_proto_enumTypes,
		MessageInfos:      file_com_coralogix_schemastore_v1_flat_proto_msgTypes,
	}.Build()
	File_com_coralogix_schemastore_v1_flat_proto = out.File
	file_com_coralogix_schemastore_v1_flat_proto_rawDesc = nil
	file_com_coralogix_schemastore_v1_flat_proto_goTypes = nil
	file_com_coralogix_schemastore_v1_flat_proto_depIdxs = nil
}
