// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: com/coralogix/metrics/metrics-tco.proto

package metrics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MetricsTcoService_Add_FullMethodName    = "/com.coralogix.metrics.metrics_tco.MetricsTcoService/Add"
	MetricsTcoService_Delete_FullMethodName = "/com.coralogix.metrics.metrics_tco.MetricsTcoService/Delete"
	MetricsTcoService_Get_FullMethodName    = "/com.coralogix.metrics.metrics_tco.MetricsTcoService/Get"
)

// MetricsTcoServiceClient is the client API for MetricsTcoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsTcoServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetResponse, error)
}

type metricsTcoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsTcoServiceClient(cc grpc.ClientConnInterface) MetricsTcoServiceClient {
	return &metricsTcoServiceClient{cc}
}

func (c *metricsTcoServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MetricsTcoService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsTcoServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MetricsTcoService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsTcoServiceClient) Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, MetricsTcoService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsTcoServiceServer is the server API for MetricsTcoService service.
// All implementations must embed UnimplementedMetricsTcoServiceServer
// for forward compatibility
type MetricsTcoServiceServer interface {
	Add(context.Context, *AddRequest) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	Get(context.Context, *emptypb.Empty) (*GetResponse, error)
	mustEmbedUnimplementedMetricsTcoServiceServer()
}

// UnimplementedMetricsTcoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsTcoServiceServer struct {
}

func (UnimplementedMetricsTcoServiceServer) Add(context.Context, *AddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedMetricsTcoServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMetricsTcoServiceServer) Get(context.Context, *emptypb.Empty) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMetricsTcoServiceServer) mustEmbedUnimplementedMetricsTcoServiceServer() {}

// UnsafeMetricsTcoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsTcoServiceServer will
// result in compilation errors.
type UnsafeMetricsTcoServiceServer interface {
	mustEmbedUnimplementedMetricsTcoServiceServer()
}

func RegisterMetricsTcoServiceServer(s grpc.ServiceRegistrar, srv MetricsTcoServiceServer) {
	s.RegisterService(&MetricsTcoService_ServiceDesc, srv)
}

func _MetricsTcoService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsTcoServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsTcoService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsTcoServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsTcoService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsTcoServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsTcoService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsTcoServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsTcoService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsTcoServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsTcoService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsTcoServiceServer).Get(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsTcoService_ServiceDesc is the grpc.ServiceDesc for MetricsTcoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsTcoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.metrics.metrics_tco.MetricsTcoService",
	HandlerType: (*MetricsTcoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _MetricsTcoService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MetricsTcoService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MetricsTcoService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/metrics/metrics-tco.proto",
}
