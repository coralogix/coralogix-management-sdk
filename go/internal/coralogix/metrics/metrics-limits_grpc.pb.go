// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.1
// source: com/coralogix/metrics/metrics-limits.proto

package metrics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricsLimitService_UpdateLimits_FullMethodName = "/com.coralogix.metrics.metrics_limits.MetricsLimitService/UpdateLimits"
	MetricsLimitService_GetLimits_FullMethodName    = "/com.coralogix.metrics.metrics_limits.MetricsLimitService/GetLimits"
)

// MetricsLimitServiceClient is the client API for MetricsLimitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsLimitServiceClient interface {
	UpdateLimits(ctx context.Context, in *UpdateLimitsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLimits(ctx context.Context, in *GetLimitsRequest, opts ...grpc.CallOption) (*MeterLimits, error)
}

type metricsLimitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsLimitServiceClient(cc grpc.ClientConnInterface) MetricsLimitServiceClient {
	return &metricsLimitServiceClient{cc}
}

func (c *metricsLimitServiceClient) UpdateLimits(ctx context.Context, in *UpdateLimitsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MetricsLimitService_UpdateLimits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsLimitServiceClient) GetLimits(ctx context.Context, in *GetLimitsRequest, opts ...grpc.CallOption) (*MeterLimits, error) {
	out := new(MeterLimits)
	err := c.cc.Invoke(ctx, MetricsLimitService_GetLimits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsLimitServiceServer is the server API for MetricsLimitService service.
// All implementations must embed UnimplementedMetricsLimitServiceServer
// for forward compatibility
type MetricsLimitServiceServer interface {
	UpdateLimits(context.Context, *UpdateLimitsRequest) (*emptypb.Empty, error)
	GetLimits(context.Context, *GetLimitsRequest) (*MeterLimits, error)
	mustEmbedUnimplementedMetricsLimitServiceServer()
}

// UnimplementedMetricsLimitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsLimitServiceServer struct {
}

func (UnimplementedMetricsLimitServiceServer) UpdateLimits(context.Context, *UpdateLimitsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLimits not implemented")
}
func (UnimplementedMetricsLimitServiceServer) GetLimits(context.Context, *GetLimitsRequest) (*MeterLimits, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimits not implemented")
}
func (UnimplementedMetricsLimitServiceServer) mustEmbedUnimplementedMetricsLimitServiceServer() {}

// UnsafeMetricsLimitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsLimitServiceServer will
// result in compilation errors.
type UnsafeMetricsLimitServiceServer interface {
	mustEmbedUnimplementedMetricsLimitServiceServer()
}

func RegisterMetricsLimitServiceServer(s grpc.ServiceRegistrar, srv MetricsLimitServiceServer) {
	s.RegisterService(&MetricsLimitService_ServiceDesc, srv)
}

func _MetricsLimitService_UpdateLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsLimitServiceServer).UpdateLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsLimitService_UpdateLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsLimitServiceServer).UpdateLimits(ctx, req.(*UpdateLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsLimitService_GetLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsLimitServiceServer).GetLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsLimitService_GetLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsLimitServiceServer).GetLimits(ctx, req.(*GetLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsLimitService_ServiceDesc is the grpc.ServiceDesc for MetricsLimitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsLimitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.metrics.metrics_limits.MetricsLimitService",
	HandlerType: (*MetricsLimitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateLimits",
			Handler:    _MetricsLimitService_UpdateLimits_Handler,
		},
		{
			MethodName: "GetLimits",
			Handler:    _MetricsLimitService_GetLimits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/metrics/metrics-limits.proto",
}
