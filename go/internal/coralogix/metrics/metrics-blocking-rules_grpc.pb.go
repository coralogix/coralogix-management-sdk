// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.1
// source: com/coralogix/metrics/metrics-blocking-rules.proto

package metrics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricsBlockingRulesService_Block_FullMethodName = "/com.coralogix.metrics.metrics_blocking_rules.MetricsBlockingRulesService/Block"
	MetricsBlockingRulesService_Allow_FullMethodName = "/com.coralogix.metrics.metrics_blocking_rules.MetricsBlockingRulesService/Allow"
	MetricsBlockingRulesService_List_FullMethodName  = "/com.coralogix.metrics.metrics_blocking_rules.MetricsBlockingRulesService/List"
)

// MetricsBlockingRulesServiceClient is the client API for MetricsBlockingRulesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsBlockingRulesServiceClient interface {
	Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Allow(ctx context.Context, in *AllowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error)
}

type metricsBlockingRulesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsBlockingRulesServiceClient(cc grpc.ClientConnInterface) MetricsBlockingRulesServiceClient {
	return &metricsBlockingRulesServiceClient{cc}
}

func (c *metricsBlockingRulesServiceClient) Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MetricsBlockingRulesService_Block_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsBlockingRulesServiceClient) Allow(ctx context.Context, in *AllowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MetricsBlockingRulesService_Allow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsBlockingRulesServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, MetricsBlockingRulesService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsBlockingRulesServiceServer is the server API for MetricsBlockingRulesService service.
// All implementations must embed UnimplementedMetricsBlockingRulesServiceServer
// for forward compatibility
type MetricsBlockingRulesServiceServer interface {
	Block(context.Context, *BlockRequest) (*emptypb.Empty, error)
	Allow(context.Context, *AllowRequest) (*emptypb.Empty, error)
	List(context.Context, *emptypb.Empty) (*ListResponse, error)
	mustEmbedUnimplementedMetricsBlockingRulesServiceServer()
}

// UnimplementedMetricsBlockingRulesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsBlockingRulesServiceServer struct {
}

func (UnimplementedMetricsBlockingRulesServiceServer) Block(context.Context, *BlockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Block not implemented")
}
func (UnimplementedMetricsBlockingRulesServiceServer) Allow(context.Context, *AllowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allow not implemented")
}
func (UnimplementedMetricsBlockingRulesServiceServer) List(context.Context, *emptypb.Empty) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMetricsBlockingRulesServiceServer) mustEmbedUnimplementedMetricsBlockingRulesServiceServer() {
}

// UnsafeMetricsBlockingRulesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsBlockingRulesServiceServer will
// result in compilation errors.
type UnsafeMetricsBlockingRulesServiceServer interface {
	mustEmbedUnimplementedMetricsBlockingRulesServiceServer()
}

func RegisterMetricsBlockingRulesServiceServer(s grpc.ServiceRegistrar, srv MetricsBlockingRulesServiceServer) {
	s.RegisterService(&MetricsBlockingRulesService_ServiceDesc, srv)
}

func _MetricsBlockingRulesService_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsBlockingRulesServiceServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsBlockingRulesService_Block_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsBlockingRulesServiceServer).Block(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsBlockingRulesService_Allow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsBlockingRulesServiceServer).Allow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsBlockingRulesService_Allow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsBlockingRulesServiceServer).Allow(ctx, req.(*AllowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsBlockingRulesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsBlockingRulesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsBlockingRulesService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsBlockingRulesServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsBlockingRulesService_ServiceDesc is the grpc.ServiceDesc for MetricsBlockingRulesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsBlockingRulesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.metrics.metrics_blocking_rules.MetricsBlockingRulesService",
	HandlerType: (*MetricsBlockingRulesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Block",
			Handler:    _MetricsBlockingRulesService_Block_Handler,
		},
		{
			MethodName: "Allow",
			Handler:    _MetricsBlockingRulesService_Allow_Handler,
		},
		{
			MethodName: "List",
			Handler:    _MetricsBlockingRulesService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/metrics/metrics-blocking-rules.proto",
}
