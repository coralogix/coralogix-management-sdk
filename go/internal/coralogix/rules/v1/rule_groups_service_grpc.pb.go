// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: com/coralogix/rules/v1/rule_groups_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RuleGroupsService_GetRuleGroup_FullMethodName             = "/com.coralogix.rules.v1.RuleGroupsService/GetRuleGroup"
	RuleGroupsService_ListRuleGroups_FullMethodName           = "/com.coralogix.rules.v1.RuleGroupsService/ListRuleGroups"
	RuleGroupsService_CreateRuleGroup_FullMethodName          = "/com.coralogix.rules.v1.RuleGroupsService/CreateRuleGroup"
	RuleGroupsService_UpdateRuleGroup_FullMethodName          = "/com.coralogix.rules.v1.RuleGroupsService/UpdateRuleGroup"
	RuleGroupsService_DeleteRuleGroup_FullMethodName          = "/com.coralogix.rules.v1.RuleGroupsService/DeleteRuleGroup"
	RuleGroupsService_BulkDeleteRuleGroup_FullMethodName      = "/com.coralogix.rules.v1.RuleGroupsService/BulkDeleteRuleGroup"
	RuleGroupsService_GetRuleGroupModelMapping_FullMethodName = "/com.coralogix.rules.v1.RuleGroupsService/GetRuleGroupModelMapping"
	RuleGroupsService_GetCompanyUsageLimits_FullMethodName    = "/com.coralogix.rules.v1.RuleGroupsService/GetCompanyUsageLimits"
)

// RuleGroupsServiceClient is the client API for RuleGroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleGroupsServiceClient interface {
	GetRuleGroup(ctx context.Context, in *GetRuleGroupRequest, opts ...grpc.CallOption) (*GetRuleGroupResponse, error)
	ListRuleGroups(ctx context.Context, in *ListRuleGroupsRequest, opts ...grpc.CallOption) (*ListRuleGroupsResponse, error)
	CreateRuleGroup(ctx context.Context, in *CreateRuleGroupRequest, opts ...grpc.CallOption) (*CreateRuleGroupResponse, error)
	UpdateRuleGroup(ctx context.Context, in *UpdateRuleGroupRequest, opts ...grpc.CallOption) (*UpdateRuleGroupResponse, error)
	DeleteRuleGroup(ctx context.Context, in *DeleteRuleGroupRequest, opts ...grpc.CallOption) (*DeleteRuleGroupResponse, error)
	BulkDeleteRuleGroup(ctx context.Context, in *BulkDeleteRuleGroupRequest, opts ...grpc.CallOption) (*BulkDeleteRuleGroupResponse, error)
	GetRuleGroupModelMapping(ctx context.Context, in *GetRuleGroupModelMappingRequest, opts ...grpc.CallOption) (*GetRuleGroupModelMappingResponse, error)
	GetCompanyUsageLimits(ctx context.Context, in *GetCompanyUsageLimitsRequest, opts ...grpc.CallOption) (*GetCompanyUsageLimitsResponse, error)
}

type ruleGroupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleGroupsServiceClient(cc grpc.ClientConnInterface) RuleGroupsServiceClient {
	return &ruleGroupsServiceClient{cc}
}

func (c *ruleGroupsServiceClient) GetRuleGroup(ctx context.Context, in *GetRuleGroupRequest, opts ...grpc.CallOption) (*GetRuleGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRuleGroupResponse)
	err := c.cc.Invoke(ctx, RuleGroupsService_GetRuleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupsServiceClient) ListRuleGroups(ctx context.Context, in *ListRuleGroupsRequest, opts ...grpc.CallOption) (*ListRuleGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRuleGroupsResponse)
	err := c.cc.Invoke(ctx, RuleGroupsService_ListRuleGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupsServiceClient) CreateRuleGroup(ctx context.Context, in *CreateRuleGroupRequest, opts ...grpc.CallOption) (*CreateRuleGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRuleGroupResponse)
	err := c.cc.Invoke(ctx, RuleGroupsService_CreateRuleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupsServiceClient) UpdateRuleGroup(ctx context.Context, in *UpdateRuleGroupRequest, opts ...grpc.CallOption) (*UpdateRuleGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRuleGroupResponse)
	err := c.cc.Invoke(ctx, RuleGroupsService_UpdateRuleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupsServiceClient) DeleteRuleGroup(ctx context.Context, in *DeleteRuleGroupRequest, opts ...grpc.CallOption) (*DeleteRuleGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRuleGroupResponse)
	err := c.cc.Invoke(ctx, RuleGroupsService_DeleteRuleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupsServiceClient) BulkDeleteRuleGroup(ctx context.Context, in *BulkDeleteRuleGroupRequest, opts ...grpc.CallOption) (*BulkDeleteRuleGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkDeleteRuleGroupResponse)
	err := c.cc.Invoke(ctx, RuleGroupsService_BulkDeleteRuleGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupsServiceClient) GetRuleGroupModelMapping(ctx context.Context, in *GetRuleGroupModelMappingRequest, opts ...grpc.CallOption) (*GetRuleGroupModelMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRuleGroupModelMappingResponse)
	err := c.cc.Invoke(ctx, RuleGroupsService_GetRuleGroupModelMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleGroupsServiceClient) GetCompanyUsageLimits(ctx context.Context, in *GetCompanyUsageLimitsRequest, opts ...grpc.CallOption) (*GetCompanyUsageLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompanyUsageLimitsResponse)
	err := c.cc.Invoke(ctx, RuleGroupsService_GetCompanyUsageLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleGroupsServiceServer is the server API for RuleGroupsService service.
// All implementations must embed UnimplementedRuleGroupsServiceServer
// for forward compatibility.
type RuleGroupsServiceServer interface {
	GetRuleGroup(context.Context, *GetRuleGroupRequest) (*GetRuleGroupResponse, error)
	ListRuleGroups(context.Context, *ListRuleGroupsRequest) (*ListRuleGroupsResponse, error)
	CreateRuleGroup(context.Context, *CreateRuleGroupRequest) (*CreateRuleGroupResponse, error)
	UpdateRuleGroup(context.Context, *UpdateRuleGroupRequest) (*UpdateRuleGroupResponse, error)
	DeleteRuleGroup(context.Context, *DeleteRuleGroupRequest) (*DeleteRuleGroupResponse, error)
	BulkDeleteRuleGroup(context.Context, *BulkDeleteRuleGroupRequest) (*BulkDeleteRuleGroupResponse, error)
	GetRuleGroupModelMapping(context.Context, *GetRuleGroupModelMappingRequest) (*GetRuleGroupModelMappingResponse, error)
	GetCompanyUsageLimits(context.Context, *GetCompanyUsageLimitsRequest) (*GetCompanyUsageLimitsResponse, error)
	mustEmbedUnimplementedRuleGroupsServiceServer()
}

// UnimplementedRuleGroupsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuleGroupsServiceServer struct{}

func (UnimplementedRuleGroupsServiceServer) GetRuleGroup(context.Context, *GetRuleGroupRequest) (*GetRuleGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleGroup not implemented")
}
func (UnimplementedRuleGroupsServiceServer) ListRuleGroups(context.Context, *ListRuleGroupsRequest) (*ListRuleGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuleGroups not implemented")
}
func (UnimplementedRuleGroupsServiceServer) CreateRuleGroup(context.Context, *CreateRuleGroupRequest) (*CreateRuleGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRuleGroup not implemented")
}
func (UnimplementedRuleGroupsServiceServer) UpdateRuleGroup(context.Context, *UpdateRuleGroupRequest) (*UpdateRuleGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRuleGroup not implemented")
}
func (UnimplementedRuleGroupsServiceServer) DeleteRuleGroup(context.Context, *DeleteRuleGroupRequest) (*DeleteRuleGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuleGroup not implemented")
}
func (UnimplementedRuleGroupsServiceServer) BulkDeleteRuleGroup(context.Context, *BulkDeleteRuleGroupRequest) (*BulkDeleteRuleGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDeleteRuleGroup not implemented")
}
func (UnimplementedRuleGroupsServiceServer) GetRuleGroupModelMapping(context.Context, *GetRuleGroupModelMappingRequest) (*GetRuleGroupModelMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleGroupModelMapping not implemented")
}
func (UnimplementedRuleGroupsServiceServer) GetCompanyUsageLimits(context.Context, *GetCompanyUsageLimitsRequest) (*GetCompanyUsageLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyUsageLimits not implemented")
}
func (UnimplementedRuleGroupsServiceServer) mustEmbedUnimplementedRuleGroupsServiceServer() {}
func (UnimplementedRuleGroupsServiceServer) testEmbeddedByValue()                           {}

// UnsafeRuleGroupsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleGroupsServiceServer will
// result in compilation errors.
type UnsafeRuleGroupsServiceServer interface {
	mustEmbedUnimplementedRuleGroupsServiceServer()
}

func RegisterRuleGroupsServiceServer(s grpc.ServiceRegistrar, srv RuleGroupsServiceServer) {
	// If the following call pancis, it indicates UnimplementedRuleGroupsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RuleGroupsService_ServiceDesc, srv)
}

func _RuleGroupsService_GetRuleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupsServiceServer).GetRuleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleGroupsService_GetRuleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupsServiceServer).GetRuleGroup(ctx, req.(*GetRuleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroupsService_ListRuleGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuleGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupsServiceServer).ListRuleGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleGroupsService_ListRuleGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupsServiceServer).ListRuleGroups(ctx, req.(*ListRuleGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroupsService_CreateRuleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupsServiceServer).CreateRuleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleGroupsService_CreateRuleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupsServiceServer).CreateRuleGroup(ctx, req.(*CreateRuleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroupsService_UpdateRuleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupsServiceServer).UpdateRuleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleGroupsService_UpdateRuleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupsServiceServer).UpdateRuleGroup(ctx, req.(*UpdateRuleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroupsService_DeleteRuleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupsServiceServer).DeleteRuleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleGroupsService_DeleteRuleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupsServiceServer).DeleteRuleGroup(ctx, req.(*DeleteRuleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroupsService_BulkDeleteRuleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDeleteRuleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupsServiceServer).BulkDeleteRuleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleGroupsService_BulkDeleteRuleGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupsServiceServer).BulkDeleteRuleGroup(ctx, req.(*BulkDeleteRuleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroupsService_GetRuleGroupModelMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleGroupModelMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupsServiceServer).GetRuleGroupModelMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleGroupsService_GetRuleGroupModelMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupsServiceServer).GetRuleGroupModelMapping(ctx, req.(*GetRuleGroupModelMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleGroupsService_GetCompanyUsageLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyUsageLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleGroupsServiceServer).GetCompanyUsageLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleGroupsService_GetCompanyUsageLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleGroupsServiceServer).GetCompanyUsageLimits(ctx, req.(*GetCompanyUsageLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleGroupsService_ServiceDesc is the grpc.ServiceDesc for RuleGroupsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleGroupsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.rules.v1.RuleGroupsService",
	HandlerType: (*RuleGroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRuleGroup",
			Handler:    _RuleGroupsService_GetRuleGroup_Handler,
		},
		{
			MethodName: "ListRuleGroups",
			Handler:    _RuleGroupsService_ListRuleGroups_Handler,
		},
		{
			MethodName: "CreateRuleGroup",
			Handler:    _RuleGroupsService_CreateRuleGroup_Handler,
		},
		{
			MethodName: "UpdateRuleGroup",
			Handler:    _RuleGroupsService_UpdateRuleGroup_Handler,
		},
		{
			MethodName: "DeleteRuleGroup",
			Handler:    _RuleGroupsService_DeleteRuleGroup_Handler,
		},
		{
			MethodName: "BulkDeleteRuleGroup",
			Handler:    _RuleGroupsService_BulkDeleteRuleGroup_Handler,
		},
		{
			MethodName: "GetRuleGroupModelMapping",
			Handler:    _RuleGroupsService_GetRuleGroupModelMapping_Handler,
		},
		{
			MethodName: "GetCompanyUsageLimits",
			Handler:    _RuleGroupsService_GetCompanyUsageLimits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/rules/v1/rule_groups_service.proto",
}
