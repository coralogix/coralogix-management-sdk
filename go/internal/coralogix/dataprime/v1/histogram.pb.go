// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: com/coralogix/dataprime/v1/histogram.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field *UntypedKeypath `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Type  Operator        `protobuf:"varint,2,opt,name=type,proto3,enum=com.coralogix.dataprime.v1.Operator" json:"type,omitempty"`
}

func (x *Aggregation) Reset() {
	*x = Aggregation{}
	mi := &file_com_coralogix_dataprime_v1_histogram_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregation) ProtoMessage() {}

func (x *Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_histogram_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregation.ProtoReflect.Descriptor instead.
func (*Aggregation) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_histogram_proto_rawDescGZIP(), []int{0}
}

func (x *Aggregation) GetField() *UntypedKeypath {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *Aggregation) GetType() Operator {
	if x != nil {
		return x.Type
	}
	return Operator_OPERATOR_COUNT_UNSPECIFIED
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DocCount *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=doc_count,json=docCount,proto3" json:"doc_count,omitempty"`
	AggVal   *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=agg_val,json=aggVal,proto3" json:"agg_val,omitempty"`
	Compared *ComparedData           `protobuf:"bytes,4,opt,name=compared,proto3,oneof" json:"compared,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_com_coralogix_dataprime_v1_histogram_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_histogram_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_histogram_proto_rawDescGZIP(), []int{1}
}

func (x *Data) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Data) GetDocCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.DocCount
	}
	return nil
}

func (x *Data) GetAggVal() *wrapperspb.DoubleValue {
	if x != nil {
		return x.AggVal
	}
	return nil
}

func (x *Data) GetCompared() *ComparedData {
	if x != nil {
		return x.Compared
	}
	return nil
}

type ComparedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoricalDocCount *wrapperspb.Int64Value  `protobuf:"bytes,1,opt,name=historical_doc_count,json=historicalDocCount,proto3" json:"historical_doc_count,omitempty"`
	HistoricalAggVal   *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=historical_agg_val,json=historicalAggVal,proto3" json:"historical_agg_val,omitempty"`
}

func (x *ComparedData) Reset() {
	*x = ComparedData{}
	mi := &file_com_coralogix_dataprime_v1_histogram_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComparedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparedData) ProtoMessage() {}

func (x *ComparedData) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_histogram_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparedData.ProtoReflect.Descriptor instead.
func (*ComparedData) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_histogram_proto_rawDescGZIP(), []int{2}
}

func (x *ComparedData) GetHistoricalDocCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.HistoricalDocCount
	}
	return nil
}

func (x *ComparedData) GetHistoricalAggVal() *wrapperspb.DoubleValue {
	if x != nil {
		return x.HistoricalAggVal
	}
	return nil
}

type HistogramSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Data  []*Data                `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *HistogramSlice) Reset() {
	*x = HistogramSlice{}
	mi := &file_com_coralogix_dataprime_v1_histogram_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistogramSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramSlice) ProtoMessage() {}

func (x *HistogramSlice) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_histogram_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramSlice.ProtoReflect.Descriptor instead.
func (*HistogramSlice) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_histogram_proto_rawDescGZIP(), []int{3}
}

func (x *HistogramSlice) GetValue() *wrapperspb.Int64Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *HistogramSlice) GetData() []*Data {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_com_coralogix_dataprime_v1_histogram_proto protoreflect.FileDescriptor

var file_com_coralogix_dataprime_v1_histogram_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x36, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x64, 0x6f, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x67, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x67, 0x67, 0x56, 0x61, 0x6c, 0x12,
	0x49, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x14, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x6f, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x67, 0x67,
	0x56, 0x61, 0x6c, 0x22, 0x79, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_dataprime_v1_histogram_proto_rawDescOnce sync.Once
	file_com_coralogix_dataprime_v1_histogram_proto_rawDescData = file_com_coralogix_dataprime_v1_histogram_proto_rawDesc
)

func file_com_coralogix_dataprime_v1_histogram_proto_rawDescGZIP() []byte {
	file_com_coralogix_dataprime_v1_histogram_proto_rawDescOnce.Do(func() {
		file_com_coralogix_dataprime_v1_histogram_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_dataprime_v1_histogram_proto_rawDescData)
	})
	return file_com_coralogix_dataprime_v1_histogram_proto_rawDescData
}

var file_com_coralogix_dataprime_v1_histogram_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_com_coralogix_dataprime_v1_histogram_proto_goTypes = []any{
	(*Aggregation)(nil),            // 0: com.coralogix.dataprime.v1.Aggregation
	(*Data)(nil),                   // 1: com.coralogix.dataprime.v1.Data
	(*ComparedData)(nil),           // 2: com.coralogix.dataprime.v1.ComparedData
	(*HistogramSlice)(nil),         // 3: com.coralogix.dataprime.v1.HistogramSlice
	(*UntypedKeypath)(nil),         // 4: com.coralogix.dataprime.v1.UntypedKeypath
	(Operator)(0),                  // 5: com.coralogix.dataprime.v1.Operator
	(*wrapperspb.StringValue)(nil), // 6: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),  // 7: google.protobuf.Int64Value
	(*wrapperspb.DoubleValue)(nil), // 8: google.protobuf.DoubleValue
}
var file_com_coralogix_dataprime_v1_histogram_proto_depIdxs = []int32{
	4,  // 0: com.coralogix.dataprime.v1.Aggregation.field:type_name -> com.coralogix.dataprime.v1.UntypedKeypath
	5,  // 1: com.coralogix.dataprime.v1.Aggregation.type:type_name -> com.coralogix.dataprime.v1.Operator
	6,  // 2: com.coralogix.dataprime.v1.Data.key:type_name -> google.protobuf.StringValue
	7,  // 3: com.coralogix.dataprime.v1.Data.doc_count:type_name -> google.protobuf.Int64Value
	8,  // 4: com.coralogix.dataprime.v1.Data.agg_val:type_name -> google.protobuf.DoubleValue
	2,  // 5: com.coralogix.dataprime.v1.Data.compared:type_name -> com.coralogix.dataprime.v1.ComparedData
	7,  // 6: com.coralogix.dataprime.v1.ComparedData.historical_doc_count:type_name -> google.protobuf.Int64Value
	8,  // 7: com.coralogix.dataprime.v1.ComparedData.historical_agg_val:type_name -> google.protobuf.DoubleValue
	7,  // 8: com.coralogix.dataprime.v1.HistogramSlice.value:type_name -> google.protobuf.Int64Value
	1,  // 9: com.coralogix.dataprime.v1.HistogramSlice.data:type_name -> com.coralogix.dataprime.v1.Data
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_com_coralogix_dataprime_v1_histogram_proto_init() }
func file_com_coralogix_dataprime_v1_histogram_proto_init() {
	if File_com_coralogix_dataprime_v1_histogram_proto != nil {
		return
	}
	file_com_coralogix_dataprime_v1_common_proto_init()
	file_com_coralogix_dataprime_v1_aggregation_operators_proto_init()
	file_com_coralogix_dataprime_v1_histogram_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_dataprime_v1_histogram_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_dataprime_v1_histogram_proto_goTypes,
		DependencyIndexes: file_com_coralogix_dataprime_v1_histogram_proto_depIdxs,
		MessageInfos:      file_com_coralogix_dataprime_v1_histogram_proto_msgTypes,
	}.Build()
	File_com_coralogix_dataprime_v1_histogram_proto = out.File
	file_com_coralogix_dataprime_v1_histogram_proto_rawDesc = nil
	file_com_coralogix_dataprime_v1_histogram_proto_goTypes = nil
	file_com_coralogix_dataprime_v1_histogram_proto_depIdxs = nil
}
