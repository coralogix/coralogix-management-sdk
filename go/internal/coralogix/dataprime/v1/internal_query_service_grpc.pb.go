// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: com/coralogix/dataprime/v1/internal_query_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InternalDataprimeQueryService_Query_FullMethodName = "/com.coralogix.dataprime.v1.InternalDataprimeQueryService/Query"
)

// InternalDataprimeQueryServiceClient is the client API for InternalDataprimeQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// internal service for running dataprime queries
type InternalDataprimeQueryServiceClient interface {
	// method to run dataprime queries
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryResponse], error)
}

type internalDataprimeQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalDataprimeQueryServiceClient(cc grpc.ClientConnInterface) InternalDataprimeQueryServiceClient {
	return &internalDataprimeQueryServiceClient{cc}
}

func (c *internalDataprimeQueryServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InternalDataprimeQueryService_ServiceDesc.Streams[0], InternalDataprimeQueryService_Query_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryRequest, QueryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InternalDataprimeQueryService_QueryClient = grpc.ServerStreamingClient[QueryResponse]

// InternalDataprimeQueryServiceServer is the server API for InternalDataprimeQueryService service.
// All implementations must embed UnimplementedInternalDataprimeQueryServiceServer
// for forward compatibility.
//
// internal service for running dataprime queries
type InternalDataprimeQueryServiceServer interface {
	// method to run dataprime queries
	Query(*QueryRequest, grpc.ServerStreamingServer[QueryResponse]) error
	mustEmbedUnimplementedInternalDataprimeQueryServiceServer()
}

// UnimplementedInternalDataprimeQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInternalDataprimeQueryServiceServer struct{}

func (UnimplementedInternalDataprimeQueryServiceServer) Query(*QueryRequest, grpc.ServerStreamingServer[QueryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedInternalDataprimeQueryServiceServer) mustEmbedUnimplementedInternalDataprimeQueryServiceServer() {
}
func (UnimplementedInternalDataprimeQueryServiceServer) testEmbeddedByValue() {}

// UnsafeInternalDataprimeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalDataprimeQueryServiceServer will
// result in compilation errors.
type UnsafeInternalDataprimeQueryServiceServer interface {
	mustEmbedUnimplementedInternalDataprimeQueryServiceServer()
}

func RegisterInternalDataprimeQueryServiceServer(s grpc.ServiceRegistrar, srv InternalDataprimeQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInternalDataprimeQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InternalDataprimeQueryService_ServiceDesc, srv)
}

func _InternalDataprimeQueryService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InternalDataprimeQueryServiceServer).Query(m, &grpc.GenericServerStream[QueryRequest, QueryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InternalDataprimeQueryService_QueryServer = grpc.ServerStreamingServer[QueryResponse]

// InternalDataprimeQueryService_ServiceDesc is the grpc.ServiceDesc for InternalDataprimeQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalDataprimeQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.dataprime.v1.InternalDataprimeQueryService",
	HandlerType: (*InternalDataprimeQueryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _InternalDataprimeQueryService_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/coralogix/dataprime/v1/internal_query_service.proto",
}
