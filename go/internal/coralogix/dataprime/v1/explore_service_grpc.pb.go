// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.3
// source: com/coralogix/dataprime/v1/explore_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DataprimeExploreService_RunDataprimeQuery_FullMethodName = "/com.coralogix.dataprime.v1.DataprimeExploreService/RunDataprimeQuery"
)

// DataprimeExploreServiceClient is the client API for DataprimeExploreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataprimeExploreServiceClient interface {
	RunDataprimeQuery(ctx context.Context, in *RunDataprimeQueryRequest, opts ...grpc.CallOption) (DataprimeExploreService_RunDataprimeQueryClient, error)
}

type dataprimeExploreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataprimeExploreServiceClient(cc grpc.ClientConnInterface) DataprimeExploreServiceClient {
	return &dataprimeExploreServiceClient{cc}
}

func (c *dataprimeExploreServiceClient) RunDataprimeQuery(ctx context.Context, in *RunDataprimeQueryRequest, opts ...grpc.CallOption) (DataprimeExploreService_RunDataprimeQueryClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataprimeExploreService_ServiceDesc.Streams[0], DataprimeExploreService_RunDataprimeQuery_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dataprimeExploreServiceRunDataprimeQueryClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataprimeExploreService_RunDataprimeQueryClient interface {
	Recv() (*RunDataprimeQueryResponse, error)
	grpc.ClientStream
}

type dataprimeExploreServiceRunDataprimeQueryClient struct {
	grpc.ClientStream
}

func (x *dataprimeExploreServiceRunDataprimeQueryClient) Recv() (*RunDataprimeQueryResponse, error) {
	m := new(RunDataprimeQueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataprimeExploreServiceServer is the server API for DataprimeExploreService service.
// All implementations must embed UnimplementedDataprimeExploreServiceServer
// for forward compatibility
type DataprimeExploreServiceServer interface {
	RunDataprimeQuery(*RunDataprimeQueryRequest, DataprimeExploreService_RunDataprimeQueryServer) error
	mustEmbedUnimplementedDataprimeExploreServiceServer()
}

// UnimplementedDataprimeExploreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataprimeExploreServiceServer struct {
}

func (UnimplementedDataprimeExploreServiceServer) RunDataprimeQuery(*RunDataprimeQueryRequest, DataprimeExploreService_RunDataprimeQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method RunDataprimeQuery not implemented")
}
func (UnimplementedDataprimeExploreServiceServer) mustEmbedUnimplementedDataprimeExploreServiceServer() {
}

// UnsafeDataprimeExploreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataprimeExploreServiceServer will
// result in compilation errors.
type UnsafeDataprimeExploreServiceServer interface {
	mustEmbedUnimplementedDataprimeExploreServiceServer()
}

func RegisterDataprimeExploreServiceServer(s grpc.ServiceRegistrar, srv DataprimeExploreServiceServer) {
	s.RegisterService(&DataprimeExploreService_ServiceDesc, srv)
}

func _DataprimeExploreService_RunDataprimeQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunDataprimeQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataprimeExploreServiceServer).RunDataprimeQuery(m, &dataprimeExploreServiceRunDataprimeQueryServer{ServerStream: stream})
}

type DataprimeExploreService_RunDataprimeQueryServer interface {
	Send(*RunDataprimeQueryResponse) error
	grpc.ServerStream
}

type dataprimeExploreServiceRunDataprimeQueryServer struct {
	grpc.ServerStream
}

func (x *dataprimeExploreServiceRunDataprimeQueryServer) Send(m *RunDataprimeQueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DataprimeExploreService_ServiceDesc is the grpc.ServiceDesc for DataprimeExploreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataprimeExploreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.dataprime.v1.DataprimeExploreService",
	HandlerType: (*DataprimeExploreServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunDataprimeQuery",
			Handler:       _DataprimeExploreService_RunDataprimeQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/coralogix/dataprime/v1/explore_service.proto",
}
