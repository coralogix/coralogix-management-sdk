// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.3
// source: com/coralogix/dataprime/v1/archive_query.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListQueriesRequest_Ordering int32

const (
	ListQueriesRequest_ORDERING_DESC_UNSPECIFIED ListQueriesRequest_Ordering = 0
	ListQueriesRequest_ORDERING_ASC              ListQueriesRequest_Ordering = 1
)

// Enum value maps for ListQueriesRequest_Ordering.
var (
	ListQueriesRequest_Ordering_name = map[int32]string{
		0: "ORDERING_DESC_UNSPECIFIED",
		1: "ORDERING_ASC",
	}
	ListQueriesRequest_Ordering_value = map[string]int32{
		"ORDERING_DESC_UNSPECIFIED": 0,
		"ORDERING_ASC":              1,
	}
)

func (x ListQueriesRequest_Ordering) Enum() *ListQueriesRequest_Ordering {
	p := new(ListQueriesRequest_Ordering)
	*p = x
	return p
}

func (x ListQueriesRequest_Ordering) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListQueriesRequest_Ordering) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_v1_archive_query_proto_enumTypes[0].Descriptor()
}

func (ListQueriesRequest_Ordering) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_v1_archive_query_proto_enumTypes[0]
}

func (x ListQueriesRequest_Ordering) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListQueriesRequest_Ordering.Descriptor instead.
func (ListQueriesRequest_Ordering) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{4, 0}
}

type QueryResultRequest_Format int32

const (
	QueryResultRequest_FORMAT_JSON_UNSPECIFIED QueryResultRequest_Format = 0
	QueryResultRequest_FORMAT_CSV              QueryResultRequest_Format = 1
)

// Enum value maps for QueryResultRequest_Format.
var (
	QueryResultRequest_Format_name = map[int32]string{
		0: "FORMAT_JSON_UNSPECIFIED",
		1: "FORMAT_CSV",
	}
	QueryResultRequest_Format_value = map[string]int32{
		"FORMAT_JSON_UNSPECIFIED": 0,
		"FORMAT_CSV":              1,
	}
)

func (x QueryResultRequest_Format) Enum() *QueryResultRequest_Format {
	p := new(QueryResultRequest_Format)
	*p = x
	return p
}

func (x QueryResultRequest_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryResultRequest_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_v1_archive_query_proto_enumTypes[1].Descriptor()
}

func (QueryResultRequest_Format) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_v1_archive_query_proto_enumTypes[1]
}

func (x QueryResultRequest_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryResultRequest_Format.Descriptor instead.
func (QueryResultRequest_Format) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{9, 0}
}

type ArchiveQuery_Status int32

const (
	ArchiveQuery_STATUS_PENDING_UNSPECIFIED ArchiveQuery_Status = 0
	ArchiveQuery_STATUS_IN_PROGRESS         ArchiveQuery_Status = 1
	ArchiveQuery_STATUS_COMPLETED           ArchiveQuery_Status = 2
	ArchiveQuery_STATUS_FAILED              ArchiveQuery_Status = 3
)

// Enum value maps for ArchiveQuery_Status.
var (
	ArchiveQuery_Status_name = map[int32]string{
		0: "STATUS_PENDING_UNSPECIFIED",
		1: "STATUS_IN_PROGRESS",
		2: "STATUS_COMPLETED",
		3: "STATUS_FAILED",
	}
	ArchiveQuery_Status_value = map[string]int32{
		"STATUS_PENDING_UNSPECIFIED": 0,
		"STATUS_IN_PROGRESS":         1,
		"STATUS_COMPLETED":           2,
		"STATUS_FAILED":              3,
	}
)

func (x ArchiveQuery_Status) Enum() *ArchiveQuery_Status {
	p := new(ArchiveQuery_Status)
	*p = x
	return p
}

func (x ArchiveQuery_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArchiveQuery_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_v1_archive_query_proto_enumTypes[2].Descriptor()
}

func (ArchiveQuery_Status) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_v1_archive_query_proto_enumTypes[2]
}

func (x ArchiveQuery_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArchiveQuery_Status.Descriptor instead.
func (ArchiveQuery_Status) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{13, 0}
}

type RunQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description        *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Syntax             QuerySyntax               `protobuf:"varint,3,opt,name=syntax,proto3,enum=com.coralogix.dataprime.v1.QuerySyntax" json:"syntax,omitempty"`
	Query              *QueryPayload             `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	RawQuery           *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=raw_query,json=rawQuery,proto3" json:"raw_query,omitempty"`
	FromDate           *timestamppb.Timestamp    `protobuf:"bytes,6,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate             *timestamppb.Timestamp    `protobuf:"bytes,7,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	ApplicationFilters []*wrapperspb.StringValue `protobuf:"bytes,8,rep,name=application_filters,json=applicationFilters,proto3" json:"application_filters,omitempty"`
	SeverityFilters    []*wrapperspb.StringValue `protobuf:"bytes,9,rep,name=severity_filters,json=severityFilters,proto3" json:"severity_filters,omitempty"`
	SubsystemFilters   []*wrapperspb.StringValue `protobuf:"bytes,10,rep,name=subsystem_filters,json=subsystemFilters,proto3" json:"subsystem_filters,omitempty"`
	WidgetId           *wrapperspb.StringValue   `protobuf:"bytes,11,opt,name=widget_id,json=widgetId,proto3,oneof" json:"widget_id,omitempty"`
	RequestParamsHash  *wrapperspb.StringValue   `protobuf:"bytes,12,opt,name=request_params_hash,json=requestParamsHash,proto3,oneof" json:"request_params_hash,omitempty"`
	TsvOutputSchema    *OutputSchema             `protobuf:"bytes,13,opt,name=tsv_output_schema,json=tsvOutputSchema,proto3,oneof" json:"tsv_output_schema,omitempty"`
}

func (x *RunQueryRequest) Reset() {
	*x = RunQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunQueryRequest) ProtoMessage() {}

func (x *RunQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunQueryRequest.ProtoReflect.Descriptor instead.
func (*RunQueryRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{0}
}

func (x *RunQueryRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *RunQueryRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *RunQueryRequest) GetSyntax() QuerySyntax {
	if x != nil {
		return x.Syntax
	}
	return QuerySyntax_QUERY_SYNTAX_DATAPRIME_UNSPECIFIED
}

func (x *RunQueryRequest) GetQuery() *QueryPayload {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *RunQueryRequest) GetRawQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.RawQuery
	}
	return nil
}

func (x *RunQueryRequest) GetFromDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *RunQueryRequest) GetToDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *RunQueryRequest) GetApplicationFilters() []*wrapperspb.StringValue {
	if x != nil {
		return x.ApplicationFilters
	}
	return nil
}

func (x *RunQueryRequest) GetSeverityFilters() []*wrapperspb.StringValue {
	if x != nil {
		return x.SeverityFilters
	}
	return nil
}

func (x *RunQueryRequest) GetSubsystemFilters() []*wrapperspb.StringValue {
	if x != nil {
		return x.SubsystemFilters
	}
	return nil
}

func (x *RunQueryRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *RunQueryRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *RunQueryRequest) GetTsvOutputSchema() *OutputSchema {
	if x != nil {
		return x.TsvOutputSchema
	}
	return nil
}

type OutputSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// empty means default fields
	Fields []*OutputSchemaField `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *OutputSchema) Reset() {
	*x = OutputSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputSchema) ProtoMessage() {}

func (x *OutputSchema) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputSchema.ProtoReflect.Descriptor instead.
func (*OutputSchema) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{1}
}

func (x *OutputSchema) GetFields() []*OutputSchemaField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type OutputSchemaField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *OutputSchemaField) Reset() {
	*x = OutputSchemaField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputSchemaField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputSchemaField) ProtoMessage() {}

func (x *OutputSchemaField) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputSchemaField.ProtoReflect.Descriptor instead.
func (*OutputSchemaField) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{2}
}

func (x *OutputSchemaField) GetPath() []*wrapperspb.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

type RunQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArchiveQuery *ArchiveQuery `protobuf:"bytes,1,opt,name=archive_query,json=archiveQuery,proto3" json:"archive_query,omitempty"`
}

func (x *RunQueryResponse) Reset() {
	*x = RunQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunQueryResponse) ProtoMessage() {}

func (x *RunQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunQueryResponse.ProtoReflect.Descriptor instead.
func (*RunQueryResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{3}
}

func (x *RunQueryResponse) GetArchiveQuery() *ArchiveQuery {
	if x != nil {
		return x.ArchiveQuery
	}
	return nil
}

type ListQueriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page                 int32                       `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size                 int32                       `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Filter               *wrapperspb.StringValue     `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	RequestParamsHash    *wrapperspb.StringValue     `protobuf:"bytes,4,opt,name=request_params_hash,json=requestParamsHash,proto3,oneof" json:"request_params_hash,omitempty"`
	Ordering             ListQueriesRequest_Ordering `protobuf:"varint,5,opt,name=ordering,proto3,enum=com.coralogix.dataprime.v1.ListQueriesRequest_Ordering" json:"ordering,omitempty"`
	OnlyDashboardQueries *wrapperspb.BoolValue       `protobuf:"bytes,6,opt,name=only_dashboard_queries,json=onlyDashboardQueries,proto3" json:"only_dashboard_queries,omitempty"`
}

func (x *ListQueriesRequest) Reset() {
	*x = ListQueriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueriesRequest) ProtoMessage() {}

func (x *ListQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueriesRequest.ProtoReflect.Descriptor instead.
func (*ListQueriesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{4}
}

func (x *ListQueriesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListQueriesRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListQueriesRequest) GetFilter() *wrapperspb.StringValue {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListQueriesRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *ListQueriesRequest) GetOrdering() ListQueriesRequest_Ordering {
	if x != nil {
		return x.Ordering
	}
	return ListQueriesRequest_ORDERING_DESC_UNSPECIFIED
}

func (x *ListQueriesRequest) GetOnlyDashboardQueries() *wrapperspb.BoolValue {
	if x != nil {
		return x.OnlyDashboardQueries
	}
	return nil
}

type ListQueriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArchiveQueries    []*ArchiveQuery         `protobuf:"bytes,1,rep,name=archive_queries,json=archiveQueries,proto3" json:"archive_queries,omitempty"`
	TotalCount        int32                   `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	RequestParamsHash *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=request_params_hash,json=requestParamsHash,proto3,oneof" json:"request_params_hash,omitempty"`
}

func (x *ListQueriesResponse) Reset() {
	*x = ListQueriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueriesResponse) ProtoMessage() {}

func (x *ListQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueriesResponse.ProtoReflect.Descriptor instead.
func (*ListQueriesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{5}
}

func (x *ListQueriesResponse) GetArchiveQueries() []*ArchiveQuery {
	if x != nil {
		return x.ArchiveQueries
	}
	return nil
}

func (x *ListQueriesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListQueriesResponse) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

type ListQueryNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32                   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	ContainsFilter *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=contains_filter,json=containsFilter,proto3,oneof" json:"contains_filter,omitempty"`
}

func (x *ListQueryNamesRequest) Reset() {
	*x = ListQueryNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueryNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueryNamesRequest) ProtoMessage() {}

func (x *ListQueryNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueryNamesRequest.ProtoReflect.Descriptor instead.
func (*ListQueryNamesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{6}
}

func (x *ListQueryNamesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListQueryNamesRequest) GetContainsFilter() *wrapperspb.StringValue {
	if x != nil {
		return x.ContainsFilter
	}
	return nil
}

type ListQueryNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryNames []*QueryName `protobuf:"bytes,1,rep,name=query_names,json=queryNames,proto3" json:"query_names,omitempty"`
}

func (x *ListQueryNamesResponse) Reset() {
	*x = ListQueryNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueryNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueryNamesResponse) ProtoMessage() {}

func (x *ListQueryNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueryNamesResponse.ProtoReflect.Descriptor instead.
func (*ListQueryNamesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{7}
}

func (x *ListQueryNamesResponse) GetQueryNames() []*QueryName {
	if x != nil {
		return x.QueryNames
	}
	return nil
}

type QueryName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryName *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=query_name,json=queryName,proto3" json:"query_name,omitempty"`
}

func (x *QueryName) Reset() {
	*x = QueryName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryName) ProtoMessage() {}

func (x *QueryName) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryName.ProtoReflect.Descriptor instead.
func (*QueryName) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{8}
}

func (x *QueryName) GetQueryName() *wrapperspb.StringValue {
	if x != nil {
		return x.QueryName
	}
	return nil
}

type QueryResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArchiveQueryId *wrapperspb.StringValue    `protobuf:"bytes,1,opt,name=archive_query_id,json=archiveQueryId,proto3" json:"archive_query_id,omitempty"`
	Query          *QueryPayload              `protobuf:"bytes,2,opt,name=query,proto3,oneof" json:"query,omitempty"`
	Page           *int32                     `protobuf:"varint,3,opt,name=page,proto3,oneof" json:"page,omitempty"`
	Size           *int32                     `protobuf:"varint,4,opt,name=size,proto3,oneof" json:"size,omitempty"`
	Format         *QueryResultRequest_Format `protobuf:"varint,5,opt,name=format,proto3,enum=com.coralogix.dataprime.v1.QueryResultRequest_Format,oneof" json:"format,omitempty"`
}

func (x *QueryResultRequest) Reset() {
	*x = QueryResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResultRequest) ProtoMessage() {}

func (x *QueryResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResultRequest.ProtoReflect.Descriptor instead.
func (*QueryResultRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{9}
}

func (x *QueryResultRequest) GetArchiveQueryId() *wrapperspb.StringValue {
	if x != nil {
		return x.ArchiveQueryId
	}
	return nil
}

func (x *QueryResultRequest) GetQuery() *QueryPayload {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryResultRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *QueryResultRequest) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *QueryResultRequest) GetFormat() QueryResultRequest_Format {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return QueryResultRequest_FORMAT_JSON_UNSPECIFIED
}

type QueryResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log *ArchiveLog `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *QueryResultResponse) Reset() {
	*x = QueryResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResultResponse) ProtoMessage() {}

func (x *QueryResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResultResponse.ProtoReflect.Descriptor instead.
func (*QueryResultResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{10}
}

func (x *QueryResultResponse) GetLog() *ArchiveLog {
	if x != nil {
		return x.Log
	}
	return nil
}

type GetQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetQueryRequest) Reset() {
	*x = GetQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryRequest) ProtoMessage() {}

func (x *GetQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryRequest.ProtoReflect.Descriptor instead.
func (*GetQueryRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{11}
}

func (x *GetQueryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArchiveQuery *ArchiveQuery `protobuf:"bytes,1,opt,name=archive_query,json=archiveQuery,proto3,oneof" json:"archive_query,omitempty"`
}

func (x *GetQueryResponse) Reset() {
	*x = GetQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryResponse) ProtoMessage() {}

func (x *GetQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryResponse.ProtoReflect.Descriptor instead.
func (*GetQueryResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{12}
}

func (x *GetQueryResponse) GetArchiveQuery() *ArchiveQuery {
	if x != nil {
		return x.ArchiveQuery
	}
	return nil
}

type ArchiveQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                    *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description             *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Syntax                  QuerySyntax               `protobuf:"varint,4,opt,name=syntax,proto3,enum=com.coralogix.dataprime.v1.QuerySyntax" json:"syntax,omitempty"`
	Query                   *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	FromDate                *timestamppb.Timestamp    `protobuf:"bytes,6,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate                  *timestamppb.Timestamp    `protobuf:"bytes,7,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	ApplicationFilters      []*wrapperspb.StringValue `protobuf:"bytes,8,rep,name=application_filters,json=applicationFilters,proto3" json:"application_filters,omitempty"`
	SeverityFilters         []*wrapperspb.StringValue `protobuf:"bytes,9,rep,name=severity_filters,json=severityFilters,proto3" json:"severity_filters,omitempty"`
	SubsystemFilters        []*wrapperspb.StringValue `protobuf:"bytes,10,rep,name=subsystem_filters,json=subsystemFilters,proto3" json:"subsystem_filters,omitempty"`
	Status                  ArchiveQuery_Status       `protobuf:"varint,11,opt,name=status,proto3,enum=com.coralogix.dataprime.v1.ArchiveQuery_Status" json:"status,omitempty"`
	CreatedBy               *wrapperspb.StringValue   `protobuf:"bytes,12,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	StartedAt               *timestamppb.Timestamp    `protobuf:"bytes,13,opt,name=started_at,json=startedAt,proto3,oneof" json:"started_at,omitempty"`
	CompletedAt             *timestamppb.Timestamp    `protobuf:"bytes,14,opt,name=completed_at,json=completedAt,proto3,oneof" json:"completed_at,omitempty"`
	ExpiresAt               *timestamppb.Timestamp    `protobuf:"bytes,15,opt,name=expires_at,json=expiresAt,proto3,oneof" json:"expires_at,omitempty"`
	StatusFailedDescription *wrapperspb.StringValue   `protobuf:"bytes,16,opt,name=status_failed_description,json=statusFailedDescription,proto3,oneof" json:"status_failed_description,omitempty"`
	RowsTotalCount          int64                     `protobuf:"varint,17,opt,name=rows_total_count,json=rowsTotalCount,proto3" json:"rows_total_count,omitempty"`
	WidgetId                *wrapperspb.StringValue   `protobuf:"bytes,18,opt,name=widget_id,json=widgetId,proto3,oneof" json:"widget_id,omitempty"`
	ScanLimitReached        bool                      `protobuf:"varint,19,opt,name=scan_limit_reached,json=scanLimitReached,proto3" json:"scan_limit_reached,omitempty"`
	BlocksLimitReached      bool                      `protobuf:"varint,20,opt,name=blocks_limit_reached,json=blocksLimitReached,proto3" json:"blocks_limit_reached,omitempty"`
	ArchiveWarning          *ArchiveWarning           `protobuf:"bytes,21,opt,name=archive_warning,json=archiveWarning,proto3" json:"archive_warning,omitempty"`
	TsvOutputSchema         *OutputSchema             `protobuf:"bytes,22,opt,name=tsv_output_schema,json=tsvOutputSchema,proto3,oneof" json:"tsv_output_schema,omitempty"`
}

func (x *ArchiveQuery) Reset() {
	*x = ArchiveQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveQuery) ProtoMessage() {}

func (x *ArchiveQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveQuery.ProtoReflect.Descriptor instead.
func (*ArchiveQuery) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP(), []int{13}
}

func (x *ArchiveQuery) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ArchiveQuery) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ArchiveQuery) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ArchiveQuery) GetSyntax() QuerySyntax {
	if x != nil {
		return x.Syntax
	}
	return QuerySyntax_QUERY_SYNTAX_DATAPRIME_UNSPECIFIED
}

func (x *ArchiveQuery) GetQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ArchiveQuery) GetFromDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *ArchiveQuery) GetToDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *ArchiveQuery) GetApplicationFilters() []*wrapperspb.StringValue {
	if x != nil {
		return x.ApplicationFilters
	}
	return nil
}

func (x *ArchiveQuery) GetSeverityFilters() []*wrapperspb.StringValue {
	if x != nil {
		return x.SeverityFilters
	}
	return nil
}

func (x *ArchiveQuery) GetSubsystemFilters() []*wrapperspb.StringValue {
	if x != nil {
		return x.SubsystemFilters
	}
	return nil
}

func (x *ArchiveQuery) GetStatus() ArchiveQuery_Status {
	if x != nil {
		return x.Status
	}
	return ArchiveQuery_STATUS_PENDING_UNSPECIFIED
}

func (x *ArchiveQuery) GetCreatedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *ArchiveQuery) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *ArchiveQuery) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *ArchiveQuery) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *ArchiveQuery) GetStatusFailedDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.StatusFailedDescription
	}
	return nil
}

func (x *ArchiveQuery) GetRowsTotalCount() int64 {
	if x != nil {
		return x.RowsTotalCount
	}
	return 0
}

func (x *ArchiveQuery) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *ArchiveQuery) GetScanLimitReached() bool {
	if x != nil {
		return x.ScanLimitReached
	}
	return false
}

func (x *ArchiveQuery) GetBlocksLimitReached() bool {
	if x != nil {
		return x.BlocksLimitReached
	}
	return false
}

func (x *ArchiveQuery) GetArchiveWarning() *ArchiveWarning {
	if x != nil {
		return x.ArchiveWarning
	}
	return nil
}

func (x *ArchiveQuery) GetTsvOutputSchema() *OutputSchema {
	if x != nil {
		return x.TsvOutputSchema
	}
	return nil
}

var File_com_coralogix_dataprime_v1_archive_query_proto protoreflect.FileDescriptor

var file_com_coralogix_dataprime_v1_archive_query_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x28, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x07, 0x0a, 0x0f, 0x52, 0x75, 0x6e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x52, 0x06, 0x73, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a,
	0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x10,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x3e, 0x0a, 0x09, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x08, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x51, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x11, 0x74, 0x73, 0x76, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48, 0x03, 0x52, 0x0f, 0x74, 0x73, 0x76, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x73, 0x76, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x55, 0x0a, 0x0c, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x45, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x45, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x61, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0d,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0c, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0xc1, 0x03, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x16, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x08, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x22,
	0xf4, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x13, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x60, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x85, 0x03, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48,
	0x03, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x22, 0x35, 0x0a, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x43, 0x53,
	0x56, 0x10, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x4f, 0x0a, 0x13, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0x21, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x78,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x88, 0x0d, 0x0a, 0x0c, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x12,
	0x32, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x4d, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x47, 0x0a, 0x10, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5d,
	0x0a, 0x19, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x04, 0x52, 0x17, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x6f, 0x77, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x05, 0x52, 0x08, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x11,
	0x74, 0x73, 0x76, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x48, 0x06, 0x52, 0x0f, 0x74, 0x73, 0x76, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x22, 0x69, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x74, 0x73, 0x76, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_dataprime_v1_archive_query_proto_rawDescOnce sync.Once
	file_com_coralogix_dataprime_v1_archive_query_proto_rawDescData = file_com_coralogix_dataprime_v1_archive_query_proto_rawDesc
)

func file_com_coralogix_dataprime_v1_archive_query_proto_rawDescGZIP() []byte {
	file_com_coralogix_dataprime_v1_archive_query_proto_rawDescOnce.Do(func() {
		file_com_coralogix_dataprime_v1_archive_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_dataprime_v1_archive_query_proto_rawDescData)
	})
	return file_com_coralogix_dataprime_v1_archive_query_proto_rawDescData
}

var file_com_coralogix_dataprime_v1_archive_query_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_com_coralogix_dataprime_v1_archive_query_proto_goTypes = []interface{}{
	(ListQueriesRequest_Ordering)(0), // 0: com.coralogix.dataprime.v1.ListQueriesRequest.Ordering
	(QueryResultRequest_Format)(0),   // 1: com.coralogix.dataprime.v1.QueryResultRequest.Format
	(ArchiveQuery_Status)(0),         // 2: com.coralogix.dataprime.v1.ArchiveQuery.Status
	(*RunQueryRequest)(nil),          // 3: com.coralogix.dataprime.v1.RunQueryRequest
	(*OutputSchema)(nil),             // 4: com.coralogix.dataprime.v1.OutputSchema
	(*OutputSchemaField)(nil),        // 5: com.coralogix.dataprime.v1.OutputSchemaField
	(*RunQueryResponse)(nil),         // 6: com.coralogix.dataprime.v1.RunQueryResponse
	(*ListQueriesRequest)(nil),       // 7: com.coralogix.dataprime.v1.ListQueriesRequest
	(*ListQueriesResponse)(nil),      // 8: com.coralogix.dataprime.v1.ListQueriesResponse
	(*ListQueryNamesRequest)(nil),    // 9: com.coralogix.dataprime.v1.ListQueryNamesRequest
	(*ListQueryNamesResponse)(nil),   // 10: com.coralogix.dataprime.v1.ListQueryNamesResponse
	(*QueryName)(nil),                // 11: com.coralogix.dataprime.v1.QueryName
	(*QueryResultRequest)(nil),       // 12: com.coralogix.dataprime.v1.QueryResultRequest
	(*QueryResultResponse)(nil),      // 13: com.coralogix.dataprime.v1.QueryResultResponse
	(*GetQueryRequest)(nil),          // 14: com.coralogix.dataprime.v1.GetQueryRequest
	(*GetQueryResponse)(nil),         // 15: com.coralogix.dataprime.v1.GetQueryResponse
	(*ArchiveQuery)(nil),             // 16: com.coralogix.dataprime.v1.ArchiveQuery
	(*wrapperspb.StringValue)(nil),   // 17: google.protobuf.StringValue
	(QuerySyntax)(0),                 // 18: com.coralogix.dataprime.v1.QuerySyntax
	(*QueryPayload)(nil),             // 19: com.coralogix.dataprime.v1.QueryPayload
	(*timestamppb.Timestamp)(nil),    // 20: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),     // 21: google.protobuf.BoolValue
	(*ArchiveLog)(nil),               // 22: com.coralogix.dataprime.v1.ArchiveLog
	(*ArchiveWarning)(nil),           // 23: com.coralogix.dataprime.v1.ArchiveWarning
}
var file_com_coralogix_dataprime_v1_archive_query_proto_depIdxs = []int32{
	17, // 0: com.coralogix.dataprime.v1.RunQueryRequest.name:type_name -> google.protobuf.StringValue
	17, // 1: com.coralogix.dataprime.v1.RunQueryRequest.description:type_name -> google.protobuf.StringValue
	18, // 2: com.coralogix.dataprime.v1.RunQueryRequest.syntax:type_name -> com.coralogix.dataprime.v1.QuerySyntax
	19, // 3: com.coralogix.dataprime.v1.RunQueryRequest.query:type_name -> com.coralogix.dataprime.v1.QueryPayload
	17, // 4: com.coralogix.dataprime.v1.RunQueryRequest.raw_query:type_name -> google.protobuf.StringValue
	20, // 5: com.coralogix.dataprime.v1.RunQueryRequest.from_date:type_name -> google.protobuf.Timestamp
	20, // 6: com.coralogix.dataprime.v1.RunQueryRequest.to_date:type_name -> google.protobuf.Timestamp
	17, // 7: com.coralogix.dataprime.v1.RunQueryRequest.application_filters:type_name -> google.protobuf.StringValue
	17, // 8: com.coralogix.dataprime.v1.RunQueryRequest.severity_filters:type_name -> google.protobuf.StringValue
	17, // 9: com.coralogix.dataprime.v1.RunQueryRequest.subsystem_filters:type_name -> google.protobuf.StringValue
	17, // 10: com.coralogix.dataprime.v1.RunQueryRequest.widget_id:type_name -> google.protobuf.StringValue
	17, // 11: com.coralogix.dataprime.v1.RunQueryRequest.request_params_hash:type_name -> google.protobuf.StringValue
	4,  // 12: com.coralogix.dataprime.v1.RunQueryRequest.tsv_output_schema:type_name -> com.coralogix.dataprime.v1.OutputSchema
	5,  // 13: com.coralogix.dataprime.v1.OutputSchema.fields:type_name -> com.coralogix.dataprime.v1.OutputSchemaField
	17, // 14: com.coralogix.dataprime.v1.OutputSchemaField.path:type_name -> google.protobuf.StringValue
	16, // 15: com.coralogix.dataprime.v1.RunQueryResponse.archive_query:type_name -> com.coralogix.dataprime.v1.ArchiveQuery
	17, // 16: com.coralogix.dataprime.v1.ListQueriesRequest.filter:type_name -> google.protobuf.StringValue
	17, // 17: com.coralogix.dataprime.v1.ListQueriesRequest.request_params_hash:type_name -> google.protobuf.StringValue
	0,  // 18: com.coralogix.dataprime.v1.ListQueriesRequest.ordering:type_name -> com.coralogix.dataprime.v1.ListQueriesRequest.Ordering
	21, // 19: com.coralogix.dataprime.v1.ListQueriesRequest.only_dashboard_queries:type_name -> google.protobuf.BoolValue
	16, // 20: com.coralogix.dataprime.v1.ListQueriesResponse.archive_queries:type_name -> com.coralogix.dataprime.v1.ArchiveQuery
	17, // 21: com.coralogix.dataprime.v1.ListQueriesResponse.request_params_hash:type_name -> google.protobuf.StringValue
	17, // 22: com.coralogix.dataprime.v1.ListQueryNamesRequest.contains_filter:type_name -> google.protobuf.StringValue
	11, // 23: com.coralogix.dataprime.v1.ListQueryNamesResponse.query_names:type_name -> com.coralogix.dataprime.v1.QueryName
	17, // 24: com.coralogix.dataprime.v1.QueryName.query_name:type_name -> google.protobuf.StringValue
	17, // 25: com.coralogix.dataprime.v1.QueryResultRequest.archive_query_id:type_name -> google.protobuf.StringValue
	19, // 26: com.coralogix.dataprime.v1.QueryResultRequest.query:type_name -> com.coralogix.dataprime.v1.QueryPayload
	1,  // 27: com.coralogix.dataprime.v1.QueryResultRequest.format:type_name -> com.coralogix.dataprime.v1.QueryResultRequest.Format
	22, // 28: com.coralogix.dataprime.v1.QueryResultResponse.log:type_name -> com.coralogix.dataprime.v1.ArchiveLog
	16, // 29: com.coralogix.dataprime.v1.GetQueryResponse.archive_query:type_name -> com.coralogix.dataprime.v1.ArchiveQuery
	17, // 30: com.coralogix.dataprime.v1.ArchiveQuery.id:type_name -> google.protobuf.StringValue
	17, // 31: com.coralogix.dataprime.v1.ArchiveQuery.name:type_name -> google.protobuf.StringValue
	17, // 32: com.coralogix.dataprime.v1.ArchiveQuery.description:type_name -> google.protobuf.StringValue
	18, // 33: com.coralogix.dataprime.v1.ArchiveQuery.syntax:type_name -> com.coralogix.dataprime.v1.QuerySyntax
	17, // 34: com.coralogix.dataprime.v1.ArchiveQuery.query:type_name -> google.protobuf.StringValue
	20, // 35: com.coralogix.dataprime.v1.ArchiveQuery.from_date:type_name -> google.protobuf.Timestamp
	20, // 36: com.coralogix.dataprime.v1.ArchiveQuery.to_date:type_name -> google.protobuf.Timestamp
	17, // 37: com.coralogix.dataprime.v1.ArchiveQuery.application_filters:type_name -> google.protobuf.StringValue
	17, // 38: com.coralogix.dataprime.v1.ArchiveQuery.severity_filters:type_name -> google.protobuf.StringValue
	17, // 39: com.coralogix.dataprime.v1.ArchiveQuery.subsystem_filters:type_name -> google.protobuf.StringValue
	2,  // 40: com.coralogix.dataprime.v1.ArchiveQuery.status:type_name -> com.coralogix.dataprime.v1.ArchiveQuery.Status
	17, // 41: com.coralogix.dataprime.v1.ArchiveQuery.created_by:type_name -> google.protobuf.StringValue
	20, // 42: com.coralogix.dataprime.v1.ArchiveQuery.started_at:type_name -> google.protobuf.Timestamp
	20, // 43: com.coralogix.dataprime.v1.ArchiveQuery.completed_at:type_name -> google.protobuf.Timestamp
	20, // 44: com.coralogix.dataprime.v1.ArchiveQuery.expires_at:type_name -> google.protobuf.Timestamp
	17, // 45: com.coralogix.dataprime.v1.ArchiveQuery.status_failed_description:type_name -> google.protobuf.StringValue
	17, // 46: com.coralogix.dataprime.v1.ArchiveQuery.widget_id:type_name -> google.protobuf.StringValue
	23, // 47: com.coralogix.dataprime.v1.ArchiveQuery.archive_warning:type_name -> com.coralogix.dataprime.v1.ArchiveWarning
	4,  // 48: com.coralogix.dataprime.v1.ArchiveQuery.tsv_output_schema:type_name -> com.coralogix.dataprime.v1.OutputSchema
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_com_coralogix_dataprime_v1_archive_query_proto_init() }
func file_com_coralogix_dataprime_v1_archive_query_proto_init() {
	if File_com_coralogix_dataprime_v1_archive_query_proto != nil {
		return
	}
	file_com_coralogix_dataprime_v1_compile_proto_init()
	file_com_coralogix_dataprime_v1_query_proto_init()
	file_com_coralogix_dataprime_v1_warnings_proto_init()
	file_com_coralogix_dataprime_v1_archive_log_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputSchemaField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueryNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueryNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_dataprime_v1_archive_query_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_dataprime_v1_archive_query_proto_goTypes,
		DependencyIndexes: file_com_coralogix_dataprime_v1_archive_query_proto_depIdxs,
		EnumInfos:         file_com_coralogix_dataprime_v1_archive_query_proto_enumTypes,
		MessageInfos:      file_com_coralogix_dataprime_v1_archive_query_proto_msgTypes,
	}.Build()
	File_com_coralogix_dataprime_v1_archive_query_proto = out.File
	file_com_coralogix_dataprime_v1_archive_query_proto_rawDesc = nil
	file_com_coralogix_dataprime_v1_archive_query_proto_goTypes = nil
	file_com_coralogix_dataprime_v1_archive_query_proto_depIdxs = nil
}
