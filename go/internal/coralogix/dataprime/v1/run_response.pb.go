// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: com/coralogix/dataprime/v1/run_response.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunDataprimeQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*RunDataprimeQueryResponse_Error
	//	*RunDataprimeQueryResponse_LogResult
	//	*RunDataprimeQueryResponse_SeverityHistogram
	//	*RunDataprimeQueryResponse_Count
	//	*RunDataprimeQueryResponse_KeyDistribution
	//	*RunDataprimeQueryResponse_Histogram
	//	*RunDataprimeQueryResponse_ComparedHistogram
	//	*RunDataprimeQueryResponse_SidebarFilters
	//	*RunDataprimeQueryResponse_RequestStatistics
	//	*RunDataprimeQueryResponse_TeamIdCounts
	//	*RunDataprimeQueryResponse_MappingExceptionsCount
	Message isRunDataprimeQueryResponse_Message `protobuf_oneof:"message"`
}

func (x *RunDataprimeQueryResponse) Reset() {
	*x = RunDataprimeQueryResponse{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunDataprimeQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDataprimeQueryResponse) ProtoMessage() {}

func (x *RunDataprimeQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDataprimeQueryResponse.ProtoReflect.Descriptor instead.
func (*RunDataprimeQueryResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{0}
}

func (m *RunDataprimeQueryResponse) GetMessage() isRunDataprimeQueryResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *RunDataprimeQueryResponse) GetError() *Error {
	if x, ok := x.GetMessage().(*RunDataprimeQueryResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *RunDataprimeQueryResponse) GetLogResult() *LogResult {
	if x, ok := x.GetMessage().(*RunDataprimeQueryResponse_LogResult); ok {
		return x.LogResult
	}
	return nil
}

func (x *RunDataprimeQueryResponse) GetSeverityHistogram() *SeverityHistogram {
	if x, ok := x.GetMessage().(*RunDataprimeQueryResponse_SeverityHistogram); ok {
		return x.SeverityHistogram
	}
	return nil
}

func (x *RunDataprimeQueryResponse) GetCount() *Count {
	if x, ok := x.GetMessage().(*RunDataprimeQueryResponse_Count); ok {
		return x.Count
	}
	return nil
}

func (x *RunDataprimeQueryResponse) GetKeyDistribution() *KeyDistribution {
	if x, ok := x.GetMessage().(*RunDataprimeQueryResponse_KeyDistribution); ok {
		return x.KeyDistribution
	}
	return nil
}

func (x *RunDataprimeQueryResponse) GetHistogram() *Histogram {
	if x, ok := x.GetMessage().(*RunDataprimeQueryResponse_Histogram); ok {
		return x.Histogram
	}
	return nil
}

func (x *RunDataprimeQueryResponse) GetComparedHistogram() *Histogram {
	if x, ok := x.GetMessage().(*RunDataprimeQueryResponse_ComparedHistogram); ok {
		return x.ComparedHistogram
	}
	return nil
}

func (x *RunDataprimeQueryResponse) GetSidebarFilters() *SideBarFilters {
	if x, ok := x.GetMessage().(*RunDataprimeQueryResponse_SidebarFilters); ok {
		return x.SidebarFilters
	}
	return nil
}

func (x *RunDataprimeQueryResponse) GetRequestStatistics() *RequestStatistics {
	if x, ok := x.GetMessage().(*RunDataprimeQueryResponse_RequestStatistics); ok {
		return x.RequestStatistics
	}
	return nil
}

func (x *RunDataprimeQueryResponse) GetTeamIdCounts() *TeamIdCounts {
	if x, ok := x.GetMessage().(*RunDataprimeQueryResponse_TeamIdCounts); ok {
		return x.TeamIdCounts
	}
	return nil
}

func (x *RunDataprimeQueryResponse) GetMappingExceptionsCount() *MappingExceptionsCount {
	if x, ok := x.GetMessage().(*RunDataprimeQueryResponse_MappingExceptionsCount); ok {
		return x.MappingExceptionsCount
	}
	return nil
}

type isRunDataprimeQueryResponse_Message interface {
	isRunDataprimeQueryResponse_Message()
}

type RunDataprimeQueryResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type RunDataprimeQueryResponse_LogResult struct {
	LogResult *LogResult `protobuf:"bytes,2,opt,name=log_result,json=logResult,proto3,oneof"`
}

type RunDataprimeQueryResponse_SeverityHistogram struct {
	// Might be replaced with generic histogram in the future
	SeverityHistogram *SeverityHistogram `protobuf:"bytes,3,opt,name=severity_histogram,json=severityHistogram,proto3,oneof"`
}

type RunDataprimeQueryResponse_Count struct {
	Count *Count `protobuf:"bytes,7,opt,name=count,proto3,oneof"`
}

type RunDataprimeQueryResponse_KeyDistribution struct {
	KeyDistribution *KeyDistribution `protobuf:"bytes,8,opt,name=key_distribution,json=keyDistribution,proto3,oneof"`
}

type RunDataprimeQueryResponse_Histogram struct {
	Histogram *Histogram `protobuf:"bytes,9,opt,name=histogram,proto3,oneof"`
}

type RunDataprimeQueryResponse_ComparedHistogram struct {
	ComparedHistogram *Histogram `protobuf:"bytes,10,opt,name=compared_histogram,json=comparedHistogram,proto3,oneof"`
}

type RunDataprimeQueryResponse_SidebarFilters struct {
	SidebarFilters *SideBarFilters `protobuf:"bytes,11,opt,name=sidebar_filters,json=sidebarFilters,proto3,oneof"`
}

type RunDataprimeQueryResponse_RequestStatistics struct {
	RequestStatistics *RequestStatistics `protobuf:"bytes,12,opt,name=request_statistics,json=requestStatistics,proto3,oneof"`
}

type RunDataprimeQueryResponse_TeamIdCounts struct {
	TeamIdCounts *TeamIdCounts `protobuf:"bytes,13,opt,name=team_id_counts,json=teamIdCounts,proto3,oneof"`
}

type RunDataprimeQueryResponse_MappingExceptionsCount struct {
	MappingExceptionsCount *MappingExceptionsCount `protobuf:"bytes,14,opt,name=mapping_exceptions_count,json=mappingExceptionsCount,proto3,oneof"`
}

func (*RunDataprimeQueryResponse_Error) isRunDataprimeQueryResponse_Message() {}

func (*RunDataprimeQueryResponse_LogResult) isRunDataprimeQueryResponse_Message() {}

func (*RunDataprimeQueryResponse_SeverityHistogram) isRunDataprimeQueryResponse_Message() {}

func (*RunDataprimeQueryResponse_Count) isRunDataprimeQueryResponse_Message() {}

func (*RunDataprimeQueryResponse_KeyDistribution) isRunDataprimeQueryResponse_Message() {}

func (*RunDataprimeQueryResponse_Histogram) isRunDataprimeQueryResponse_Message() {}

func (*RunDataprimeQueryResponse_ComparedHistogram) isRunDataprimeQueryResponse_Message() {}

func (*RunDataprimeQueryResponse_SidebarFilters) isRunDataprimeQueryResponse_Message() {}

func (*RunDataprimeQueryResponse_RequestStatistics) isRunDataprimeQueryResponse_Message() {}

func (*RunDataprimeQueryResponse_TeamIdCounts) isRunDataprimeQueryResponse_Message() {}

func (*RunDataprimeQueryResponse_MappingExceptionsCount) isRunDataprimeQueryResponse_Message() {}

type LogResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results  []*LogEntry            `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Warnings []*DataprimeWarning    `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Skipped  *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=skipped,proto3" json:"skipped,omitempty"`
}

func (x *LogResult) Reset() {
	*x = LogResult{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResult) ProtoMessage() {}

func (x *LogResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResult.ProtoReflect.Descriptor instead.
func (*LogResult) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{1}
}

func (x *LogResult) GetResults() []*LogEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *LogResult) GetWarnings() []*DataprimeWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *LogResult) GetSkipped() *wrapperspb.Int64Value {
	if x != nil {
		return x.Skipped
	}
	return nil
}

type SeverityCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugCount    *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=debug_count,json=debugCount,proto3" json:"debug_count,omitempty"`
	InfoCount     *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=info_count,json=infoCount,proto3" json:"info_count,omitempty"`
	WarningCount  *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=warning_count,json=warningCount,proto3" json:"warning_count,omitempty"`
	ErrorCount    *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	CriticalCount *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=critical_count,json=criticalCount,proto3" json:"critical_count,omitempty"`
	VerboseCount  *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=verbose_count,json=verboseCount,proto3" json:"verbose_count,omitempty"`
	Warnings      []*DataprimeWarning    `protobuf:"bytes,7,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *SeverityCounts) Reset() {
	*x = SeverityCounts{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeverityCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeverityCounts) ProtoMessage() {}

func (x *SeverityCounts) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeverityCounts.ProtoReflect.Descriptor instead.
func (*SeverityCounts) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{2}
}

func (x *SeverityCounts) GetDebugCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.DebugCount
	}
	return nil
}

func (x *SeverityCounts) GetInfoCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.InfoCount
	}
	return nil
}

func (x *SeverityCounts) GetWarningCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.WarningCount
	}
	return nil
}

func (x *SeverityCounts) GetErrorCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.ErrorCount
	}
	return nil
}

func (x *SeverityCounts) GetCriticalCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.CriticalCount
	}
	return nil
}

func (x *SeverityCounts) GetVerboseCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.VerboseCount
	}
	return nil
}

func (x *SeverityCounts) GetWarnings() []*DataprimeWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type SeverityHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets  []*SeverityHistogram_Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
	Warnings []*DataprimeWarning         `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *SeverityHistogram) Reset() {
	*x = SeverityHistogram{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeverityHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeverityHistogram) ProtoMessage() {}

func (x *SeverityHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeverityHistogram.ProtoReflect.Descriptor instead.
func (*SeverityHistogram) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{3}
}

func (x *SeverityHistogram) GetBuckets() []*SeverityHistogram_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *SeverityHistogram) GetWarnings() []*DataprimeWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type DefaultTermCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TermCounts []*DefaultTermCounts_TermCount `protobuf:"bytes,1,rep,name=term_counts,json=termCounts,proto3" json:"term_counts,omitempty"`
	Warnings   []*DataprimeWarning            `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *DefaultTermCounts) Reset() {
	*x = DefaultTermCounts{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultTermCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultTermCounts) ProtoMessage() {}

func (x *DefaultTermCounts) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultTermCounts.ProtoReflect.Descriptor instead.
func (*DefaultTermCounts) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{4}
}

func (x *DefaultTermCounts) GetTermCounts() []*DefaultTermCounts_TermCount {
	if x != nil {
		return x.TermCounts
	}
	return nil
}

func (x *DefaultTermCounts) GetWarnings() []*DataprimeWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type SideBarFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SidebarFilter []*SideBarFilter    `protobuf:"bytes,1,rep,name=sidebar_filter,json=sidebarFilter,proto3" json:"sidebar_filter,omitempty"`
	Warnings      []*DataprimeWarning `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *SideBarFilters) Reset() {
	*x = SideBarFilters{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SideBarFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideBarFilters) ProtoMessage() {}

func (x *SideBarFilters) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideBarFilters.ProtoReflect.Descriptor instead.
func (*SideBarFilters) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{5}
}

func (x *SideBarFilters) GetSidebarFilter() []*SideBarFilter {
	if x != nil {
		return x.SidebarFilter
	}
	return nil
}

func (x *SideBarFilters) GetWarnings() []*DataprimeWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type SideBarFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use 'field' instead
	//
	// Deprecated: Marked as deprecated in com/coralogix/dataprime/v1/run_response.proto.
	FilterName *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
	Term       *DefaultTermCounts      `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
	Field      *UntypedKeypath         `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *SideBarFilter) Reset() {
	*x = SideBarFilter{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SideBarFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideBarFilter) ProtoMessage() {}

func (x *SideBarFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideBarFilter.ProtoReflect.Descriptor instead.
func (*SideBarFilter) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{6}
}

// Deprecated: Marked as deprecated in com/coralogix/dataprime/v1/run_response.proto.
func (x *SideBarFilter) GetFilterName() *wrapperspb.StringValue {
	if x != nil {
		return x.FilterName
	}
	return nil
}

func (x *SideBarFilter) GetTerm() *DefaultTermCounts {
	if x != nil {
		return x.Term
	}
	return nil
}

func (x *SideBarFilter) GetField() *UntypedKeypath {
	if x != nil {
		return x.Field
	}
	return nil
}

type Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount  *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	ResultCount *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=result_count,json=resultCount,proto3" json:"result_count,omitempty"`
	Warnings    []*DataprimeWarning    `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *Count) Reset() {
	*x = Count{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Count) ProtoMessage() {}

func (x *Count) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Count.ProtoReflect.Descriptor instead.
func (*Count) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{7}
}

func (x *Count) GetTotalCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.TotalCount
	}
	return nil
}

func (x *Count) GetResultCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.ResultCount
	}
	return nil
}

func (x *Count) GetWarnings() []*DataprimeWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type KeyDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Distribution map[string]int64    `protobuf:"bytes,2,rep,name=distribution,proto3" json:"distribution,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Warnings     []*DataprimeWarning `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *KeyDistribution) Reset() {
	*x = KeyDistribution{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyDistribution) ProtoMessage() {}

func (x *KeyDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyDistribution.ProtoReflect.Descriptor instead.
func (*KeyDistribution) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{8}
}

func (x *KeyDistribution) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyDistribution) GetDistribution() map[string]int64 {
	if x != nil {
		return x.Distribution
	}
	return nil
}

func (x *KeyDistribution) GetWarnings() []*DataprimeWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type Histogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values     []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	Timestamps []*HistogramSlice         `protobuf:"bytes,2,rep,name=timestamps,proto3" json:"timestamps,omitempty"`
	Warnings   []*DataprimeWarning       `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *Histogram) Reset() {
	*x = Histogram{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Histogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Histogram) ProtoMessage() {}

func (x *Histogram) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Histogram.ProtoReflect.Descriptor instead.
func (*Histogram) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{9}
}

func (x *Histogram) GetValues() []*wrapperspb.StringValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Histogram) GetTimestamps() []*HistogramSlice {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *Histogram) GetWarnings() []*DataprimeWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type RequestStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesScanned *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=bytes_scanned,json=bytesScanned,proto3" json:"bytes_scanned,omitempty"`
}

func (x *RequestStatistics) Reset() {
	*x = RequestStatistics{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStatistics) ProtoMessage() {}

func (x *RequestStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStatistics.ProtoReflect.Descriptor instead.
func (*RequestStatistics) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{10}
}

func (x *RequestStatistics) GetBytesScanned() *wrapperspb.Int64Value {
	if x != nil {
		return x.BytesScanned
	}
	return nil
}

type TeamIdCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamIdCounts []*TeamIdCount `protobuf:"bytes,1,rep,name=team_id_counts,json=teamIdCounts,proto3" json:"team_id_counts,omitempty"`
}

func (x *TeamIdCounts) Reset() {
	*x = TeamIdCounts{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamIdCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamIdCounts) ProtoMessage() {}

func (x *TeamIdCounts) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamIdCounts.ProtoReflect.Descriptor instead.
func (*TeamIdCounts) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{11}
}

func (x *TeamIdCounts) GetTeamIdCounts() []*TeamIdCount {
	if x != nil {
		return x.TeamIdCounts
	}
	return nil
}

type TeamIdCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	Count *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TeamIdCount) Reset() {
	*x = TeamIdCount{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamIdCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamIdCount) ProtoMessage() {}

func (x *TeamIdCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamIdCount.ProtoReflect.Descriptor instead.
func (*TeamIdCount) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{12}
}

func (x *TeamIdCount) GetTerm() *wrapperspb.StringValue {
	if x != nil {
		return x.Term
	}
	return nil
}

func (x *TeamIdCount) GetCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type MappingExceptionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MappingExceptionsCount) Reset() {
	*x = MappingExceptionsCount{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MappingExceptionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingExceptionsCount) ProtoMessage() {}

func (x *MappingExceptionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingExceptionsCount.ProtoReflect.Descriptor instead.
func (*MappingExceptionsCount) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{13}
}

func (x *MappingExceptionsCount) GetCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.Count
	}
	return nil
}

// ------- Response entities
type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Labels   []*KeyValue            `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	Metadata []*KeyValue            `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
	Data     string                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{14}
}

func (x *LogEntry) GetIndex() *wrapperspb.Int64Value {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *LogEntry) GetLabels() []*KeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LogEntry) GetMetadata() []*KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LogEntry) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Labels   []*KeyValue            `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	Metadata []*KeyValue            `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
	Data     string                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{15}
}

func (x *Result) GetIndex() *wrapperspb.Int64Value {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *Result) GetLabels() []*KeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Result) GetMetadata() []*KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Result) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type SeverityHistogram_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	SeverityCounts *SeverityCounts        `protobuf:"bytes,2,opt,name=severity_counts,json=severityCounts,proto3" json:"severity_counts,omitempty"`
}

func (x *SeverityHistogram_Bucket) Reset() {
	*x = SeverityHistogram_Bucket{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeverityHistogram_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeverityHistogram_Bucket) ProtoMessage() {}

func (x *SeverityHistogram_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeverityHistogram_Bucket.ProtoReflect.Descriptor instead.
func (*SeverityHistogram_Bucket) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{3, 0}
}

func (x *SeverityHistogram_Bucket) GetBucket() *timestamppb.Timestamp {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *SeverityHistogram_Bucket) GetSeverityCounts() *SeverityCounts {
	if x != nil {
		return x.SeverityCounts
	}
	return nil
}

type DefaultTermCounts_TermCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	Count *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DefaultTermCounts_TermCount) Reset() {
	*x = DefaultTermCounts_TermCount{}
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultTermCounts_TermCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultTermCounts_TermCount) ProtoMessage() {}

func (x *DefaultTermCounts_TermCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultTermCounts_TermCount.ProtoReflect.Descriptor instead.
func (*DefaultTermCounts_TermCount) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP(), []int{4, 0}
}

func (x *DefaultTermCounts_TermCount) GetTerm() *wrapperspb.StringValue {
	if x != nil {
		return x.Term
	}
	return nil
}

func (x *DefaultTermCounts_TermCount) GetCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.Count
	}
	return nil
}

var File_com_coralogix_dataprime_v1_run_response_proto protoreflect.FileDescriptor

var file_com_coralogix_dataprime_v1_run_response_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x07, 0x0a, 0x19, 0x52, 0x75, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x46, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5e, 0x0a, 0x12, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6b,
	0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x55, 0x0a,
	0x0f, 0x73, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x42, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48,
	0x00, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x18, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08,
	0x06, 0x10, 0x07, 0x22, 0xd2, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x48, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xda, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x76, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x4e, 0x0a, 0x07, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x91, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x32, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x0f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x0e, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x11, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x58, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x74,
	0x65, 0x72, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x1a, 0x70, 0x0a, 0x09, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x64, 0x65, 0x42, 0x61,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x73, 0x69, 0x64, 0x65,
	0x62, 0x61, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x64, 0x65, 0x42, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x73, 0x69, 0x64,
	0x65, 0x62, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x08, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x64, 0x65, 0x42, 0x61, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x65, 0x72,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x40, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xcf,
	0x01, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x91, 0x02, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x61, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd7, 0x01, 0x0a, 0x09, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x34, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x55,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0x5d, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x22, 0x72, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcf, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_dataprime_v1_run_response_proto_rawDescOnce sync.Once
	file_com_coralogix_dataprime_v1_run_response_proto_rawDescData = file_com_coralogix_dataprime_v1_run_response_proto_rawDesc
)

func file_com_coralogix_dataprime_v1_run_response_proto_rawDescGZIP() []byte {
	file_com_coralogix_dataprime_v1_run_response_proto_rawDescOnce.Do(func() {
		file_com_coralogix_dataprime_v1_run_response_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_dataprime_v1_run_response_proto_rawDescData)
	})
	return file_com_coralogix_dataprime_v1_run_response_proto_rawDescData
}

var file_com_coralogix_dataprime_v1_run_response_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_com_coralogix_dataprime_v1_run_response_proto_goTypes = []any{
	(*RunDataprimeQueryResponse)(nil),   // 0: com.coralogix.dataprime.v1.RunDataprimeQueryResponse
	(*LogResult)(nil),                   // 1: com.coralogix.dataprime.v1.LogResult
	(*SeverityCounts)(nil),              // 2: com.coralogix.dataprime.v1.SeverityCounts
	(*SeverityHistogram)(nil),           // 3: com.coralogix.dataprime.v1.SeverityHistogram
	(*DefaultTermCounts)(nil),           // 4: com.coralogix.dataprime.v1.DefaultTermCounts
	(*SideBarFilters)(nil),              // 5: com.coralogix.dataprime.v1.SideBarFilters
	(*SideBarFilter)(nil),               // 6: com.coralogix.dataprime.v1.SideBarFilter
	(*Count)(nil),                       // 7: com.coralogix.dataprime.v1.Count
	(*KeyDistribution)(nil),             // 8: com.coralogix.dataprime.v1.KeyDistribution
	(*Histogram)(nil),                   // 9: com.coralogix.dataprime.v1.Histogram
	(*RequestStatistics)(nil),           // 10: com.coralogix.dataprime.v1.RequestStatistics
	(*TeamIdCounts)(nil),                // 11: com.coralogix.dataprime.v1.TeamIdCounts
	(*TeamIdCount)(nil),                 // 12: com.coralogix.dataprime.v1.TeamIdCount
	(*MappingExceptionsCount)(nil),      // 13: com.coralogix.dataprime.v1.MappingExceptionsCount
	(*LogEntry)(nil),                    // 14: com.coralogix.dataprime.v1.LogEntry
	(*Result)(nil),                      // 15: com.coralogix.dataprime.v1.Result
	(*SeverityHistogram_Bucket)(nil),    // 16: com.coralogix.dataprime.v1.SeverityHistogram.Bucket
	(*DefaultTermCounts_TermCount)(nil), // 17: com.coralogix.dataprime.v1.DefaultTermCounts.TermCount
	nil,                                 // 18: com.coralogix.dataprime.v1.KeyDistribution.DistributionEntry
	(*Error)(nil),                       // 19: com.coralogix.dataprime.v1.Error
	(*DataprimeWarning)(nil),            // 20: com.coralogix.dataprime.v1.DataprimeWarning
	(*wrapperspb.Int64Value)(nil),       // 21: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil),      // 22: google.protobuf.StringValue
	(*UntypedKeypath)(nil),              // 23: com.coralogix.dataprime.v1.UntypedKeypath
	(*HistogramSlice)(nil),              // 24: com.coralogix.dataprime.v1.HistogramSlice
	(*KeyValue)(nil),                    // 25: com.coralogix.dataprime.v1.KeyValue
	(*timestamppb.Timestamp)(nil),       // 26: google.protobuf.Timestamp
}
var file_com_coralogix_dataprime_v1_run_response_proto_depIdxs = []int32{
	19, // 0: com.coralogix.dataprime.v1.RunDataprimeQueryResponse.error:type_name -> com.coralogix.dataprime.v1.Error
	1,  // 1: com.coralogix.dataprime.v1.RunDataprimeQueryResponse.log_result:type_name -> com.coralogix.dataprime.v1.LogResult
	3,  // 2: com.coralogix.dataprime.v1.RunDataprimeQueryResponse.severity_histogram:type_name -> com.coralogix.dataprime.v1.SeverityHistogram
	7,  // 3: com.coralogix.dataprime.v1.RunDataprimeQueryResponse.count:type_name -> com.coralogix.dataprime.v1.Count
	8,  // 4: com.coralogix.dataprime.v1.RunDataprimeQueryResponse.key_distribution:type_name -> com.coralogix.dataprime.v1.KeyDistribution
	9,  // 5: com.coralogix.dataprime.v1.RunDataprimeQueryResponse.histogram:type_name -> com.coralogix.dataprime.v1.Histogram
	9,  // 6: com.coralogix.dataprime.v1.RunDataprimeQueryResponse.compared_histogram:type_name -> com.coralogix.dataprime.v1.Histogram
	5,  // 7: com.coralogix.dataprime.v1.RunDataprimeQueryResponse.sidebar_filters:type_name -> com.coralogix.dataprime.v1.SideBarFilters
	10, // 8: com.coralogix.dataprime.v1.RunDataprimeQueryResponse.request_statistics:type_name -> com.coralogix.dataprime.v1.RequestStatistics
	11, // 9: com.coralogix.dataprime.v1.RunDataprimeQueryResponse.team_id_counts:type_name -> com.coralogix.dataprime.v1.TeamIdCounts
	13, // 10: com.coralogix.dataprime.v1.RunDataprimeQueryResponse.mapping_exceptions_count:type_name -> com.coralogix.dataprime.v1.MappingExceptionsCount
	14, // 11: com.coralogix.dataprime.v1.LogResult.results:type_name -> com.coralogix.dataprime.v1.LogEntry
	20, // 12: com.coralogix.dataprime.v1.LogResult.warnings:type_name -> com.coralogix.dataprime.v1.DataprimeWarning
	21, // 13: com.coralogix.dataprime.v1.LogResult.skipped:type_name -> google.protobuf.Int64Value
	21, // 14: com.coralogix.dataprime.v1.SeverityCounts.debug_count:type_name -> google.protobuf.Int64Value
	21, // 15: com.coralogix.dataprime.v1.SeverityCounts.info_count:type_name -> google.protobuf.Int64Value
	21, // 16: com.coralogix.dataprime.v1.SeverityCounts.warning_count:type_name -> google.protobuf.Int64Value
	21, // 17: com.coralogix.dataprime.v1.SeverityCounts.error_count:type_name -> google.protobuf.Int64Value
	21, // 18: com.coralogix.dataprime.v1.SeverityCounts.critical_count:type_name -> google.protobuf.Int64Value
	21, // 19: com.coralogix.dataprime.v1.SeverityCounts.verbose_count:type_name -> google.protobuf.Int64Value
	20, // 20: com.coralogix.dataprime.v1.SeverityCounts.warnings:type_name -> com.coralogix.dataprime.v1.DataprimeWarning
	16, // 21: com.coralogix.dataprime.v1.SeverityHistogram.buckets:type_name -> com.coralogix.dataprime.v1.SeverityHistogram.Bucket
	20, // 22: com.coralogix.dataprime.v1.SeverityHistogram.warnings:type_name -> com.coralogix.dataprime.v1.DataprimeWarning
	17, // 23: com.coralogix.dataprime.v1.DefaultTermCounts.term_counts:type_name -> com.coralogix.dataprime.v1.DefaultTermCounts.TermCount
	20, // 24: com.coralogix.dataprime.v1.DefaultTermCounts.warnings:type_name -> com.coralogix.dataprime.v1.DataprimeWarning
	6,  // 25: com.coralogix.dataprime.v1.SideBarFilters.sidebar_filter:type_name -> com.coralogix.dataprime.v1.SideBarFilter
	20, // 26: com.coralogix.dataprime.v1.SideBarFilters.warnings:type_name -> com.coralogix.dataprime.v1.DataprimeWarning
	22, // 27: com.coralogix.dataprime.v1.SideBarFilter.filter_name:type_name -> google.protobuf.StringValue
	4,  // 28: com.coralogix.dataprime.v1.SideBarFilter.term:type_name -> com.coralogix.dataprime.v1.DefaultTermCounts
	23, // 29: com.coralogix.dataprime.v1.SideBarFilter.field:type_name -> com.coralogix.dataprime.v1.UntypedKeypath
	21, // 30: com.coralogix.dataprime.v1.Count.total_count:type_name -> google.protobuf.Int64Value
	21, // 31: com.coralogix.dataprime.v1.Count.result_count:type_name -> google.protobuf.Int64Value
	20, // 32: com.coralogix.dataprime.v1.Count.warnings:type_name -> com.coralogix.dataprime.v1.DataprimeWarning
	18, // 33: com.coralogix.dataprime.v1.KeyDistribution.distribution:type_name -> com.coralogix.dataprime.v1.KeyDistribution.DistributionEntry
	20, // 34: com.coralogix.dataprime.v1.KeyDistribution.warnings:type_name -> com.coralogix.dataprime.v1.DataprimeWarning
	22, // 35: com.coralogix.dataprime.v1.Histogram.values:type_name -> google.protobuf.StringValue
	24, // 36: com.coralogix.dataprime.v1.Histogram.timestamps:type_name -> com.coralogix.dataprime.v1.HistogramSlice
	20, // 37: com.coralogix.dataprime.v1.Histogram.warnings:type_name -> com.coralogix.dataprime.v1.DataprimeWarning
	21, // 38: com.coralogix.dataprime.v1.RequestStatistics.bytes_scanned:type_name -> google.protobuf.Int64Value
	12, // 39: com.coralogix.dataprime.v1.TeamIdCounts.team_id_counts:type_name -> com.coralogix.dataprime.v1.TeamIdCount
	22, // 40: com.coralogix.dataprime.v1.TeamIdCount.term:type_name -> google.protobuf.StringValue
	21, // 41: com.coralogix.dataprime.v1.TeamIdCount.count:type_name -> google.protobuf.Int64Value
	21, // 42: com.coralogix.dataprime.v1.MappingExceptionsCount.count:type_name -> google.protobuf.Int64Value
	21, // 43: com.coralogix.dataprime.v1.LogEntry.index:type_name -> google.protobuf.Int64Value
	25, // 44: com.coralogix.dataprime.v1.LogEntry.labels:type_name -> com.coralogix.dataprime.v1.KeyValue
	25, // 45: com.coralogix.dataprime.v1.LogEntry.metadata:type_name -> com.coralogix.dataprime.v1.KeyValue
	21, // 46: com.coralogix.dataprime.v1.Result.index:type_name -> google.protobuf.Int64Value
	25, // 47: com.coralogix.dataprime.v1.Result.labels:type_name -> com.coralogix.dataprime.v1.KeyValue
	25, // 48: com.coralogix.dataprime.v1.Result.metadata:type_name -> com.coralogix.dataprime.v1.KeyValue
	26, // 49: com.coralogix.dataprime.v1.SeverityHistogram.Bucket.bucket:type_name -> google.protobuf.Timestamp
	2,  // 50: com.coralogix.dataprime.v1.SeverityHistogram.Bucket.severity_counts:type_name -> com.coralogix.dataprime.v1.SeverityCounts
	22, // 51: com.coralogix.dataprime.v1.DefaultTermCounts.TermCount.term:type_name -> google.protobuf.StringValue
	21, // 52: com.coralogix.dataprime.v1.DefaultTermCounts.TermCount.count:type_name -> google.protobuf.Int64Value
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_com_coralogix_dataprime_v1_run_response_proto_init() }
func file_com_coralogix_dataprime_v1_run_response_proto_init() {
	if File_com_coralogix_dataprime_v1_run_response_proto != nil {
		return
	}
	file_com_coralogix_dataprime_v1_common_proto_init()
	file_com_coralogix_dataprime_v1_histogram_proto_init()
	file_com_coralogix_dataprime_v1_run_error_proto_init()
	file_com_coralogix_dataprime_v1_warnings_proto_init()
	file_com_coralogix_dataprime_v1_run_response_proto_msgTypes[0].OneofWrappers = []any{
		(*RunDataprimeQueryResponse_Error)(nil),
		(*RunDataprimeQueryResponse_LogResult)(nil),
		(*RunDataprimeQueryResponse_SeverityHistogram)(nil),
		(*RunDataprimeQueryResponse_Count)(nil),
		(*RunDataprimeQueryResponse_KeyDistribution)(nil),
		(*RunDataprimeQueryResponse_Histogram)(nil),
		(*RunDataprimeQueryResponse_ComparedHistogram)(nil),
		(*RunDataprimeQueryResponse_SidebarFilters)(nil),
		(*RunDataprimeQueryResponse_RequestStatistics)(nil),
		(*RunDataprimeQueryResponse_TeamIdCounts)(nil),
		(*RunDataprimeQueryResponse_MappingExceptionsCount)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_dataprime_v1_run_response_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_dataprime_v1_run_response_proto_goTypes,
		DependencyIndexes: file_com_coralogix_dataprime_v1_run_response_proto_depIdxs,
		MessageInfos:      file_com_coralogix_dataprime_v1_run_response_proto_msgTypes,
	}.Build()
	File_com_coralogix_dataprime_v1_run_response_proto = out.File
	file_com_coralogix_dataprime_v1_run_response_proto_rawDesc = nil
	file_com_coralogix_dataprime_v1_run_response_proto_goTypes = nil
	file_com_coralogix_dataprime_v1_run_response_proto_depIdxs = nil
}
