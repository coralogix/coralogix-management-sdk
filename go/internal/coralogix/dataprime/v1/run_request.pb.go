// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.3
// source: com/coralogix/dataprime/v1/run_request.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Horizon controls when filters are applied and therefore what data / schema they see.
type Filter_Horizon int32

const (
	// The default horizon over the original data / schema - i.e. before the query.
	// Note that any fields created by the query are not visible at this point.
	// On the other hand, fields removed by the query remain visible.
	Filter_HORIZON_BEFORE_QUERY_UNSPECIFIED Filter_Horizon = 0
	// The horizon defined by the query result - i.e. after the query.
	// Note that any fields removed by the query are no longer visible at this point.
	// On the other hand, fields created or retained by the query are visible.
	Filter_HORIZON_AFTER_QUERY Filter_Horizon = 1
)

// Enum value maps for Filter_Horizon.
var (
	Filter_Horizon_name = map[int32]string{
		0: "HORIZON_BEFORE_QUERY_UNSPECIFIED",
		1: "HORIZON_AFTER_QUERY",
	}
	Filter_Horizon_value = map[string]int32{
		"HORIZON_BEFORE_QUERY_UNSPECIFIED": 0,
		"HORIZON_AFTER_QUERY":              1,
	}
)

func (x Filter_Horizon) Enum() *Filter_Horizon {
	p := new(Filter_Horizon)
	*p = x
	return p
}

func (x Filter_Horizon) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Filter_Horizon) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_v1_run_request_proto_enumTypes[0].Descriptor()
}

func (Filter_Horizon) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_v1_run_request_proto_enumTypes[0]
}

func (x Filter_Horizon) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Filter_Horizon.Descriptor instead.
func (Filter_Horizon) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{3, 0}
}

type SortModelItem_Ordering int32

const (
	SortModelItem_ORDERING_ASC_UNSPECIFIED SortModelItem_Ordering = 0
	SortModelItem_ORDERING_DESC            SortModelItem_Ordering = 1
)

// Enum value maps for SortModelItem_Ordering.
var (
	SortModelItem_Ordering_name = map[int32]string{
		0: "ORDERING_ASC_UNSPECIFIED",
		1: "ORDERING_DESC",
	}
	SortModelItem_Ordering_value = map[string]int32{
		"ORDERING_ASC_UNSPECIFIED": 0,
		"ORDERING_DESC":            1,
	}
)

func (x SortModelItem_Ordering) Enum() *SortModelItem_Ordering {
	p := new(SortModelItem_Ordering)
	*p = x
	return p
}

func (x SortModelItem_Ordering) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortModelItem_Ordering) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_v1_run_request_proto_enumTypes[1].Descriptor()
}

func (SortModelItem_Ordering) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_v1_run_request_proto_enumTypes[1]
}

func (x SortModelItem_Ordering) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortModelItem_Ordering.Descriptor instead.
func (SortModelItem_Ordering) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{4, 0}
}

type SortModelItem_Missing int32

const (
	SortModelItem_MISSING_LAST_UNSPECIFIED SortModelItem_Missing = 0
	SortModelItem_MISSING_FIRST            SortModelItem_Missing = 1
)

// Enum value maps for SortModelItem_Missing.
var (
	SortModelItem_Missing_name = map[int32]string{
		0: "MISSING_LAST_UNSPECIFIED",
		1: "MISSING_FIRST",
	}
	SortModelItem_Missing_value = map[string]int32{
		"MISSING_LAST_UNSPECIFIED": 0,
		"MISSING_FIRST":            1,
	}
)

func (x SortModelItem_Missing) Enum() *SortModelItem_Missing {
	p := new(SortModelItem_Missing)
	*p = x
	return p
}

func (x SortModelItem_Missing) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortModelItem_Missing) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_v1_run_request_proto_enumTypes[2].Descriptor()
}

func (SortModelItem_Missing) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_v1_run_request_proto_enumTypes[2]
}

func (x SortModelItem_Missing) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortModelItem_Missing.Descriptor instead.
func (SortModelItem_Missing) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{4, 1}
}

type TracingMetadata_QuerySyntax int32

const (
	TracingMetadata_QUERY_SYNTAX_LUCENE_UNSPECIFIED TracingMetadata_QuerySyntax = 0
	TracingMetadata_QUERY_SYNTAX_DATAPRIME          TracingMetadata_QuerySyntax = 1
)

// Enum value maps for TracingMetadata_QuerySyntax.
var (
	TracingMetadata_QuerySyntax_name = map[int32]string{
		0: "QUERY_SYNTAX_LUCENE_UNSPECIFIED",
		1: "QUERY_SYNTAX_DATAPRIME",
	}
	TracingMetadata_QuerySyntax_value = map[string]int32{
		"QUERY_SYNTAX_LUCENE_UNSPECIFIED": 0,
		"QUERY_SYNTAX_DATAPRIME":          1,
	}
)

func (x TracingMetadata_QuerySyntax) Enum() *TracingMetadata_QuerySyntax {
	p := new(TracingMetadata_QuerySyntax)
	*p = x
	return p
}

func (x TracingMetadata_QuerySyntax) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TracingMetadata_QuerySyntax) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_v1_run_request_proto_enumTypes[3].Descriptor()
}

func (TracingMetadata_QuerySyntax) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_v1_run_request_proto_enumTypes[3]
}

func (x TracingMetadata_QuerySyntax) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TracingMetadata_QuerySyntax.Descriptor instead.
func (TracingMetadata_QuerySyntax) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{5, 0}
}

type RunDataprimeQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Query           *QueryPayload           `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	StartDate       *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate         *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Filters         []*Filter               `protobuf:"bytes,6,rep,name=filters,proto3" json:"filters,omitempty"`
	SortModel       []*SortModelItem        `protobuf:"bytes,7,rep,name=sort_model,json=sortModel,proto3" json:"sort_model,omitempty"`
	Backend         Backend                 `protobuf:"varint,8,opt,name=backend,proto3,enum=com.coralogix.dataprime.v1.Backend" json:"backend,omitempty"`
	Components      []*RequestComponent     `protobuf:"bytes,9,rep,name=components,proto3" json:"components,omitempty"`
	TracingMetadata *TracingMetadata        `protobuf:"bytes,10,opt,name=tracing_metadata,json=tracingMetadata,proto3" json:"tracing_metadata,omitempty"`
	UseTextIndex    *bool                   `protobuf:"varint,11,opt,name=use_text_index,json=useTextIndex,proto3,oneof" json:"use_text_index,omitempty"`
	// Team ids users wants us to query. May not contain caller team id
	RequestedTeamIds     []uint32        `protobuf:"varint,12,rep,packed,name=requested_team_ids,json=requestedTeamIds,proto3" json:"requested_team_ids,omitempty"`
	DefaultFilterHorizon *Filter_Horizon `protobuf:"varint,13,opt,name=default_filter_horizon,json=defaultFilterHorizon,proto3,enum=com.coralogix.dataprime.v1.Filter_Horizon,oneof" json:"default_filter_horizon,omitempty"`
	// readable string describing what feature it is used for
	InternalClientId *string `protobuf:"bytes,14,opt,name=internal_client_id,json=internalClientId,proto3,oneof" json:"internal_client_id,omitempty"`
}

func (x *RunDataprimeQueryRequest) Reset() {
	*x = RunDataprimeQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunDataprimeQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDataprimeQueryRequest) ProtoMessage() {}

func (x *RunDataprimeQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDataprimeQueryRequest.ProtoReflect.Descriptor instead.
func (*RunDataprimeQueryRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{0}
}

func (x *RunDataprimeQueryRequest) GetQueryId() *wrapperspb.StringValue {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *RunDataprimeQueryRequest) GetQuery() *QueryPayload {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *RunDataprimeQueryRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *RunDataprimeQueryRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *RunDataprimeQueryRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *RunDataprimeQueryRequest) GetSortModel() []*SortModelItem {
	if x != nil {
		return x.SortModel
	}
	return nil
}

func (x *RunDataprimeQueryRequest) GetBackend() Backend {
	if x != nil {
		return x.Backend
	}
	return Backend_BACKEND_ARCHIVE_UNSPECIFIED
}

func (x *RunDataprimeQueryRequest) GetComponents() []*RequestComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *RunDataprimeQueryRequest) GetTracingMetadata() *TracingMetadata {
	if x != nil {
		return x.TracingMetadata
	}
	return nil
}

func (x *RunDataprimeQueryRequest) GetUseTextIndex() bool {
	if x != nil && x.UseTextIndex != nil {
		return *x.UseTextIndex
	}
	return false
}

func (x *RunDataprimeQueryRequest) GetRequestedTeamIds() []uint32 {
	if x != nil {
		return x.RequestedTeamIds
	}
	return nil
}

func (x *RunDataprimeQueryRequest) GetDefaultFilterHorizon() Filter_Horizon {
	if x != nil && x.DefaultFilterHorizon != nil {
		return *x.DefaultFilterHorizon
	}
	return Filter_HORIZON_BEFORE_QUERY_UNSPECIFIED
}

func (x *RunDataprimeQueryRequest) GetInternalClientId() string {
	if x != nil && x.InternalClientId != nil {
		return *x.InternalClientId
	}
	return ""
}

type RequestComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Component:
	//
	//	*RequestComponent_Logs
	//	*RequestComponent_SeverityHistogram
	//	*RequestComponent_SurroundingLogs
	//	*RequestComponent_Count
	//	*RequestComponent_KeyDistribution
	//	*RequestComponent_Histogram
	//	*RequestComponent_ComparedHistogram
	//	*RequestComponent_SidebarFiltersCount
	//	*RequestComponent_TeamIdCounts
	Component isRequestComponent_Component `protobuf_oneof:"component"`
}

func (x *RequestComponent) Reset() {
	*x = RequestComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestComponent) ProtoMessage() {}

func (x *RequestComponent) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestComponent.ProtoReflect.Descriptor instead.
func (*RequestComponent) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{1}
}

func (m *RequestComponent) GetComponent() isRequestComponent_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (x *RequestComponent) GetLogs() *Component_Logs {
	if x, ok := x.GetComponent().(*RequestComponent_Logs); ok {
		return x.Logs
	}
	return nil
}

func (x *RequestComponent) GetSeverityHistogram() *Component_SeverityHistogram {
	if x, ok := x.GetComponent().(*RequestComponent_SeverityHistogram); ok {
		return x.SeverityHistogram
	}
	return nil
}

func (x *RequestComponent) GetSurroundingLogs() *Component_SurroundingLogs {
	if x, ok := x.GetComponent().(*RequestComponent_SurroundingLogs); ok {
		return x.SurroundingLogs
	}
	return nil
}

func (x *RequestComponent) GetCount() *Component_Count {
	if x, ok := x.GetComponent().(*RequestComponent_Count); ok {
		return x.Count
	}
	return nil
}

func (x *RequestComponent) GetKeyDistribution() *Component_KeyDistribution {
	if x, ok := x.GetComponent().(*RequestComponent_KeyDistribution); ok {
		return x.KeyDistribution
	}
	return nil
}

func (x *RequestComponent) GetHistogram() *Component_Histogram {
	if x, ok := x.GetComponent().(*RequestComponent_Histogram); ok {
		return x.Histogram
	}
	return nil
}

func (x *RequestComponent) GetComparedHistogram() *Component_ComparedHistogram {
	if x, ok := x.GetComponent().(*RequestComponent_ComparedHistogram); ok {
		return x.ComparedHistogram
	}
	return nil
}

func (x *RequestComponent) GetSidebarFiltersCount() *Component_SidebarFiltersCounts {
	if x, ok := x.GetComponent().(*RequestComponent_SidebarFiltersCount); ok {
		return x.SidebarFiltersCount
	}
	return nil
}

func (x *RequestComponent) GetTeamIdCounts() *Component_TeamIdCounts {
	if x, ok := x.GetComponent().(*RequestComponent_TeamIdCounts); ok {
		return x.TeamIdCounts
	}
	return nil
}

type isRequestComponent_Component interface {
	isRequestComponent_Component()
}

type RequestComponent_Logs struct {
	Logs *Component_Logs `protobuf:"bytes,1,opt,name=logs,proto3,oneof"`
}

type RequestComponent_SeverityHistogram struct {
	SeverityHistogram *Component_SeverityHistogram `protobuf:"bytes,2,opt,name=severity_histogram,json=severityHistogram,proto3,oneof"`
}

type RequestComponent_SurroundingLogs struct {
	SurroundingLogs *Component_SurroundingLogs `protobuf:"bytes,6,opt,name=surrounding_logs,json=surroundingLogs,proto3,oneof"`
}

type RequestComponent_Count struct {
	Count *Component_Count `protobuf:"bytes,7,opt,name=count,proto3,oneof"`
}

type RequestComponent_KeyDistribution struct {
	KeyDistribution *Component_KeyDistribution `protobuf:"bytes,8,opt,name=key_distribution,json=keyDistribution,proto3,oneof"`
}

type RequestComponent_Histogram struct {
	Histogram *Component_Histogram `protobuf:"bytes,9,opt,name=histogram,proto3,oneof"`
}

type RequestComponent_ComparedHistogram struct {
	ComparedHistogram *Component_ComparedHistogram `protobuf:"bytes,10,opt,name=compared_histogram,json=comparedHistogram,proto3,oneof"`
}

type RequestComponent_SidebarFiltersCount struct {
	SidebarFiltersCount *Component_SidebarFiltersCounts `protobuf:"bytes,11,opt,name=sidebar_filters_count,json=sidebarFiltersCount,proto3,oneof"`
}

type RequestComponent_TeamIdCounts struct {
	TeamIdCounts *Component_TeamIdCounts `protobuf:"bytes,12,opt,name=team_id_counts,json=teamIdCounts,proto3,oneof"`
}

func (*RequestComponent_Logs) isRequestComponent_Component() {}

func (*RequestComponent_SeverityHistogram) isRequestComponent_Component() {}

func (*RequestComponent_SurroundingLogs) isRequestComponent_Component() {}

func (*RequestComponent_Count) isRequestComponent_Component() {}

func (*RequestComponent_KeyDistribution) isRequestComponent_Component() {}

func (*RequestComponent_Histogram) isRequestComponent_Component() {}

func (*RequestComponent_ComparedHistogram) isRequestComponent_Component() {}

func (*RequestComponent_SidebarFiltersCount) isRequestComponent_Component() {}

func (*RequestComponent_TeamIdCounts) isRequestComponent_Component() {}

// This message is just for scoping to avoid name clashes with response entities
type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{2}
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field        *UntypedKeypath `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Alternatives []string        `protobuf:"bytes,2,rep,name=alternatives,proto3" json:"alternatives,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{3}
}

func (x *Filter) GetField() *UntypedKeypath {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *Filter) GetAlternatives() []string {
	if x != nil {
		return x.Alternatives
	}
	return nil
}

type SortModelItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    *UntypedKeypath        `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Ordering SortModelItem_Ordering `protobuf:"varint,2,opt,name=ordering,proto3,enum=com.coralogix.dataprime.v1.SortModelItem_Ordering" json:"ordering,omitempty"`
	Missing  SortModelItem_Missing  `protobuf:"varint,3,opt,name=missing,proto3,enum=com.coralogix.dataprime.v1.SortModelItem_Missing" json:"missing,omitempty"`
}

func (x *SortModelItem) Reset() {
	*x = SortModelItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortModelItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortModelItem) ProtoMessage() {}

func (x *SortModelItem) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortModelItem.ProtoReflect.Descriptor instead.
func (*SortModelItem) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{4}
}

func (x *SortModelItem) GetField() *UntypedKeypath {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *SortModelItem) GetOrdering() SortModelItem_Ordering {
	if x != nil {
		return x.Ordering
	}
	return SortModelItem_ORDERING_ASC_UNSPECIFIED
}

func (x *SortModelItem) GetMissing() SortModelItem_Missing {
	if x != nil {
		return x.Missing
	}
	return SortModelItem_MISSING_LAST_UNSPECIFIED
}

type TracingMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuerySyntax TracingMetadata_QuerySyntax `protobuf:"varint,1,opt,name=query_syntax,json=querySyntax,proto3,enum=com.coralogix.dataprime.v1.TracingMetadata_QuerySyntax" json:"query_syntax,omitempty"`
	QueryText   *wrapperspb.StringValue     `protobuf:"bytes,2,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
}

func (x *TracingMetadata) Reset() {
	*x = TracingMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingMetadata) ProtoMessage() {}

func (x *TracingMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingMetadata.ProtoReflect.Descriptor instead.
func (*TracingMetadata) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{5}
}

func (x *TracingMetadata) GetQuerySyntax() TracingMetadata_QuerySyntax {
	if x != nil {
		return x.QuerySyntax
	}
	return TracingMetadata_QUERY_SYNTAX_LUCENE_UNSPECIFIED
}

func (x *TracingMetadata) GetQueryText() *wrapperspb.StringValue {
	if x != nil {
		return x.QueryText
	}
	return nil
}

type Component_Logs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skip  *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=skip,proto3" json:"skip,omitempty"`
	Limit *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Component_Logs) Reset() {
	*x = Component_Logs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component_Logs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component_Logs) ProtoMessage() {}

func (x *Component_Logs) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component_Logs.ProtoReflect.Descriptor instead.
func (*Component_Logs) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Component_Logs) GetSkip() *wrapperspb.Int64Value {
	if x != nil {
		return x.Skip
	}
	return nil
}

func (x *Component_Logs) GetLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

type Component_Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Component_Count) Reset() {
	*x = Component_Count{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component_Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component_Count) ProtoMessage() {}

func (x *Component_Count) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component_Count.ProtoReflect.Descriptor instead.
func (*Component_Count) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{2, 1}
}

type Component_SeverityHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Component_SeverityHistogram) Reset() {
	*x = Component_SeverityHistogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component_SeverityHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component_SeverityHistogram) ProtoMessage() {}

func (x *Component_SeverityHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component_SeverityHistogram.ProtoReflect.Descriptor instead.
func (*Component_SeverityHistogram) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{2, 2}
}

type Component_SidebarFiltersCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Zero counts for unselected filter values by default
	CountUnselectedValues *bool `protobuf:"varint,1,opt,name=count_unselected_values,json=countUnselectedValues,proto3,oneof" json:"count_unselected_values,omitempty"`
}

func (x *Component_SidebarFiltersCounts) Reset() {
	*x = Component_SidebarFiltersCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component_SidebarFiltersCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component_SidebarFiltersCounts) ProtoMessage() {}

func (x *Component_SidebarFiltersCounts) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component_SidebarFiltersCounts.ProtoReflect.Descriptor instead.
func (*Component_SidebarFiltersCounts) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Component_SidebarFiltersCounts) GetCountUnselectedValues() bool {
	if x != nil && x.CountUnselectedValues != nil {
		return *x.CountUnselectedValues
	}
	return false
}

type Component_SurroundingLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	LogTimestamp *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=log_timestamp,json=logTimestamp,proto3" json:"log_timestamp,omitempty"`
	Skip         *wrapperspb.Int32Value  `protobuf:"bytes,3,opt,name=skip,proto3" json:"skip,omitempty"`
	Limit        *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Component_SurroundingLogs) Reset() {
	*x = Component_SurroundingLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component_SurroundingLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component_SurroundingLogs) ProtoMessage() {}

func (x *Component_SurroundingLogs) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component_SurroundingLogs.ProtoReflect.Descriptor instead.
func (*Component_SurroundingLogs) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{2, 4}
}

func (x *Component_SurroundingLogs) GetLogId() *wrapperspb.StringValue {
	if x != nil {
		return x.LogId
	}
	return nil
}

func (x *Component_SurroundingLogs) GetLogTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LogTimestamp
	}
	return nil
}

func (x *Component_SurroundingLogs) GetSkip() *wrapperspb.Int32Value {
	if x != nil {
		return x.Skip
	}
	return nil
}

func (x *Component_SurroundingLogs) GetLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

type Component_KeyDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyDistribution *UntypedKeypath `protobuf:"bytes,1,opt,name=key_distribution,json=keyDistribution,proto3" json:"key_distribution,omitempty"`
}

func (x *Component_KeyDistribution) Reset() {
	*x = Component_KeyDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component_KeyDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component_KeyDistribution) ProtoMessage() {}

func (x *Component_KeyDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component_KeyDistribution.ProtoReflect.Descriptor instead.
func (*Component_KeyDistribution) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{2, 5}
}

func (x *Component_KeyDistribution) GetKeyDistribution() *UntypedKeypath {
	if x != nil {
		return x.KeyDistribution
	}
	return nil
}

type Component_Histogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregation *Aggregation    `protobuf:"bytes,1,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	GroupBy     *UntypedKeypath `protobuf:"bytes,2,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
}

func (x *Component_Histogram) Reset() {
	*x = Component_Histogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component_Histogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component_Histogram) ProtoMessage() {}

func (x *Component_Histogram) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component_Histogram.ProtoReflect.Descriptor instead.
func (*Component_Histogram) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{2, 6}
}

func (x *Component_Histogram) GetAggregation() *Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *Component_Histogram) GetGroupBy() *UntypedKeypath {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

type Component_ComparedHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregation       *Aggregation           `protobuf:"bytes,1,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	GroupBy           *UntypedKeypath        `protobuf:"bytes,2,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	HistoricalShiftMs *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=historical_shift_ms,json=historicalShiftMs,proto3" json:"historical_shift_ms,omitempty"`
}

func (x *Component_ComparedHistogram) Reset() {
	*x = Component_ComparedHistogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component_ComparedHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component_ComparedHistogram) ProtoMessage() {}

func (x *Component_ComparedHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component_ComparedHistogram.ProtoReflect.Descriptor instead.
func (*Component_ComparedHistogram) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{2, 7}
}

func (x *Component_ComparedHistogram) GetAggregation() *Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *Component_ComparedHistogram) GetGroupBy() *UntypedKeypath {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *Component_ComparedHistogram) GetHistoricalShiftMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.HistoricalShiftMs
	}
	return nil
}

type Component_TeamIdCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Component_TeamIdCounts) Reset() {
	*x = Component_TeamIdCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component_TeamIdCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component_TeamIdCounts) ProtoMessage() {}

func (x *Component_TeamIdCounts) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component_TeamIdCounts.ProtoReflect.Descriptor instead.
func (*Component_TeamIdCounts) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP(), []int{2, 8}
}

var File_com_coralogix_dataprime_v1_run_request_proto protoreflect.FileDescriptor

var file_com_coralogix_dataprime_v1_run_request_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x26, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x07, 0x0a, 0x18, 0x52, 0x75, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x48,
	0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x65, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x48, 0x01, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xf3, 0x06, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x4c, 0x6f, 0x67, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x68, 0x0a, 0x12,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x62, 0x0a, 0x10, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x62, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x68, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x70,
	0x0a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x13, 0x73, 0x69, 0x64,
	0x65, 0x62, 0x61, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x5a, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a,
	0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x89, 0x08, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0x6a, 0x0a, 0x04, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6b,
	0x69, 0x70, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x07, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x13,
	0x0a, 0x11, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x1a, 0x6f, 0x0a, 0x14, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x17, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x15,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0xeb, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f,
	0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12,
	0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x1a, 0x68, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x74,
	0x79, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x0f, 0x6b, 0x65, 0x79,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa3, 0x01, 0x0a,
	0x09, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x70,
	0x61, 0x74, 0x68, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x05, 0x1a, 0xf2, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74,
	0x68, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x4b, 0x0a, 0x13, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x4d, 0x73, 0x1a, 0x0e, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x07, 0x48, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x42,
	0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x4f, 0x4e, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x10, 0x01, 0x22, 0xe7, 0x02, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x40, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x22, 0x3b, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x53, 0x43, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01,
	0x22, 0x3a, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x18, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x22, 0xfa, 0x01, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x5a, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x52,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x12, 0x3b, 0x0a, 0x0a,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x22, 0x4e, 0x0a, 0x0b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x12, 0x23, 0x0a, 0x1f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x4c, 0x55, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x50, 0x52, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_com_coralogix_dataprime_v1_run_request_proto_rawDescOnce sync.Once
	file_com_coralogix_dataprime_v1_run_request_proto_rawDescData = file_com_coralogix_dataprime_v1_run_request_proto_rawDesc
)

func file_com_coralogix_dataprime_v1_run_request_proto_rawDescGZIP() []byte {
	file_com_coralogix_dataprime_v1_run_request_proto_rawDescOnce.Do(func() {
		file_com_coralogix_dataprime_v1_run_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_dataprime_v1_run_request_proto_rawDescData)
	})
	return file_com_coralogix_dataprime_v1_run_request_proto_rawDescData
}

var file_com_coralogix_dataprime_v1_run_request_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_com_coralogix_dataprime_v1_run_request_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_com_coralogix_dataprime_v1_run_request_proto_goTypes = []interface{}{
	(Filter_Horizon)(0),                    // 0: com.coralogix.dataprime.v1.Filter.Horizon
	(SortModelItem_Ordering)(0),            // 1: com.coralogix.dataprime.v1.SortModelItem.Ordering
	(SortModelItem_Missing)(0),             // 2: com.coralogix.dataprime.v1.SortModelItem.Missing
	(TracingMetadata_QuerySyntax)(0),       // 3: com.coralogix.dataprime.v1.TracingMetadata.QuerySyntax
	(*RunDataprimeQueryRequest)(nil),       // 4: com.coralogix.dataprime.v1.RunDataprimeQueryRequest
	(*RequestComponent)(nil),               // 5: com.coralogix.dataprime.v1.RequestComponent
	(*Component)(nil),                      // 6: com.coralogix.dataprime.v1.Component
	(*Filter)(nil),                         // 7: com.coralogix.dataprime.v1.Filter
	(*SortModelItem)(nil),                  // 8: com.coralogix.dataprime.v1.SortModelItem
	(*TracingMetadata)(nil),                // 9: com.coralogix.dataprime.v1.TracingMetadata
	(*Component_Logs)(nil),                 // 10: com.coralogix.dataprime.v1.Component.Logs
	(*Component_Count)(nil),                // 11: com.coralogix.dataprime.v1.Component.Count
	(*Component_SeverityHistogram)(nil),    // 12: com.coralogix.dataprime.v1.Component.SeverityHistogram
	(*Component_SidebarFiltersCounts)(nil), // 13: com.coralogix.dataprime.v1.Component.SidebarFiltersCounts
	(*Component_SurroundingLogs)(nil),      // 14: com.coralogix.dataprime.v1.Component.SurroundingLogs
	(*Component_KeyDistribution)(nil),      // 15: com.coralogix.dataprime.v1.Component.KeyDistribution
	(*Component_Histogram)(nil),            // 16: com.coralogix.dataprime.v1.Component.Histogram
	(*Component_ComparedHistogram)(nil),    // 17: com.coralogix.dataprime.v1.Component.ComparedHistogram
	(*Component_TeamIdCounts)(nil),         // 18: com.coralogix.dataprime.v1.Component.TeamIdCounts
	(*wrapperspb.StringValue)(nil),         // 19: google.protobuf.StringValue
	(*QueryPayload)(nil),                   // 20: com.coralogix.dataprime.v1.QueryPayload
	(*timestamppb.Timestamp)(nil),          // 21: google.protobuf.Timestamp
	(Backend)(0),                           // 22: com.coralogix.dataprime.v1.Backend
	(*UntypedKeypath)(nil),                 // 23: com.coralogix.dataprime.v1.UntypedKeypath
	(*wrapperspb.Int64Value)(nil),          // 24: google.protobuf.Int64Value
	(*wrapperspb.Int32Value)(nil),          // 25: google.protobuf.Int32Value
	(*Aggregation)(nil),                    // 26: com.coralogix.dataprime.v1.Aggregation
}
var file_com_coralogix_dataprime_v1_run_request_proto_depIdxs = []int32{
	19, // 0: com.coralogix.dataprime.v1.RunDataprimeQueryRequest.query_id:type_name -> google.protobuf.StringValue
	20, // 1: com.coralogix.dataprime.v1.RunDataprimeQueryRequest.query:type_name -> com.coralogix.dataprime.v1.QueryPayload
	21, // 2: com.coralogix.dataprime.v1.RunDataprimeQueryRequest.start_date:type_name -> google.protobuf.Timestamp
	21, // 3: com.coralogix.dataprime.v1.RunDataprimeQueryRequest.end_date:type_name -> google.protobuf.Timestamp
	7,  // 4: com.coralogix.dataprime.v1.RunDataprimeQueryRequest.filters:type_name -> com.coralogix.dataprime.v1.Filter
	8,  // 5: com.coralogix.dataprime.v1.RunDataprimeQueryRequest.sort_model:type_name -> com.coralogix.dataprime.v1.SortModelItem
	22, // 6: com.coralogix.dataprime.v1.RunDataprimeQueryRequest.backend:type_name -> com.coralogix.dataprime.v1.Backend
	5,  // 7: com.coralogix.dataprime.v1.RunDataprimeQueryRequest.components:type_name -> com.coralogix.dataprime.v1.RequestComponent
	9,  // 8: com.coralogix.dataprime.v1.RunDataprimeQueryRequest.tracing_metadata:type_name -> com.coralogix.dataprime.v1.TracingMetadata
	0,  // 9: com.coralogix.dataprime.v1.RunDataprimeQueryRequest.default_filter_horizon:type_name -> com.coralogix.dataprime.v1.Filter.Horizon
	10, // 10: com.coralogix.dataprime.v1.RequestComponent.logs:type_name -> com.coralogix.dataprime.v1.Component.Logs
	12, // 11: com.coralogix.dataprime.v1.RequestComponent.severity_histogram:type_name -> com.coralogix.dataprime.v1.Component.SeverityHistogram
	14, // 12: com.coralogix.dataprime.v1.RequestComponent.surrounding_logs:type_name -> com.coralogix.dataprime.v1.Component.SurroundingLogs
	11, // 13: com.coralogix.dataprime.v1.RequestComponent.count:type_name -> com.coralogix.dataprime.v1.Component.Count
	15, // 14: com.coralogix.dataprime.v1.RequestComponent.key_distribution:type_name -> com.coralogix.dataprime.v1.Component.KeyDistribution
	16, // 15: com.coralogix.dataprime.v1.RequestComponent.histogram:type_name -> com.coralogix.dataprime.v1.Component.Histogram
	17, // 16: com.coralogix.dataprime.v1.RequestComponent.compared_histogram:type_name -> com.coralogix.dataprime.v1.Component.ComparedHistogram
	13, // 17: com.coralogix.dataprime.v1.RequestComponent.sidebar_filters_count:type_name -> com.coralogix.dataprime.v1.Component.SidebarFiltersCounts
	18, // 18: com.coralogix.dataprime.v1.RequestComponent.team_id_counts:type_name -> com.coralogix.dataprime.v1.Component.TeamIdCounts
	23, // 19: com.coralogix.dataprime.v1.Filter.field:type_name -> com.coralogix.dataprime.v1.UntypedKeypath
	23, // 20: com.coralogix.dataprime.v1.SortModelItem.field:type_name -> com.coralogix.dataprime.v1.UntypedKeypath
	1,  // 21: com.coralogix.dataprime.v1.SortModelItem.ordering:type_name -> com.coralogix.dataprime.v1.SortModelItem.Ordering
	2,  // 22: com.coralogix.dataprime.v1.SortModelItem.missing:type_name -> com.coralogix.dataprime.v1.SortModelItem.Missing
	3,  // 23: com.coralogix.dataprime.v1.TracingMetadata.query_syntax:type_name -> com.coralogix.dataprime.v1.TracingMetadata.QuerySyntax
	19, // 24: com.coralogix.dataprime.v1.TracingMetadata.query_text:type_name -> google.protobuf.StringValue
	24, // 25: com.coralogix.dataprime.v1.Component.Logs.skip:type_name -> google.protobuf.Int64Value
	24, // 26: com.coralogix.dataprime.v1.Component.Logs.limit:type_name -> google.protobuf.Int64Value
	19, // 27: com.coralogix.dataprime.v1.Component.SurroundingLogs.log_id:type_name -> google.protobuf.StringValue
	21, // 28: com.coralogix.dataprime.v1.Component.SurroundingLogs.log_timestamp:type_name -> google.protobuf.Timestamp
	25, // 29: com.coralogix.dataprime.v1.Component.SurroundingLogs.skip:type_name -> google.protobuf.Int32Value
	25, // 30: com.coralogix.dataprime.v1.Component.SurroundingLogs.limit:type_name -> google.protobuf.Int32Value
	23, // 31: com.coralogix.dataprime.v1.Component.KeyDistribution.key_distribution:type_name -> com.coralogix.dataprime.v1.UntypedKeypath
	26, // 32: com.coralogix.dataprime.v1.Component.Histogram.aggregation:type_name -> com.coralogix.dataprime.v1.Aggregation
	23, // 33: com.coralogix.dataprime.v1.Component.Histogram.group_by:type_name -> com.coralogix.dataprime.v1.UntypedKeypath
	26, // 34: com.coralogix.dataprime.v1.Component.ComparedHistogram.aggregation:type_name -> com.coralogix.dataprime.v1.Aggregation
	23, // 35: com.coralogix.dataprime.v1.Component.ComparedHistogram.group_by:type_name -> com.coralogix.dataprime.v1.UntypedKeypath
	24, // 36: com.coralogix.dataprime.v1.Component.ComparedHistogram.historical_shift_ms:type_name -> google.protobuf.Int64Value
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_com_coralogix_dataprime_v1_run_request_proto_init() }
func file_com_coralogix_dataprime_v1_run_request_proto_init() {
	if File_com_coralogix_dataprime_v1_run_request_proto != nil {
		return
	}
	file_com_coralogix_dataprime_v1_common_proto_init()
	file_com_coralogix_dataprime_v1_histogram_proto_init()
	file_com_coralogix_dataprime_v1_query_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDataprimeQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortModelItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component_Logs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component_Count); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component_SeverityHistogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component_SidebarFiltersCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component_SurroundingLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component_KeyDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component_Histogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component_ComparedHistogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component_TeamIdCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RequestComponent_Logs)(nil),
		(*RequestComponent_SeverityHistogram)(nil),
		(*RequestComponent_SurroundingLogs)(nil),
		(*RequestComponent_Count)(nil),
		(*RequestComponent_KeyDistribution)(nil),
		(*RequestComponent_Histogram)(nil),
		(*RequestComponent_ComparedHistogram)(nil),
		(*RequestComponent_SidebarFiltersCount)(nil),
		(*RequestComponent_TeamIdCounts)(nil),
	}
	file_com_coralogix_dataprime_v1_run_request_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_dataprime_v1_run_request_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_dataprime_v1_run_request_proto_goTypes,
		DependencyIndexes: file_com_coralogix_dataprime_v1_run_request_proto_depIdxs,
		EnumInfos:         file_com_coralogix_dataprime_v1_run_request_proto_enumTypes,
		MessageInfos:      file_com_coralogix_dataprime_v1_run_request_proto_msgTypes,
	}.Build()
	File_com_coralogix_dataprime_v1_run_request_proto = out.File
	file_com_coralogix_dataprime_v1_run_request_proto_rawDesc = nil
	file_com_coralogix_dataprime_v1_run_request_proto_goTypes = nil
	file_com_coralogix_dataprime_v1_run_request_proto_depIdxs = nil
}
