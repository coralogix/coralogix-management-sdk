// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.2
// source: com/coralogix/dataprime/v1/feature_control_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FeatureControlService_ListFeatureControl_FullMethodName = "/com.coralogix.dataprime.v1.FeatureControlService/ListFeatureControl"
)

// FeatureControlServiceClient is the client API for FeatureControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureControlServiceClient interface {
	ListFeatureControl(ctx context.Context, in *ListFeatureControlRequest, opts ...grpc.CallOption) (*ListFeatureControlResponse, error)
}

type featureControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureControlServiceClient(cc grpc.ClientConnInterface) FeatureControlServiceClient {
	return &featureControlServiceClient{cc}
}

func (c *featureControlServiceClient) ListFeatureControl(ctx context.Context, in *ListFeatureControlRequest, opts ...grpc.CallOption) (*ListFeatureControlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeatureControlResponse)
	err := c.cc.Invoke(ctx, FeatureControlService_ListFeatureControl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureControlServiceServer is the server API for FeatureControlService service.
// All implementations must embed UnimplementedFeatureControlServiceServer
// for forward compatibility
type FeatureControlServiceServer interface {
	ListFeatureControl(context.Context, *ListFeatureControlRequest) (*ListFeatureControlResponse, error)
	mustEmbedUnimplementedFeatureControlServiceServer()
}

// UnimplementedFeatureControlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureControlServiceServer struct {
}

func (UnimplementedFeatureControlServiceServer) ListFeatureControl(context.Context, *ListFeatureControlRequest) (*ListFeatureControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatureControl not implemented")
}
func (UnimplementedFeatureControlServiceServer) mustEmbedUnimplementedFeatureControlServiceServer() {}

// UnsafeFeatureControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureControlServiceServer will
// result in compilation errors.
type UnsafeFeatureControlServiceServer interface {
	mustEmbedUnimplementedFeatureControlServiceServer()
}

func RegisterFeatureControlServiceServer(s grpc.ServiceRegistrar, srv FeatureControlServiceServer) {
	s.RegisterService(&FeatureControlService_ServiceDesc, srv)
}

func _FeatureControlService_ListFeatureControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureControlServiceServer).ListFeatureControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureControlService_ListFeatureControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureControlServiceServer).ListFeatureControl(ctx, req.(*ListFeatureControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureControlService_ServiceDesc is the grpc.ServiceDesc for FeatureControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.dataprime.v1.FeatureControlService",
	HandlerType: (*FeatureControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFeatureControl",
			Handler:    _FeatureControlService_ListFeatureControl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/dataprime/v1/feature_control_service.proto",
}
