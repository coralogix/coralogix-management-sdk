// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.3
// source: com/coralogix/dataprime/v1/query.proto

package v1

import (
	v1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/dataprime/ast/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SchedulingTier int32

const (
	SchedulingTier_SCHEDULING_TIER_UNSPECIFIED SchedulingTier = 0
	SchedulingTier_SCHEDULING_TIER_NORMAL      SchedulingTier = 1
	SchedulingTier_SCHEDULING_TIER_FAST        SchedulingTier = 2
)

// Enum value maps for SchedulingTier.
var (
	SchedulingTier_name = map[int32]string{
		0: "SCHEDULING_TIER_UNSPECIFIED",
		1: "SCHEDULING_TIER_NORMAL",
		2: "SCHEDULING_TIER_FAST",
	}
	SchedulingTier_value = map[string]int32{
		"SCHEDULING_TIER_UNSPECIFIED": 0,
		"SCHEDULING_TIER_NORMAL":      1,
		"SCHEDULING_TIER_FAST":        2,
	}
)

func (x SchedulingTier) Enum() *SchedulingTier {
	p := new(SchedulingTier)
	*p = x
	return p
}

func (x SchedulingTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulingTier) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_v1_query_proto_enumTypes[0].Descriptor()
}

func (SchedulingTier) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_v1_query_proto_enumTypes[0]
}

func (x SchedulingTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulingTier.Descriptor instead.
func (SchedulingTier) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{0}
}

type ResourceGroup int32

const (
	ResourceGroup_RESOURCE_GROUP_UNSPECIFIED ResourceGroup = 0
	ResourceGroup_RESOURCE_GROUP_HIGH_TIER   ResourceGroup = 1
	ResourceGroup_RESOURCE_GROUP_ARCHIVE     ResourceGroup = 2
	ResourceGroup_RESOURCE_GROUP_LAMBDA      ResourceGroup = 3
	ResourceGroup_RESOURCE_GROUP_DEV         ResourceGroup = 4
)

// Enum value maps for ResourceGroup.
var (
	ResourceGroup_name = map[int32]string{
		0: "RESOURCE_GROUP_UNSPECIFIED",
		1: "RESOURCE_GROUP_HIGH_TIER",
		2: "RESOURCE_GROUP_ARCHIVE",
		3: "RESOURCE_GROUP_LAMBDA",
		4: "RESOURCE_GROUP_DEV",
	}
	ResourceGroup_value = map[string]int32{
		"RESOURCE_GROUP_UNSPECIFIED": 0,
		"RESOURCE_GROUP_HIGH_TIER":   1,
		"RESOURCE_GROUP_ARCHIVE":     2,
		"RESOURCE_GROUP_LAMBDA":      3,
		"RESOURCE_GROUP_DEV":         4,
	}
)

func (x ResourceGroup) Enum() *ResourceGroup {
	p := new(ResourceGroup)
	*p = x
	return p
}

func (x ResourceGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_v1_query_proto_enumTypes[1].Descriptor()
}

func (ResourceGroup) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_v1_query_proto_enumTypes[1]
}

func (x ResourceGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceGroup.Descriptor instead.
func (ResourceGroup) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{1}
}

type Metastore int32

const (
	Metastore_METASTORE_UNSPECIFIED Metastore = 0
	Metastore_METASTORE_SCYLLA      Metastore = 2
	Metastore_METASTORE_POSTGRES    Metastore = 3
)

// Enum value maps for Metastore.
var (
	Metastore_name = map[int32]string{
		0: "METASTORE_UNSPECIFIED",
		2: "METASTORE_SCYLLA",
		3: "METASTORE_POSTGRES",
	}
	Metastore_value = map[string]int32{
		"METASTORE_UNSPECIFIED": 0,
		"METASTORE_SCYLLA":      2,
		"METASTORE_POSTGRES":    3,
	}
)

func (x Metastore) Enum() *Metastore {
	p := new(Metastore)
	*p = x
	return p
}

func (x Metastore) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metastore) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_v1_query_proto_enumTypes[2].Descriptor()
}

func (Metastore) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_v1_query_proto_enumTypes[2]
}

func (x Metastore) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metastore.Descriptor instead.
func (Metastore) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{2}
}

type FieldCardinality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keypath     *UntypedKeypath `protobuf:"bytes,1,opt,name=keypath,proto3" json:"keypath,omitempty"`
	Cardinality uint64          `protobuf:"varint,2,opt,name=cardinality,proto3" json:"cardinality,omitempty"`
}

func (x *FieldCardinality) Reset() {
	*x = FieldCardinality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldCardinality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldCardinality) ProtoMessage() {}

func (x *FieldCardinality) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldCardinality.ProtoReflect.Descriptor instead.
func (*FieldCardinality) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{0}
}

func (x *FieldCardinality) GetKeypath() *UntypedKeypath {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (x *FieldCardinality) GetCardinality() uint64 {
	if x != nil {
		return x.Cardinality
	}
	return 0
}

// External API interface for executing a DataPrime query
type SubmitQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryAst             *v1.Ast                 `protobuf:"bytes,7,opt,name=query_ast,json=queryAst,proto3" json:"query_ast,omitempty"`
	ExecutionConfig      *ExecutionConfig        `protobuf:"bytes,8,opt,name=execution_config,json=executionConfig,proto3" json:"execution_config,omitempty"`
	QueryId              *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	NamedQuerySources    []*NamedQuerySource     `protobuf:"bytes,11,rep,name=named_query_sources,json=namedQuerySources,proto3" json:"named_query_sources,omitempty"`
	KeypathCardinalities []*FieldCardinality     `protobuf:"bytes,12,rep,name=keypath_cardinalities,json=keypathCardinalities,proto3" json:"keypath_cardinalities,omitempty"`
}

func (x *SubmitQueryRequest) Reset() {
	*x = SubmitQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitQueryRequest) ProtoMessage() {}

func (x *SubmitQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitQueryRequest.ProtoReflect.Descriptor instead.
func (*SubmitQueryRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitQueryRequest) GetQueryAst() *v1.Ast {
	if x != nil {
		return x.QueryAst
	}
	return nil
}

func (x *SubmitQueryRequest) GetExecutionConfig() *ExecutionConfig {
	if x != nil {
		return x.ExecutionConfig
	}
	return nil
}

func (x *SubmitQueryRequest) GetQueryId() *wrapperspb.StringValue {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *SubmitQueryRequest) GetNamedQuerySources() []*NamedQuerySource {
	if x != nil {
		return x.NamedQuerySources
	}
	return nil
}

func (x *SubmitQueryRequest) GetKeypathCardinalities() []*FieldCardinality {
	if x != nil {
		return x.KeypathCardinalities
	}
	return nil
}

// External API interface for executing a DataPrime DDL query / Creation of Dynamic Dataset
type SubmitDdlQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DdlAst               *v1.DdlAst              `protobuf:"bytes,1,opt,name=ddl_ast,json=ddlAst,proto3" json:"ddl_ast,omitempty"`
	ExecutionConfig      *ExecutionConfig        `protobuf:"bytes,2,opt,name=execution_config,json=executionConfig,proto3" json:"execution_config,omitempty"`
	QueryId              *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	DatasetLocation      *DatasetLocation        `protobuf:"bytes,4,opt,name=dataset_location,json=datasetLocation,proto3" json:"dataset_location,omitempty"`
	NamedQuerySources    []*NamedQuerySource     `protobuf:"bytes,5,rep,name=named_query_sources,json=namedQuerySources,proto3" json:"named_query_sources,omitempty"`
	KeypathCardinalities []*FieldCardinality     `protobuf:"bytes,6,rep,name=keypath_cardinalities,json=keypathCardinalities,proto3" json:"keypath_cardinalities,omitempty"`
}

func (x *SubmitDdlQueryRequest) Reset() {
	*x = SubmitDdlQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitDdlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitDdlQueryRequest) ProtoMessage() {}

func (x *SubmitDdlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitDdlQueryRequest.ProtoReflect.Descriptor instead.
func (*SubmitDdlQueryRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{2}
}

func (x *SubmitDdlQueryRequest) GetDdlAst() *v1.DdlAst {
	if x != nil {
		return x.DdlAst
	}
	return nil
}

func (x *SubmitDdlQueryRequest) GetExecutionConfig() *ExecutionConfig {
	if x != nil {
		return x.ExecutionConfig
	}
	return nil
}

func (x *SubmitDdlQueryRequest) GetQueryId() *wrapperspb.StringValue {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *SubmitDdlQueryRequest) GetDatasetLocation() *DatasetLocation {
	if x != nil {
		return x.DatasetLocation
	}
	return nil
}

func (x *SubmitDdlQueryRequest) GetNamedQuerySources() []*NamedQuerySource {
	if x != nil {
		return x.NamedQuerySources
	}
	return nil
}

func (x *SubmitDdlQueryRequest) GetKeypathCardinalities() []*FieldCardinality {
	if x != nil {
		return x.KeypathCardinalities
	}
	return nil
}

type DatasetLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectStoreUrl string `protobuf:"bytes,1,opt,name=object_store_url,json=objectStoreUrl,proto3" json:"object_store_url,omitempty"`
	Path           string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Region         string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *DatasetLocation) Reset() {
	*x = DatasetLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetLocation) ProtoMessage() {}

func (x *DatasetLocation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetLocation.ProtoReflect.Descriptor instead.
func (*DatasetLocation) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{3}
}

func (x *DatasetLocation) GetObjectStoreUrl() string {
	if x != nil {
		return x.ObjectStoreUrl
	}
	return ""
}

func (x *DatasetLocation) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DatasetLocation) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type ExplainQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryAst             *v1.Ast                 `protobuf:"bytes,7,opt,name=query_ast,json=queryAst,proto3" json:"query_ast,omitempty"`
	ExecutionConfig      *ExecutionConfig        `protobuf:"bytes,8,opt,name=execution_config,json=executionConfig,proto3" json:"execution_config,omitempty"`
	QueryId              *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	NamedQuerySources    []*NamedQuerySource     `protobuf:"bytes,11,rep,name=named_query_sources,json=namedQuerySources,proto3" json:"named_query_sources,omitempty"`
	KeypathCardinalities []*FieldCardinality     `protobuf:"bytes,12,rep,name=keypath_cardinalities,json=keypathCardinalities,proto3" json:"keypath_cardinalities,omitempty"`
}

func (x *ExplainQueryRequest) Reset() {
	*x = ExplainQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainQueryRequest) ProtoMessage() {}

func (x *ExplainQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainQueryRequest.ProtoReflect.Descriptor instead.
func (*ExplainQueryRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{4}
}

func (x *ExplainQueryRequest) GetQueryAst() *v1.Ast {
	if x != nil {
		return x.QueryAst
	}
	return nil
}

func (x *ExplainQueryRequest) GetExecutionConfig() *ExecutionConfig {
	if x != nil {
		return x.ExecutionConfig
	}
	return nil
}

func (x *ExplainQueryRequest) GetQueryId() *wrapperspb.StringValue {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *ExplainQueryRequest) GetNamedQuerySources() []*NamedQuerySource {
	if x != nil {
		return x.NamedQuerySources
	}
	return nil
}

func (x *ExplainQueryRequest) GetKeypathCardinalities() []*FieldCardinality {
	if x != nil {
		return x.KeypathCardinalities
	}
	return nil
}

type ExplainStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage      uint32 `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"`
	Partitions uint32 `protobuf:"varint,2,opt,name=partitions,proto3" json:"partitions,omitempty"`
	Plan       string `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *ExplainStage) Reset() {
	*x = ExplainStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainStage) ProtoMessage() {}

func (x *ExplainStage) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainStage.ProtoReflect.Descriptor instead.
func (*ExplainStage) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{5}
}

func (x *ExplainStage) GetStage() uint32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *ExplainStage) GetPartitions() uint32 {
	if x != nil {
		return x.Partitions
	}
	return 0
}

func (x *ExplainStage) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

type ExplainQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialLogicalPlan   string          `protobuf:"bytes,1,opt,name=initial_logical_plan,json=initialLogicalPlan,proto3" json:"initial_logical_plan,omitempty"`
	OptimizedLogicalPlan string          `protobuf:"bytes,2,opt,name=optimized_logical_plan,json=optimizedLogicalPlan,proto3" json:"optimized_logical_plan,omitempty"`
	PhysicalPlan         string          `protobuf:"bytes,3,opt,name=physical_plan,json=physicalPlan,proto3" json:"physical_plan,omitempty"`
	Stages               []*ExplainStage `protobuf:"bytes,4,rep,name=stages,proto3" json:"stages,omitempty"`
	FullExplanation      string          `protobuf:"bytes,5,opt,name=full_explanation,json=fullExplanation,proto3" json:"full_explanation,omitempty"`
}

func (x *ExplainQueryResponse) Reset() {
	*x = ExplainQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainQueryResponse) ProtoMessage() {}

func (x *ExplainQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainQueryResponse.ProtoReflect.Descriptor instead.
func (*ExplainQueryResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{6}
}

func (x *ExplainQueryResponse) GetInitialLogicalPlan() string {
	if x != nil {
		return x.InitialLogicalPlan
	}
	return ""
}

func (x *ExplainQueryResponse) GetOptimizedLogicalPlan() string {
	if x != nil {
		return x.OptimizedLogicalPlan
	}
	return ""
}

func (x *ExplainQueryResponse) GetPhysicalPlan() string {
	if x != nil {
		return x.PhysicalPlan
	}
	return ""
}

func (x *ExplainQueryResponse) GetStages() []*ExplainStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *ExplainQueryResponse) GetFullExplanation() string {
	if x != nil {
		return x.FullExplanation
	}
	return ""
}

type QuerySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*QuerySource_ArchiveSource_
	//	*QuerySource_OpenSearchSource_
	//	*QuerySource_CustomEnrichmentCsv_
	//	*QuerySource_AsyncQuerySource_
	//	*QuerySource_SchemaStoreSource_
	Source isQuerySource_Source `protobuf_oneof:"source"`
}

func (x *QuerySource) Reset() {
	*x = QuerySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySource) ProtoMessage() {}

func (x *QuerySource) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySource.ProtoReflect.Descriptor instead.
func (*QuerySource) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{7}
}

func (m *QuerySource) GetSource() isQuerySource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *QuerySource) GetArchiveSource() *QuerySource_ArchiveSource {
	if x, ok := x.GetSource().(*QuerySource_ArchiveSource_); ok {
		return x.ArchiveSource
	}
	return nil
}

func (x *QuerySource) GetOpenSearchSource() *QuerySource_OpenSearchSource {
	if x, ok := x.GetSource().(*QuerySource_OpenSearchSource_); ok {
		return x.OpenSearchSource
	}
	return nil
}

func (x *QuerySource) GetCustomEnrichmentCsv() *QuerySource_CustomEnrichmentCsv {
	if x, ok := x.GetSource().(*QuerySource_CustomEnrichmentCsv_); ok {
		return x.CustomEnrichmentCsv
	}
	return nil
}

func (x *QuerySource) GetAsyncQuerySource() *QuerySource_AsyncQuerySource {
	if x, ok := x.GetSource().(*QuerySource_AsyncQuerySource_); ok {
		return x.AsyncQuerySource
	}
	return nil
}

func (x *QuerySource) GetSchemaStoreSource() *QuerySource_SchemaStoreSource {
	if x, ok := x.GetSource().(*QuerySource_SchemaStoreSource_); ok {
		return x.SchemaStoreSource
	}
	return nil
}

type isQuerySource_Source interface {
	isQuerySource_Source()
}

type QuerySource_ArchiveSource_ struct {
	ArchiveSource *QuerySource_ArchiveSource `protobuf:"bytes,1,opt,name=archive_source,json=archiveSource,proto3,oneof"`
}

type QuerySource_OpenSearchSource_ struct {
	OpenSearchSource *QuerySource_OpenSearchSource `protobuf:"bytes,2,opt,name=open_search_source,json=openSearchSource,proto3,oneof"`
}

type QuerySource_CustomEnrichmentCsv_ struct {
	CustomEnrichmentCsv *QuerySource_CustomEnrichmentCsv `protobuf:"bytes,5,opt,name=custom_enrichment_csv,json=customEnrichmentCsv,proto3,oneof"`
}

type QuerySource_AsyncQuerySource_ struct {
	AsyncQuerySource *QuerySource_AsyncQuerySource `protobuf:"bytes,6,opt,name=async_query_source,json=asyncQuerySource,proto3,oneof"`
}

type QuerySource_SchemaStoreSource_ struct {
	SchemaStoreSource *QuerySource_SchemaStoreSource `protobuf:"bytes,7,opt,name=schema_store_source,json=schemaStoreSource,proto3,oneof"`
}

func (*QuerySource_ArchiveSource_) isQuerySource_Source() {}

func (*QuerySource_OpenSearchSource_) isQuerySource_Source() {}

func (*QuerySource_CustomEnrichmentCsv_) isQuerySource_Source() {}

func (*QuerySource_AsyncQuerySource_) isQuerySource_Source() {}

func (*QuerySource_SchemaStoreSource_) isQuerySource_Source() {}

type NamedQuerySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *v1.Source   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Source *QuerySource `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *NamedQuerySource) Reset() {
	*x = NamedQuerySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedQuerySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedQuerySource) ProtoMessage() {}

func (x *NamedQuerySource) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedQuerySource.ProtoReflect.Descriptor instead.
func (*NamedQuerySource) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{8}
}

func (x *NamedQuerySource) GetName() *v1.Source {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *NamedQuerySource) GetSource() *QuerySource {
	if x != nil {
		return x.Source
	}
	return nil
}

type SubmitQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (x *SubmitQueryResponse) Reset() {
	*x = SubmitQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitQueryResponse) ProtoMessage() {}

func (x *SubmitQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitQueryResponse.ProtoReflect.Descriptor instead.
func (*SubmitQueryResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitQueryResponse) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type SubmitDdlQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (x *SubmitDdlQueryResponse) Reset() {
	*x = SubmitDdlQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitDdlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitDdlQueryResponse) ProtoMessage() {}

func (x *SubmitDdlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitDdlQueryResponse.ProtoReflect.Descriptor instead.
func (*SubmitDdlQueryResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{10}
}

func (x *SubmitDdlQueryResponse) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type GetDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query to run using dataset as an input
	QueryAst        *v1.Ast                 `protobuf:"bytes,1,opt,name=query_ast,json=queryAst,proto3" json:"query_ast,omitempty"`
	ExecutionConfig *ExecutionConfig        `protobuf:"bytes,2,opt,name=execution_config,json=executionConfig,proto3" json:"execution_config,omitempty"`
	QueryId         *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Source pointing to the dataset
	NamedQuerySource *NamedQuerySource `protobuf:"bytes,4,opt,name=named_query_source,json=namedQuerySource,proto3" json:"named_query_source,omitempty"`
	// If skip and limit are not provided the whole dataset will be returned
	// Rows to skip
	Skip *uint64 `protobuf:"varint,5,opt,name=skip,proto3,oneof" json:"skip,omitempty"`
	// Number of rows to return
	Limit *uint64 `protobuf:"varint,6,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Response data format
	//
	// Types that are assignable to Format:
	//
	//	*GetDatasetRequest_Json_
	//	*GetDatasetRequest_Csv_
	Format isGetDatasetRequest_Format `protobuf_oneof:"format"`
}

func (x *GetDatasetRequest) Reset() {
	*x = GetDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetRequest) ProtoMessage() {}

func (x *GetDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{11}
}

func (x *GetDatasetRequest) GetQueryAst() *v1.Ast {
	if x != nil {
		return x.QueryAst
	}
	return nil
}

func (x *GetDatasetRequest) GetExecutionConfig() *ExecutionConfig {
	if x != nil {
		return x.ExecutionConfig
	}
	return nil
}

func (x *GetDatasetRequest) GetQueryId() *wrapperspb.StringValue {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *GetDatasetRequest) GetNamedQuerySource() *NamedQuerySource {
	if x != nil {
		return x.NamedQuerySource
	}
	return nil
}

func (x *GetDatasetRequest) GetSkip() uint64 {
	if x != nil && x.Skip != nil {
		return *x.Skip
	}
	return 0
}

func (x *GetDatasetRequest) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (m *GetDatasetRequest) GetFormat() isGetDatasetRequest_Format {
	if m != nil {
		return m.Format
	}
	return nil
}

func (x *GetDatasetRequest) GetJson() *GetDatasetRequest_Json {
	if x, ok := x.GetFormat().(*GetDatasetRequest_Json_); ok {
		return x.Json
	}
	return nil
}

func (x *GetDatasetRequest) GetCsv() *GetDatasetRequest_Csv {
	if x, ok := x.GetFormat().(*GetDatasetRequest_Csv_); ok {
		return x.Csv
	}
	return nil
}

type isGetDatasetRequest_Format interface {
	isGetDatasetRequest_Format()
}

type GetDatasetRequest_Json_ struct {
	Json *GetDatasetRequest_Json `protobuf:"bytes,7,opt,name=json,proto3,oneof"`
}

type GetDatasetRequest_Csv_ struct {
	Csv *GetDatasetRequest_Csv `protobuf:"bytes,8,opt,name=csv,proto3,oneof"`
}

func (*GetDatasetRequest_Json_) isGetDatasetRequest_Format() {}

func (*GetDatasetRequest_Csv_) isGetDatasetRequest_Format() {}

type GetDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row string `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
}

func (x *GetDatasetResponse) Reset() {
	*x = GetDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetResponse) ProtoMessage() {}

func (x *GetDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetResponse.ProtoReflect.Descriptor instead.
func (*GetDatasetResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{12}
}

func (x *GetDatasetResponse) GetRow() string {
	if x != nil {
		return x.Row
	}
	return ""
}

type GetPresignedDownloadUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryAst         *v1.Ast                                         `protobuf:"bytes,1,opt,name=query_ast,json=queryAst,proto3" json:"query_ast,omitempty"`
	QueryId          *wrapperspb.StringValue                         `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	NamedQuerySource *NamedQuerySource                               `protobuf:"bytes,3,opt,name=named_query_source,json=namedQuerySource,proto3" json:"named_query_source,omitempty"`
	StagingLocation  *GetPresignedDownloadUrlRequest_StagingLocation `protobuf:"bytes,4,opt,name=staging_location,json=stagingLocation,proto3" json:"staging_location,omitempty"`
	ValidForSeconds  uint64                                          `protobuf:"varint,5,opt,name=valid_for_seconds,json=validForSeconds,proto3" json:"valid_for_seconds,omitempty"`
	ExecutionConfig  *ExecutionConfig                                `protobuf:"bytes,6,opt,name=execution_config,json=executionConfig,proto3" json:"execution_config,omitempty"`
	// Types that are assignable to Format:
	//
	//	*GetPresignedDownloadUrlRequest_Csv_
	Format isGetPresignedDownloadUrlRequest_Format `protobuf_oneof:"format"`
}

func (x *GetPresignedDownloadUrlRequest) Reset() {
	*x = GetPresignedDownloadUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresignedDownloadUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresignedDownloadUrlRequest) ProtoMessage() {}

func (x *GetPresignedDownloadUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresignedDownloadUrlRequest.ProtoReflect.Descriptor instead.
func (*GetPresignedDownloadUrlRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{13}
}

func (x *GetPresignedDownloadUrlRequest) GetQueryAst() *v1.Ast {
	if x != nil {
		return x.QueryAst
	}
	return nil
}

func (x *GetPresignedDownloadUrlRequest) GetQueryId() *wrapperspb.StringValue {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *GetPresignedDownloadUrlRequest) GetNamedQuerySource() *NamedQuerySource {
	if x != nil {
		return x.NamedQuerySource
	}
	return nil
}

func (x *GetPresignedDownloadUrlRequest) GetStagingLocation() *GetPresignedDownloadUrlRequest_StagingLocation {
	if x != nil {
		return x.StagingLocation
	}
	return nil
}

func (x *GetPresignedDownloadUrlRequest) GetValidForSeconds() uint64 {
	if x != nil {
		return x.ValidForSeconds
	}
	return 0
}

func (x *GetPresignedDownloadUrlRequest) GetExecutionConfig() *ExecutionConfig {
	if x != nil {
		return x.ExecutionConfig
	}
	return nil
}

func (m *GetPresignedDownloadUrlRequest) GetFormat() isGetPresignedDownloadUrlRequest_Format {
	if m != nil {
		return m.Format
	}
	return nil
}

func (x *GetPresignedDownloadUrlRequest) GetCsv() *GetPresignedDownloadUrlRequest_Csv {
	if x, ok := x.GetFormat().(*GetPresignedDownloadUrlRequest_Csv_); ok {
		return x.Csv
	}
	return nil
}

type isGetPresignedDownloadUrlRequest_Format interface {
	isGetPresignedDownloadUrlRequest_Format()
}

type GetPresignedDownloadUrlRequest_Csv_ struct {
	Csv *GetPresignedDownloadUrlRequest_Csv `protobuf:"bytes,7,opt,name=csv,proto3,oneof"`
}

func (*GetPresignedDownloadUrlRequest_Csv_) isGetPresignedDownloadUrlRequest_Format() {}

type GetPresignedDownloadUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Absent when there are no results to be downloaded
	Url *string `protobuf:"bytes,1,opt,name=url,proto3,oneof" json:"url,omitempty"`
}

func (x *GetPresignedDownloadUrlResponse) Reset() {
	*x = GetPresignedDownloadUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresignedDownloadUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresignedDownloadUrlResponse) ProtoMessage() {}

func (x *GetPresignedDownloadUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresignedDownloadUrlResponse.ProtoReflect.Descriptor instead.
func (*GetPresignedDownloadUrlResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{14}
}

func (x *GetPresignedDownloadUrlResponse) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type DropDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetLocation *DatasetLocation `protobuf:"bytes,1,opt,name=dataset_location,json=datasetLocation,proto3" json:"dataset_location,omitempty"`
	DatasetName     string           `protobuf:"bytes,2,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty"`
}

func (x *DropDatasetRequest) Reset() {
	*x = DropDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropDatasetRequest) ProtoMessage() {}

func (x *DropDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropDatasetRequest.ProtoReflect.Descriptor instead.
func (*DropDatasetRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{15}
}

func (x *DropDatasetRequest) GetDatasetLocation() *DatasetLocation {
	if x != nil {
		return x.DatasetLocation
	}
	return nil
}

func (x *DropDatasetRequest) GetDatasetName() string {
	if x != nil {
		return x.DatasetName
	}
	return ""
}

type DropDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DropDatasetResponse) Reset() {
	*x = DropDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropDatasetResponse) ProtoMessage() {}

func (x *DropDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropDatasetResponse.ProtoReflect.Descriptor instead.
func (*DropDatasetResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{16}
}

// Configurations for query execution
type ExecutionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the desired maximum parallelism of the query
	TargetPartitions *uint64 `protobuf:"varint,1,opt,name=target_partitions,json=targetPartitions,proto3,oneof" json:"target_partitions,omitempty"`
	// Defines the maximum amount of bytes to be processed by each query partition
	MaxBytesPerPartition *uint64 `protobuf:"varint,3,opt,name=max_bytes_per_partition,json=maxBytesPerPartition,proto3,oneof" json:"max_bytes_per_partition,omitempty"`
	// Which metastore to use
	Metastore Metastore `protobuf:"varint,4,opt,name=metastore,proto3,enum=com.coralogix.dataprime.v1.Metastore" json:"metastore,omitempty"`
	// Enable page level bloom filters
	UsePageBloomFilter *bool   `protobuf:"varint,7,opt,name=use_page_bloom_filter,json=usePageBloomFilter,proto3,oneof" json:"use_page_bloom_filter,omitempty"`
	PageIndexPath      *string `protobuf:"bytes,8,opt,name=page_index_path,json=pageIndexPath,proto3,oneof" json:"page_index_path,omitempty"`
	// Timeout for running a query
	// unspecified means dqe uses its default timeout
	TimeoutSec *uint64 `protobuf:"varint,9,opt,name=timeout_sec,json=timeoutSec,proto3,oneof" json:"timeout_sec,omitempty"`
	// Choose if we want to use column statistics for table scans
	UseColumnStatistics *bool `protobuf:"varint,10,opt,name=use_column_statistics,json=useColumnStatistics,proto3,oneof" json:"use_column_statistics,omitempty"`
	// Choose if we want to use full text index (if available)
	UseTextIndex *bool `protobuf:"varint,11,opt,name=use_text_index,json=useTextIndex,proto3,oneof" json:"use_text_index,omitempty"`
	// Defines the maximum amount of bytes read from S3
	MaxBytesReadFromS3 *uint64 `protobuf:"varint,12,opt,name=max_bytes_read_from_s3,json=maxBytesReadFromS3,proto3,oneof" json:"max_bytes_read_from_s3,omitempty"`
	// Defines the maximum number of blocks to read from S3
	BlocksLimit *uint64 `protobuf:"varint,13,opt,name=blocks_limit,json=blocksLimit,proto3,oneof" json:"blocks_limit,omitempty"`
	// Choose if we want to use correct sorting for order by expressions
	UseCorrectSorting *bool `protobuf:"varint,14,opt,name=use_correct_sorting,json=useCorrectSorting,proto3,oneof" json:"use_correct_sorting,omitempty"`
	// Defines the maximum number of buckets to use for OpenSearch aggregation
	OpenSearchAggBucketsSize *uint64 `protobuf:"varint,15,opt,name=open_search_agg_buckets_size,json=openSearchAggBucketsSize,proto3,oneof" json:"open_search_agg_buckets_size,omitempty"`
	// Defines the maximum number of aggregation result pages to query from OpenSearch. One page is of size open_search_agg_buckets_size
	OpenSearchAggMaxPages *uint64 `protobuf:"varint,16,opt,name=open_search_agg_max_pages,json=openSearchAggMaxPages,proto3,oneof" json:"open_search_agg_max_pages,omitempty"`
	// Enable jsona parse optimization
	OptimizeJsonaParsing *bool `protobuf:"varint,17,opt,name=optimize_jsona_parsing,json=optimizeJsonaParsing,proto3,oneof" json:"optimize_jsona_parsing,omitempty"`
	// Enable repartitioning of aggregation queries. If `true` this will partition the final aggregation
	// stage
	RepartitionAggregations *bool `protobuf:"varint,18,opt,name=repartition_aggregations,json=repartitionAggregations,proto3,oneof" json:"repartition_aggregations,omitempty"`
	// Enable usage of remote index store (when it is configured in the query engine)
	UseIndexStore  *bool           `protobuf:"varint,19,opt,name=use_index_store,json=useIndexStore,proto3,oneof" json:"use_index_store,omitempty"`
	SchedulingTier *SchedulingTier `protobuf:"varint,20,opt,name=scheduling_tier,json=schedulingTier,proto3,enum=com.coralogix.dataprime.v1.SchedulingTier,oneof" json:"scheduling_tier,omitempty"`
	// Sets of executor resource groups the query can be scheduled on
	ResourceGroup []ResourceGroup `protobuf:"varint,21,rep,packed,name=resource_group,json=resourceGroup,proto3,enum=com.coralogix.dataprime.v1.ResourceGroup" json:"resource_group,omitempty"`
	// Sets the maximum size of output shuffle size during query execution. If set,
	// shuffle files will be truncated after hitting this size limit, leading to possibly
	// incomplete query results.
	// If the limit is hit during query execution, the `shuffle_limit_reached` flag should
	// be set in the query status
	ShuffleSizeLimit *uint64 `protobuf:"varint,22,opt,name=shuffle_size_limit,json=shuffleSizeLimit,proto3,oneof" json:"shuffle_size_limit,omitempty"`
}

func (x *ExecutionConfig) Reset() {
	*x = ExecutionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionConfig) ProtoMessage() {}

func (x *ExecutionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionConfig.ProtoReflect.Descriptor instead.
func (*ExecutionConfig) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{17}
}

func (x *ExecutionConfig) GetTargetPartitions() uint64 {
	if x != nil && x.TargetPartitions != nil {
		return *x.TargetPartitions
	}
	return 0
}

func (x *ExecutionConfig) GetMaxBytesPerPartition() uint64 {
	if x != nil && x.MaxBytesPerPartition != nil {
		return *x.MaxBytesPerPartition
	}
	return 0
}

func (x *ExecutionConfig) GetMetastore() Metastore {
	if x != nil {
		return x.Metastore
	}
	return Metastore_METASTORE_UNSPECIFIED
}

func (x *ExecutionConfig) GetUsePageBloomFilter() bool {
	if x != nil && x.UsePageBloomFilter != nil {
		return *x.UsePageBloomFilter
	}
	return false
}

func (x *ExecutionConfig) GetPageIndexPath() string {
	if x != nil && x.PageIndexPath != nil {
		return *x.PageIndexPath
	}
	return ""
}

func (x *ExecutionConfig) GetTimeoutSec() uint64 {
	if x != nil && x.TimeoutSec != nil {
		return *x.TimeoutSec
	}
	return 0
}

func (x *ExecutionConfig) GetUseColumnStatistics() bool {
	if x != nil && x.UseColumnStatistics != nil {
		return *x.UseColumnStatistics
	}
	return false
}

func (x *ExecutionConfig) GetUseTextIndex() bool {
	if x != nil && x.UseTextIndex != nil {
		return *x.UseTextIndex
	}
	return false
}

func (x *ExecutionConfig) GetMaxBytesReadFromS3() uint64 {
	if x != nil && x.MaxBytesReadFromS3 != nil {
		return *x.MaxBytesReadFromS3
	}
	return 0
}

func (x *ExecutionConfig) GetBlocksLimit() uint64 {
	if x != nil && x.BlocksLimit != nil {
		return *x.BlocksLimit
	}
	return 0
}

func (x *ExecutionConfig) GetUseCorrectSorting() bool {
	if x != nil && x.UseCorrectSorting != nil {
		return *x.UseCorrectSorting
	}
	return false
}

func (x *ExecutionConfig) GetOpenSearchAggBucketsSize() uint64 {
	if x != nil && x.OpenSearchAggBucketsSize != nil {
		return *x.OpenSearchAggBucketsSize
	}
	return 0
}

func (x *ExecutionConfig) GetOpenSearchAggMaxPages() uint64 {
	if x != nil && x.OpenSearchAggMaxPages != nil {
		return *x.OpenSearchAggMaxPages
	}
	return 0
}

func (x *ExecutionConfig) GetOptimizeJsonaParsing() bool {
	if x != nil && x.OptimizeJsonaParsing != nil {
		return *x.OptimizeJsonaParsing
	}
	return false
}

func (x *ExecutionConfig) GetRepartitionAggregations() bool {
	if x != nil && x.RepartitionAggregations != nil {
		return *x.RepartitionAggregations
	}
	return false
}

func (x *ExecutionConfig) GetUseIndexStore() bool {
	if x != nil && x.UseIndexStore != nil {
		return *x.UseIndexStore
	}
	return false
}

func (x *ExecutionConfig) GetSchedulingTier() SchedulingTier {
	if x != nil && x.SchedulingTier != nil {
		return *x.SchedulingTier
	}
	return SchedulingTier_SCHEDULING_TIER_UNSPECIFIED
}

func (x *ExecutionConfig) GetResourceGroup() []ResourceGroup {
	if x != nil {
		return x.ResourceGroup
	}
	return nil
}

func (x *ExecutionConfig) GetShuffleSizeLimit() uint64 {
	if x != nil && x.ShuffleSizeLimit != nil {
		return *x.ShuffleSizeLimit
	}
	return 0
}

type AwaitReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (x *AwaitReadyRequest) Reset() {
	*x = AwaitReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwaitReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwaitReadyRequest) ProtoMessage() {}

func (x *AwaitReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwaitReadyRequest.ProtoReflect.Descriptor instead.
func (*AwaitReadyRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{18}
}

func (x *AwaitReadyRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type Failed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Error:
	//
	//	*Failed_Internal_
	//	*Failed_External_
	//	*Failed_Cancelled_
	Error     isFailed_Error `protobuf_oneof:"error"`
	QueuedAt  uint64         `protobuf:"varint,4,opt,name=queued_at,json=queuedAt,proto3" json:"queued_at,omitempty"`
	StartedAt uint64         `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt   uint64         `protobuf:"varint,6,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
}

func (x *Failed) Reset() {
	*x = Failed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failed) ProtoMessage() {}

func (x *Failed) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failed.ProtoReflect.Descriptor instead.
func (*Failed) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{19}
}

func (m *Failed) GetError() isFailed_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (x *Failed) GetInternal() *Failed_Internal {
	if x, ok := x.GetError().(*Failed_Internal_); ok {
		return x.Internal
	}
	return nil
}

func (x *Failed) GetExternal() *Failed_External {
	if x, ok := x.GetError().(*Failed_External_); ok {
		return x.External
	}
	return nil
}

func (x *Failed) GetCancelled() *Failed_Cancelled {
	if x, ok := x.GetError().(*Failed_Cancelled_); ok {
		return x.Cancelled
	}
	return nil
}

func (x *Failed) GetQueuedAt() uint64 {
	if x != nil {
		return x.QueuedAt
	}
	return 0
}

func (x *Failed) GetStartedAt() uint64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *Failed) GetEndedAt() uint64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

type isFailed_Error interface {
	isFailed_Error()
}

type Failed_Internal_ struct {
	Internal *Failed_Internal `protobuf:"bytes,1,opt,name=internal,proto3,oneof"`
}

type Failed_External_ struct {
	External *Failed_External `protobuf:"bytes,2,opt,name=external,proto3,oneof"`
}

type Failed_Cancelled_ struct {
	Cancelled *Failed_Cancelled `protobuf:"bytes,3,opt,name=cancelled,proto3,oneof"`
}

func (*Failed_Internal_) isFailed_Error() {}

func (*Failed_External_) isFailed_Error() {}

func (*Failed_Cancelled_) isFailed_Error() {}

type AwaitReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *QueryStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AwaitReadyResponse) Reset() {
	*x = AwaitReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwaitReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwaitReadyResponse) ProtoMessage() {}

func (x *AwaitReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwaitReadyResponse.ProtoReflect.Descriptor instead.
func (*AwaitReadyResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{20}
}

func (x *AwaitReadyResponse) GetStatus() *QueryStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetQueryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (x *GetQueryStatusRequest) Reset() {
	*x = GetQueryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryStatusRequest) ProtoMessage() {}

func (x *GetQueryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryStatusRequest.ProtoReflect.Descriptor instead.
func (*GetQueryStatusRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{21}
}

func (x *GetQueryStatusRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type QueryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Status:
	//
	//	*QueryStatus_Queued_
	//	*QueryStatus_Running_
	//	*QueryStatus_Failed
	//	*QueryStatus_Completed_
	//	*QueryStatus_Planning_
	//	*QueryStatus_NotFound_
	//	*QueryStatus_Cancelled_
	Status  isQueryStatus_Status `protobuf_oneof:"status"`
	QueryId string               `protobuf:"bytes,6,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (x *QueryStatus) Reset() {
	*x = QueryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatus) ProtoMessage() {}

func (x *QueryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatus.ProtoReflect.Descriptor instead.
func (*QueryStatus) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{22}
}

func (m *QueryStatus) GetStatus() isQueryStatus_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *QueryStatus) GetQueued() *QueryStatus_Queued {
	if x, ok := x.GetStatus().(*QueryStatus_Queued_); ok {
		return x.Queued
	}
	return nil
}

func (x *QueryStatus) GetRunning() *QueryStatus_Running {
	if x, ok := x.GetStatus().(*QueryStatus_Running_); ok {
		return x.Running
	}
	return nil
}

func (x *QueryStatus) GetFailed() *Failed {
	if x, ok := x.GetStatus().(*QueryStatus_Failed); ok {
		return x.Failed
	}
	return nil
}

func (x *QueryStatus) GetCompleted() *QueryStatus_Completed {
	if x, ok := x.GetStatus().(*QueryStatus_Completed_); ok {
		return x.Completed
	}
	return nil
}

func (x *QueryStatus) GetPlanning() *QueryStatus_Planning {
	if x, ok := x.GetStatus().(*QueryStatus_Planning_); ok {
		return x.Planning
	}
	return nil
}

func (x *QueryStatus) GetNotFound() *QueryStatus_NotFound {
	if x, ok := x.GetStatus().(*QueryStatus_NotFound_); ok {
		return x.NotFound
	}
	return nil
}

func (x *QueryStatus) GetCancelled() *QueryStatus_Cancelled {
	if x, ok := x.GetStatus().(*QueryStatus_Cancelled_); ok {
		return x.Cancelled
	}
	return nil
}

func (x *QueryStatus) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type isQueryStatus_Status interface {
	isQueryStatus_Status()
}

type QueryStatus_Queued_ struct {
	Queued *QueryStatus_Queued `protobuf:"bytes,1,opt,name=queued,proto3,oneof"`
}

type QueryStatus_Running_ struct {
	Running *QueryStatus_Running `protobuf:"bytes,2,opt,name=running,proto3,oneof"`
}

type QueryStatus_Failed struct {
	Failed *Failed `protobuf:"bytes,3,opt,name=failed,proto3,oneof"`
}

type QueryStatus_Completed_ struct {
	Completed *QueryStatus_Completed `protobuf:"bytes,4,opt,name=completed,proto3,oneof"`
}

type QueryStatus_Planning_ struct {
	Planning *QueryStatus_Planning `protobuf:"bytes,5,opt,name=planning,proto3,oneof"`
}

type QueryStatus_NotFound_ struct {
	NotFound *QueryStatus_NotFound `protobuf:"bytes,7,opt,name=not_found,json=notFound,proto3,oneof"`
}

type QueryStatus_Cancelled_ struct {
	Cancelled *QueryStatus_Cancelled `protobuf:"bytes,8,opt,name=cancelled,proto3,oneof"`
}

func (*QueryStatus_Queued_) isQueryStatus_Status() {}

func (*QueryStatus_Running_) isQueryStatus_Status() {}

func (*QueryStatus_Failed) isQueryStatus_Status() {}

func (*QueryStatus_Completed_) isQueryStatus_Status() {}

func (*QueryStatus_Planning_) isQueryStatus_Status() {}

func (*QueryStatus_NotFound_) isQueryStatus_Status() {}

func (*QueryStatus_Cancelled_) isQueryStatus_Status() {}

type GetQueryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *QueryStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetQueryStatusResponse) Reset() {
	*x = GetQueryStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryStatusResponse) ProtoMessage() {}

func (x *GetQueryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryStatusResponse.ProtoReflect.Descriptor instead.
func (*GetQueryStatusResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{23}
}

func (x *GetQueryStatusResponse) GetStatus() *QueryStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type CancelQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (x *CancelQueryRequest) Reset() {
	*x = CancelQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelQueryRequest) ProtoMessage() {}

func (x *CancelQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelQueryRequest.ProtoReflect.Descriptor instead.
func (*CancelQueryRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{24}
}

func (x *CancelQueryRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type CancelQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cancelled bool `protobuf:"varint,1,opt,name=cancelled,proto3" json:"cancelled,omitempty"`
}

func (x *CancelQueryResponse) Reset() {
	*x = CancelQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelQueryResponse) ProtoMessage() {}

func (x *CancelQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelQueryResponse.ProtoReflect.Descriptor instead.
func (*CancelQueryResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{25}
}

func (x *CancelQueryResponse) GetCancelled() bool {
	if x != nil {
		return x.Cancelled
	}
	return false
}

type QueryPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*QueryPayload_Dataprime
	Payload isQueryPayload_Payload `protobuf_oneof:"payload"`
}

func (x *QueryPayload) Reset() {
	*x = QueryPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPayload) ProtoMessage() {}

func (x *QueryPayload) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPayload.ProtoReflect.Descriptor instead.
func (*QueryPayload) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{26}
}

func (m *QueryPayload) GetPayload() isQueryPayload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *QueryPayload) GetDataprime() *SerializedDataprime {
	if x, ok := x.GetPayload().(*QueryPayload_Dataprime); ok {
		return x.Dataprime
	}
	return nil
}

type isQueryPayload_Payload interface {
	isQueryPayload_Payload()
}

type QueryPayload_Dataprime struct {
	// We cannot inject the AST proto into the request proto on the frontend
	// because the AST proto is generated by ScalaJS protobuf compiler instead of a JS protobuf library
	Dataprime *SerializedDataprime `protobuf:"bytes,1,opt,name=dataprime,proto3,oneof"`
}

func (*QueryPayload_Dataprime) isQueryPayload_Payload() {}

type SerializedDataprime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SerializedDataprime) Reset() {
	*x = SerializedDataprime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerializedDataprime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializedDataprime) ProtoMessage() {}

func (x *SerializedDataprime) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializedDataprime.ProtoReflect.Descriptor instead.
func (*SerializedDataprime) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{27}
}

func (x *SerializedDataprime) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type QuerySource_ArchiveSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName        string                  `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	RegionName        string                  `protobuf:"bytes,2,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	MaxArchiveVersion uint32                  `protobuf:"varint,3,opt,name=max_archive_version,json=maxArchiveVersion,proto3" json:"max_archive_version,omitempty"`
	BucketV2          *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=bucket_v2,json=bucketV2,proto3" json:"bucket_v2,omitempty"`
}

func (x *QuerySource_ArchiveSource) Reset() {
	*x = QuerySource_ArchiveSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySource_ArchiveSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySource_ArchiveSource) ProtoMessage() {}

func (x *QuerySource_ArchiveSource) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySource_ArchiveSource.ProtoReflect.Descriptor instead.
func (*QuerySource_ArchiveSource) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{7, 0}
}

func (x *QuerySource_ArchiveSource) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *QuerySource_ArchiveSource) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *QuerySource_ArchiveSource) GetMaxArchiveVersion() uint32 {
	if x != nil {
		return x.MaxArchiveVersion
	}
	return 0
}

func (x *QuerySource_ArchiveSource) GetBucketV2() *wrapperspb.StringValue {
	if x != nil {
		return x.BucketV2
	}
	return nil
}

type QuerySource_OpenSearchSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index string  `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
	Host  *string `protobuf:"bytes,5,opt,name=host,proto3,oneof" json:"host,omitempty"`
}

func (x *QuerySource_OpenSearchSource) Reset() {
	*x = QuerySource_OpenSearchSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySource_OpenSearchSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySource_OpenSearchSource) ProtoMessage() {}

func (x *QuerySource_OpenSearchSource) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySource_OpenSearchSource.ProtoReflect.Descriptor instead.
func (*QuerySource_OpenSearchSource) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{7, 1}
}

func (x *QuerySource_OpenSearchSource) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *QuerySource_OpenSearchSource) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

type QuerySource_CustomEnrichmentCsv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	RegionName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
}

func (x *QuerySource_CustomEnrichmentCsv) Reset() {
	*x = QuerySource_CustomEnrichmentCsv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySource_CustomEnrichmentCsv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySource_CustomEnrichmentCsv) ProtoMessage() {}

func (x *QuerySource_CustomEnrichmentCsv) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySource_CustomEnrichmentCsv.ProtoReflect.Descriptor instead.
func (*QuerySource_CustomEnrichmentCsv) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{7, 2}
}

func (x *QuerySource_CustomEnrichmentCsv) GetBucketName() *wrapperspb.StringValue {
	if x != nil {
		return x.BucketName
	}
	return nil
}

func (x *QuerySource_CustomEnrichmentCsv) GetRegionName() *wrapperspb.StringValue {
	if x != nil {
		return x.RegionName
	}
	return nil
}

type QuerySource_AsyncQuerySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArchiveSource *QuerySource_ArchiveSource `protobuf:"bytes,1,opt,name=archive_source,json=archiveSource,proto3" json:"archive_source,omitempty"`
}

func (x *QuerySource_AsyncQuerySource) Reset() {
	*x = QuerySource_AsyncQuerySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySource_AsyncQuerySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySource_AsyncQuerySource) ProtoMessage() {}

func (x *QuerySource_AsyncQuerySource) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySource_AsyncQuerySource.ProtoReflect.Descriptor instead.
func (*QuerySource_AsyncQuerySource) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{7, 3}
}

func (x *QuerySource_AsyncQuerySource) GetArchiveSource() *QuerySource_ArchiveSource {
	if x != nil {
		return x.ArchiveSource
	}
	return nil
}

type QuerySource_SchemaStoreSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamIds []string `protobuf:"bytes,1,rep,name=team_ids,json=teamIds,proto3" json:"team_ids,omitempty"`
}

func (x *QuerySource_SchemaStoreSource) Reset() {
	*x = QuerySource_SchemaStoreSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySource_SchemaStoreSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySource_SchemaStoreSource) ProtoMessage() {}

func (x *QuerySource_SchemaStoreSource) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySource_SchemaStoreSource.ProtoReflect.Descriptor instead.
func (*QuerySource_SchemaStoreSource) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{7, 4}
}

func (x *QuerySource_SchemaStoreSource) GetTeamIds() []string {
	if x != nil {
		return x.TeamIds
	}
	return nil
}

type GetDatasetRequest_Json struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDatasetRequest_Json) Reset() {
	*x = GetDatasetRequest_Json{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetRequest_Json) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetRequest_Json) ProtoMessage() {}

func (x *GetDatasetRequest_Json) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetRequest_Json.ProtoReflect.Descriptor instead.
func (*GetDatasetRequest_Json) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{11, 0}
}

type GetDatasetRequest_Csv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDatasetRequest_Csv) Reset() {
	*x = GetDatasetRequest_Csv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetRequest_Csv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetRequest_Csv) ProtoMessage() {}

func (x *GetDatasetRequest_Csv) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetRequest_Csv.ProtoReflect.Descriptor instead.
func (*GetDatasetRequest_Csv) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{11, 1}
}

type GetPresignedDownloadUrlRequest_Csv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    bool                                         `protobuf:"varint,1,opt,name=header,proto3" json:"header,omitempty"`
	Delimiter string                                       `protobuf:"bytes,2,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	Columns   []*GetPresignedDownloadUrlRequest_Csv_Column `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *GetPresignedDownloadUrlRequest_Csv) Reset() {
	*x = GetPresignedDownloadUrlRequest_Csv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresignedDownloadUrlRequest_Csv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresignedDownloadUrlRequest_Csv) ProtoMessage() {}

func (x *GetPresignedDownloadUrlRequest_Csv) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresignedDownloadUrlRequest_Csv.ProtoReflect.Descriptor instead.
func (*GetPresignedDownloadUrlRequest_Csv) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{13, 0}
}

func (x *GetPresignedDownloadUrlRequest_Csv) GetHeader() bool {
	if x != nil {
		return x.Header
	}
	return false
}

func (x *GetPresignedDownloadUrlRequest_Csv) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

func (x *GetPresignedDownloadUrlRequest_Csv) GetColumns() []*GetPresignedDownloadUrlRequest_Csv_Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type GetPresignedDownloadUrlRequest_StagingLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region         string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	ObjectStoreUrl string `protobuf:"bytes,2,opt,name=object_store_url,json=objectStoreUrl,proto3" json:"object_store_url,omitempty"`
	Path           string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Filename       string `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *GetPresignedDownloadUrlRequest_StagingLocation) Reset() {
	*x = GetPresignedDownloadUrlRequest_StagingLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresignedDownloadUrlRequest_StagingLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresignedDownloadUrlRequest_StagingLocation) ProtoMessage() {}

func (x *GetPresignedDownloadUrlRequest_StagingLocation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresignedDownloadUrlRequest_StagingLocation.ProtoReflect.Descriptor instead.
func (*GetPresignedDownloadUrlRequest_StagingLocation) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{13, 1}
}

func (x *GetPresignedDownloadUrlRequest_StagingLocation) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetPresignedDownloadUrlRequest_StagingLocation) GetObjectStoreUrl() string {
	if x != nil {
		return x.ObjectStoreUrl
	}
	return ""
}

func (x *GetPresignedDownloadUrlRequest_StagingLocation) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetPresignedDownloadUrlRequest_StagingLocation) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type GetPresignedDownloadUrlRequest_Csv_Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Keypath string `protobuf:"bytes,2,opt,name=keypath,proto3" json:"keypath,omitempty"`
}

func (x *GetPresignedDownloadUrlRequest_Csv_Column) Reset() {
	*x = GetPresignedDownloadUrlRequest_Csv_Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresignedDownloadUrlRequest_Csv_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresignedDownloadUrlRequest_Csv_Column) ProtoMessage() {}

func (x *GetPresignedDownloadUrlRequest_Csv_Column) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresignedDownloadUrlRequest_Csv_Column.ProtoReflect.Descriptor instead.
func (*GetPresignedDownloadUrlRequest_Csv_Column) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{13, 0, 0}
}

func (x *GetPresignedDownloadUrlRequest_Csv_Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPresignedDownloadUrlRequest_Csv_Column) GetKeypath() string {
	if x != nil {
		return x.Keypath
	}
	return ""
}

type Failed_Internal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Failed_Internal) Reset() {
	*x = Failed_Internal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failed_Internal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failed_Internal) ProtoMessage() {}

func (x *Failed_Internal) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failed_Internal.ProtoReflect.Descriptor instead.
func (*Failed_Internal) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{19, 0}
}

func (x *Failed_Internal) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Failed_External struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Failed_External) Reset() {
	*x = Failed_External{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failed_External) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failed_External) ProtoMessage() {}

func (x *Failed_External) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failed_External.ProtoReflect.Descriptor instead.
func (*Failed_External) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{19, 1}
}

func (x *Failed_External) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Failed_Cancelled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Failed_Cancelled) Reset() {
	*x = Failed_Cancelled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failed_Cancelled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failed_Cancelled) ProtoMessage() {}

func (x *Failed_Cancelled) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failed_Cancelled.ProtoReflect.Descriptor instead.
func (*Failed_Cancelled) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{19, 2}
}

type QueryStatus_Queued struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueuedAt uint64 `protobuf:"varint,1,opt,name=queued_at,json=queuedAt,proto3" json:"queued_at,omitempty"`
}

func (x *QueryStatus_Queued) Reset() {
	*x = QueryStatus_Queued{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStatus_Queued) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatus_Queued) ProtoMessage() {}

func (x *QueryStatus_Queued) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatus_Queued.ProtoReflect.Descriptor instead.
func (*QueryStatus_Queued) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{22, 0}
}

func (x *QueryStatus_Queued) GetQueuedAt() uint64 {
	if x != nil {
		return x.QueuedAt
	}
	return 0
}

type QueryStatus_Running struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueuedAt  uint64 `protobuf:"varint,1,opt,name=queued_at,json=queuedAt,proto3" json:"queued_at,omitempty"`
	StartedAt uint64 `protobuf:"varint,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
}

func (x *QueryStatus_Running) Reset() {
	*x = QueryStatus_Running{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStatus_Running) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatus_Running) ProtoMessage() {}

func (x *QueryStatus_Running) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatus_Running.ProtoReflect.Descriptor instead.
func (*QueryStatus_Running) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{22, 1}
}

func (x *QueryStatus_Running) GetQueuedAt() uint64 {
	if x != nil {
		return x.QueuedAt
	}
	return 0
}

func (x *QueryStatus_Running) GetStartedAt() uint64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

type QueryStatus_Completed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueuedAt         uint64 `protobuf:"varint,1,opt,name=queued_at,json=queuedAt,proto3" json:"queued_at,omitempty"`
	ScanLimitReached bool   `protobuf:"varint,2,opt,name=scan_limit_reached,json=scanLimitReached,proto3" json:"scan_limit_reached,omitempty"`
	EndedAt          uint64 `protobuf:"varint,3,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	// The number of rows returned by the query.
	// Note that for queries that write to a sink,
	// this is not equivalent to the number of rows written.
	NumRows              uint64              `protobuf:"varint,4,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	BlocksLimitReached   bool                `protobuf:"varint,5,opt,name=blocks_limit_reached,json=blocksLimitReached,proto3" json:"blocks_limit_reached,omitempty"`
	ObjectStoreWarning   *ObjectStoreWarning `protobuf:"bytes,6,opt,name=object_store_warning,json=objectStoreWarning,proto3" json:"object_store_warning,omitempty"`
	StartedAt            uint64              `protobuf:"varint,7,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	ScrollTimeoutReached bool                `protobuf:"varint,8,opt,name=scroll_timeout_reached,json=scrollTimeoutReached,proto3" json:"scroll_timeout_reached,omitempty"`
	ColumnLimitReached   bool                `protobuf:"varint,9,opt,name=column_limit_reached,json=columnLimitReached,proto3" json:"column_limit_reached,omitempty"`
	// One or more shuffle partitions hit the max size and were
	// truncated. This indicates that query results are possibly imcomplete
	ShuffleLimitReached bool `protobuf:"varint,10,opt,name=shuffle_limit_reached,json=shuffleLimitReached,proto3" json:"shuffle_limit_reached,omitempty"`
}

func (x *QueryStatus_Completed) Reset() {
	*x = QueryStatus_Completed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStatus_Completed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatus_Completed) ProtoMessage() {}

func (x *QueryStatus_Completed) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatus_Completed.ProtoReflect.Descriptor instead.
func (*QueryStatus_Completed) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{22, 2}
}

func (x *QueryStatus_Completed) GetQueuedAt() uint64 {
	if x != nil {
		return x.QueuedAt
	}
	return 0
}

func (x *QueryStatus_Completed) GetScanLimitReached() bool {
	if x != nil {
		return x.ScanLimitReached
	}
	return false
}

func (x *QueryStatus_Completed) GetEndedAt() uint64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

func (x *QueryStatus_Completed) GetNumRows() uint64 {
	if x != nil {
		return x.NumRows
	}
	return 0
}

func (x *QueryStatus_Completed) GetBlocksLimitReached() bool {
	if x != nil {
		return x.BlocksLimitReached
	}
	return false
}

func (x *QueryStatus_Completed) GetObjectStoreWarning() *ObjectStoreWarning {
	if x != nil {
		return x.ObjectStoreWarning
	}
	return nil
}

func (x *QueryStatus_Completed) GetStartedAt() uint64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *QueryStatus_Completed) GetScrollTimeoutReached() bool {
	if x != nil {
		return x.ScrollTimeoutReached
	}
	return false
}

func (x *QueryStatus_Completed) GetColumnLimitReached() bool {
	if x != nil {
		return x.ColumnLimitReached
	}
	return false
}

func (x *QueryStatus_Completed) GetShuffleLimitReached() bool {
	if x != nil {
		return x.ShuffleLimitReached
	}
	return false
}

type QueryStatus_Planning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueuedAt uint64 `protobuf:"varint,1,opt,name=queued_at,json=queuedAt,proto3" json:"queued_at,omitempty"`
}

func (x *QueryStatus_Planning) Reset() {
	*x = QueryStatus_Planning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStatus_Planning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatus_Planning) ProtoMessage() {}

func (x *QueryStatus_Planning) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatus_Planning.ProtoReflect.Descriptor instead.
func (*QueryStatus_Planning) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{22, 3}
}

func (x *QueryStatus_Planning) GetQueuedAt() uint64 {
	if x != nil {
		return x.QueuedAt
	}
	return 0
}

type QueryStatus_NotFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryStatus_NotFound) Reset() {
	*x = QueryStatus_NotFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStatus_NotFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatus_NotFound) ProtoMessage() {}

func (x *QueryStatus_NotFound) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatus_NotFound.ProtoReflect.Descriptor instead.
func (*QueryStatus_NotFound) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{22, 4}
}

type QueryStatus_Cancelled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueuedAt uint64 `protobuf:"varint,1,opt,name=queued_at,json=queuedAt,proto3" json:"queued_at,omitempty"`
	EndedAt  uint64 `protobuf:"varint,2,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
}

func (x *QueryStatus_Cancelled) Reset() {
	*x = QueryStatus_Cancelled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStatus_Cancelled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatus_Cancelled) ProtoMessage() {}

func (x *QueryStatus_Cancelled) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_v1_query_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatus_Cancelled.ProtoReflect.Descriptor instead.
func (*QueryStatus_Cancelled) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP(), []int{22, 5}
}

func (x *QueryStatus_Cancelled) GetQueuedAt() uint64 {
	if x != nil {
		return x.QueuedAt
	}
	return 0
}

func (x *QueryStatus_Cancelled) GetEndedAt() uint64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

var File_com_coralogix_dataprime_v1_query_proto protoreflect.FileDescriptor

var file_com_coralogix_dataprime_v1_query_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x28, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x27, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7a, 0x0a, 0x10, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x44,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x74,
	0x79, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xd2, 0x03, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x74, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x74, 0x12,
	0x56, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x5c, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x61,
	0x0a, 0x15, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x14, 0x6b, 0x65, 0x79,
	0x70, 0x61, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a,
	0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22, 0x82, 0x04, 0x0a, 0x15,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x44, 0x64, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x64, 0x64, 0x6c, 0x5f, 0x61, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x64, 0x6c, 0x41, 0x73, 0x74, 0x52, 0x06,
	0x64, 0x64, 0x6c, 0x41, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5c, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x61, 0x0a,
	0x15, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x14, 0x6b, 0x65, 0x79, 0x70,
	0x61, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x67, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xd3, 0x03, 0x0a, 0x13, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x74, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x08, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x11, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x61, 0x0a, 0x15, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x14, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22,
	0x58, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x14, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x75, 0x6c,
	0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x09, 0x0a,
	0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x12,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x73, 0x76, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x73, 0x76, 0x48, 0x00, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x73, 0x76, 0x12, 0x68, 0x0a, 0x12, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x1a, 0xbc, 0x01, 0x0a, 0x0d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x76,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x32, 0x1a,
	0x5c, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x1a, 0x93, 0x01,
	0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x73, 0x76, 0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x70, 0x0a, 0x10, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x2e, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x95, 0x01, 0x0a, 0x10,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x02, 0x22, 0x30, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x44,
	0x64, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0xb3, 0x04, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x74, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x73, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x6b, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x03, 0x63, 0x73, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x73, 0x76, 0x48, 0x00, 0x52,
	0x03, 0x63, 0x73, 0x76, 0x1a, 0x06, 0x0a, 0x04, 0x4a, 0x73, 0x6f, 0x6e, 0x1a, 0x05, 0x0a, 0x03,
	0x43, 0x73, 0x76, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x26, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0xad, 0x07, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x74, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x75, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a,
	0x03, 0x63, 0x73, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x73, 0x76, 0x48, 0x00, 0x52, 0x03, 0x63, 0x73,
	0x76, 0x1a, 0xd4, 0x01, 0x0a, 0x03, 0x43, 0x73, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12,
	0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x73, 0x76,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x1a, 0x36, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x83, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x40, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x44,
	0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x56, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13,
	0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xfd, 0x0b, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x14, 0x6d, 0x61,
	0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x09, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x15, 0x75, 0x73,
	0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x12, 0x75, 0x73, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x70,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x13, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x16, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x73, 0x33, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x07, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x33, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x08, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x75, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x11, 0x75, 0x73, 0x65, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x43, 0x0a, 0x1c, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61,
	0x67, 0x67, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0a, 0x52, 0x18, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x67, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x19, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0b, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x67, 0x67, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x4a,
	0x73, 0x6f, 0x6e, 0x61, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x18, 0x72, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0e, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72,
	0x48, 0x0f, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x10, 0x52, 0x10, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x73, 0x33, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x1f, 0x0a, 0x1d, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x67, 0x67, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x67, 0x67,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x70, 0x61,
	0x72, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73,
	0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08,
	0x06, 0x10, 0x07, 0x22, 0x2e, 0x0a, 0x11, 0x41, 0x77, 0x61, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x22, 0xa5, 0x03, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x49,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x08, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x24, 0x0a, 0x08, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x24, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0b, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x12, 0x41,
	0x77, 0x61, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x32,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x94, 0x0a, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x07,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x09, 0x6e, 0x6f,
	0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x51, 0x0a, 0x09, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x1a, 0x25, 0x0a, 0x06, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x74,
	0x1a, 0x45, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0xdb, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x73, 0x63, 0x61, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e,
	0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x14, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x1a, 0x27, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x0a,
	0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x43, 0x0a, 0x09, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x59, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x2f, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x22, 0x6a, 0x0a, 0x0c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x29, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x2a, 0x67, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x49, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x9c, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x1a,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x52, 0x43,
	0x48, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x41, 0x4d, 0x42, 0x44, 0x41, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x44, 0x45, 0x56, 0x10, 0x04, 0x2a, 0x5a, 0x0a, 0x09, 0x4d, 0x65, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x54, 0x41, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53,
	0x43, 0x59, 0x4c, 0x4c, 0x41, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x10, 0x03, 0x22,
	0x04, 0x08, 0x01, 0x10, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_dataprime_v1_query_proto_rawDescOnce sync.Once
	file_com_coralogix_dataprime_v1_query_proto_rawDescData = file_com_coralogix_dataprime_v1_query_proto_rawDesc
)

func file_com_coralogix_dataprime_v1_query_proto_rawDescGZIP() []byte {
	file_com_coralogix_dataprime_v1_query_proto_rawDescOnce.Do(func() {
		file_com_coralogix_dataprime_v1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_dataprime_v1_query_proto_rawDescData)
	})
	return file_com_coralogix_dataprime_v1_query_proto_rawDescData
}

var file_com_coralogix_dataprime_v1_query_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_com_coralogix_dataprime_v1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_com_coralogix_dataprime_v1_query_proto_goTypes = []interface{}{
	(SchedulingTier)(0),                                    // 0: com.coralogix.dataprime.v1.SchedulingTier
	(ResourceGroup)(0),                                     // 1: com.coralogix.dataprime.v1.ResourceGroup
	(Metastore)(0),                                         // 2: com.coralogix.dataprime.v1.Metastore
	(*FieldCardinality)(nil),                               // 3: com.coralogix.dataprime.v1.FieldCardinality
	(*SubmitQueryRequest)(nil),                             // 4: com.coralogix.dataprime.v1.SubmitQueryRequest
	(*SubmitDdlQueryRequest)(nil),                          // 5: com.coralogix.dataprime.v1.SubmitDdlQueryRequest
	(*DatasetLocation)(nil),                                // 6: com.coralogix.dataprime.v1.DatasetLocation
	(*ExplainQueryRequest)(nil),                            // 7: com.coralogix.dataprime.v1.ExplainQueryRequest
	(*ExplainStage)(nil),                                   // 8: com.coralogix.dataprime.v1.ExplainStage
	(*ExplainQueryResponse)(nil),                           // 9: com.coralogix.dataprime.v1.ExplainQueryResponse
	(*QuerySource)(nil),                                    // 10: com.coralogix.dataprime.v1.QuerySource
	(*NamedQuerySource)(nil),                               // 11: com.coralogix.dataprime.v1.NamedQuerySource
	(*SubmitQueryResponse)(nil),                            // 12: com.coralogix.dataprime.v1.SubmitQueryResponse
	(*SubmitDdlQueryResponse)(nil),                         // 13: com.coralogix.dataprime.v1.SubmitDdlQueryResponse
	(*GetDatasetRequest)(nil),                              // 14: com.coralogix.dataprime.v1.GetDatasetRequest
	(*GetDatasetResponse)(nil),                             // 15: com.coralogix.dataprime.v1.GetDatasetResponse
	(*GetPresignedDownloadUrlRequest)(nil),                 // 16: com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest
	(*GetPresignedDownloadUrlResponse)(nil),                // 17: com.coralogix.dataprime.v1.GetPresignedDownloadUrlResponse
	(*DropDatasetRequest)(nil),                             // 18: com.coralogix.dataprime.v1.DropDatasetRequest
	(*DropDatasetResponse)(nil),                            // 19: com.coralogix.dataprime.v1.DropDatasetResponse
	(*ExecutionConfig)(nil),                                // 20: com.coralogix.dataprime.v1.ExecutionConfig
	(*AwaitReadyRequest)(nil),                              // 21: com.coralogix.dataprime.v1.AwaitReadyRequest
	(*Failed)(nil),                                         // 22: com.coralogix.dataprime.v1.Failed
	(*AwaitReadyResponse)(nil),                             // 23: com.coralogix.dataprime.v1.AwaitReadyResponse
	(*GetQueryStatusRequest)(nil),                          // 24: com.coralogix.dataprime.v1.GetQueryStatusRequest
	(*QueryStatus)(nil),                                    // 25: com.coralogix.dataprime.v1.QueryStatus
	(*GetQueryStatusResponse)(nil),                         // 26: com.coralogix.dataprime.v1.GetQueryStatusResponse
	(*CancelQueryRequest)(nil),                             // 27: com.coralogix.dataprime.v1.CancelQueryRequest
	(*CancelQueryResponse)(nil),                            // 28: com.coralogix.dataprime.v1.CancelQueryResponse
	(*QueryPayload)(nil),                                   // 29: com.coralogix.dataprime.v1.QueryPayload
	(*SerializedDataprime)(nil),                            // 30: com.coralogix.dataprime.v1.SerializedDataprime
	(*QuerySource_ArchiveSource)(nil),                      // 31: com.coralogix.dataprime.v1.QuerySource.ArchiveSource
	(*QuerySource_OpenSearchSource)(nil),                   // 32: com.coralogix.dataprime.v1.QuerySource.OpenSearchSource
	(*QuerySource_CustomEnrichmentCsv)(nil),                // 33: com.coralogix.dataprime.v1.QuerySource.CustomEnrichmentCsv
	(*QuerySource_AsyncQuerySource)(nil),                   // 34: com.coralogix.dataprime.v1.QuerySource.AsyncQuerySource
	(*QuerySource_SchemaStoreSource)(nil),                  // 35: com.coralogix.dataprime.v1.QuerySource.SchemaStoreSource
	(*GetDatasetRequest_Json)(nil),                         // 36: com.coralogix.dataprime.v1.GetDatasetRequest.Json
	(*GetDatasetRequest_Csv)(nil),                          // 37: com.coralogix.dataprime.v1.GetDatasetRequest.Csv
	(*GetPresignedDownloadUrlRequest_Csv)(nil),             // 38: com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest.Csv
	(*GetPresignedDownloadUrlRequest_StagingLocation)(nil), // 39: com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest.StagingLocation
	(*GetPresignedDownloadUrlRequest_Csv_Column)(nil),      // 40: com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest.Csv.Column
	(*Failed_Internal)(nil),                                // 41: com.coralogix.dataprime.v1.Failed.Internal
	(*Failed_External)(nil),                                // 42: com.coralogix.dataprime.v1.Failed.External
	(*Failed_Cancelled)(nil),                               // 43: com.coralogix.dataprime.v1.Failed.Cancelled
	(*QueryStatus_Queued)(nil),                             // 44: com.coralogix.dataprime.v1.QueryStatus.Queued
	(*QueryStatus_Running)(nil),                            // 45: com.coralogix.dataprime.v1.QueryStatus.Running
	(*QueryStatus_Completed)(nil),                          // 46: com.coralogix.dataprime.v1.QueryStatus.Completed
	(*QueryStatus_Planning)(nil),                           // 47: com.coralogix.dataprime.v1.QueryStatus.Planning
	(*QueryStatus_NotFound)(nil),                           // 48: com.coralogix.dataprime.v1.QueryStatus.NotFound
	(*QueryStatus_Cancelled)(nil),                          // 49: com.coralogix.dataprime.v1.QueryStatus.Cancelled
	(*UntypedKeypath)(nil),                                 // 50: com.coralogix.dataprime.v1.UntypedKeypath
	(*v1.Ast)(nil),                                         // 51: com.coralogix.dataprime.ast.v1.Ast
	(*wrapperspb.StringValue)(nil),                         // 52: google.protobuf.StringValue
	(*v1.DdlAst)(nil),                                      // 53: com.coralogix.dataprime.ast.v1.DdlAst
	(*v1.Source)(nil),                                      // 54: com.coralogix.dataprime.ast.v1.Source
	(*ObjectStoreWarning)(nil),                             // 55: com.coralogix.dataprime.v1.ObjectStoreWarning
}
var file_com_coralogix_dataprime_v1_query_proto_depIdxs = []int32{
	50, // 0: com.coralogix.dataprime.v1.FieldCardinality.keypath:type_name -> com.coralogix.dataprime.v1.UntypedKeypath
	51, // 1: com.coralogix.dataprime.v1.SubmitQueryRequest.query_ast:type_name -> com.coralogix.dataprime.ast.v1.Ast
	20, // 2: com.coralogix.dataprime.v1.SubmitQueryRequest.execution_config:type_name -> com.coralogix.dataprime.v1.ExecutionConfig
	52, // 3: com.coralogix.dataprime.v1.SubmitQueryRequest.query_id:type_name -> google.protobuf.StringValue
	11, // 4: com.coralogix.dataprime.v1.SubmitQueryRequest.named_query_sources:type_name -> com.coralogix.dataprime.v1.NamedQuerySource
	3,  // 5: com.coralogix.dataprime.v1.SubmitQueryRequest.keypath_cardinalities:type_name -> com.coralogix.dataprime.v1.FieldCardinality
	53, // 6: com.coralogix.dataprime.v1.SubmitDdlQueryRequest.ddl_ast:type_name -> com.coralogix.dataprime.ast.v1.DdlAst
	20, // 7: com.coralogix.dataprime.v1.SubmitDdlQueryRequest.execution_config:type_name -> com.coralogix.dataprime.v1.ExecutionConfig
	52, // 8: com.coralogix.dataprime.v1.SubmitDdlQueryRequest.query_id:type_name -> google.protobuf.StringValue
	6,  // 9: com.coralogix.dataprime.v1.SubmitDdlQueryRequest.dataset_location:type_name -> com.coralogix.dataprime.v1.DatasetLocation
	11, // 10: com.coralogix.dataprime.v1.SubmitDdlQueryRequest.named_query_sources:type_name -> com.coralogix.dataprime.v1.NamedQuerySource
	3,  // 11: com.coralogix.dataprime.v1.SubmitDdlQueryRequest.keypath_cardinalities:type_name -> com.coralogix.dataprime.v1.FieldCardinality
	51, // 12: com.coralogix.dataprime.v1.ExplainQueryRequest.query_ast:type_name -> com.coralogix.dataprime.ast.v1.Ast
	20, // 13: com.coralogix.dataprime.v1.ExplainQueryRequest.execution_config:type_name -> com.coralogix.dataprime.v1.ExecutionConfig
	52, // 14: com.coralogix.dataprime.v1.ExplainQueryRequest.query_id:type_name -> google.protobuf.StringValue
	11, // 15: com.coralogix.dataprime.v1.ExplainQueryRequest.named_query_sources:type_name -> com.coralogix.dataprime.v1.NamedQuerySource
	3,  // 16: com.coralogix.dataprime.v1.ExplainQueryRequest.keypath_cardinalities:type_name -> com.coralogix.dataprime.v1.FieldCardinality
	8,  // 17: com.coralogix.dataprime.v1.ExplainQueryResponse.stages:type_name -> com.coralogix.dataprime.v1.ExplainStage
	31, // 18: com.coralogix.dataprime.v1.QuerySource.archive_source:type_name -> com.coralogix.dataprime.v1.QuerySource.ArchiveSource
	32, // 19: com.coralogix.dataprime.v1.QuerySource.open_search_source:type_name -> com.coralogix.dataprime.v1.QuerySource.OpenSearchSource
	33, // 20: com.coralogix.dataprime.v1.QuerySource.custom_enrichment_csv:type_name -> com.coralogix.dataprime.v1.QuerySource.CustomEnrichmentCsv
	34, // 21: com.coralogix.dataprime.v1.QuerySource.async_query_source:type_name -> com.coralogix.dataprime.v1.QuerySource.AsyncQuerySource
	35, // 22: com.coralogix.dataprime.v1.QuerySource.schema_store_source:type_name -> com.coralogix.dataprime.v1.QuerySource.SchemaStoreSource
	54, // 23: com.coralogix.dataprime.v1.NamedQuerySource.name:type_name -> com.coralogix.dataprime.ast.v1.Source
	10, // 24: com.coralogix.dataprime.v1.NamedQuerySource.source:type_name -> com.coralogix.dataprime.v1.QuerySource
	51, // 25: com.coralogix.dataprime.v1.GetDatasetRequest.query_ast:type_name -> com.coralogix.dataprime.ast.v1.Ast
	20, // 26: com.coralogix.dataprime.v1.GetDatasetRequest.execution_config:type_name -> com.coralogix.dataprime.v1.ExecutionConfig
	52, // 27: com.coralogix.dataprime.v1.GetDatasetRequest.query_id:type_name -> google.protobuf.StringValue
	11, // 28: com.coralogix.dataprime.v1.GetDatasetRequest.named_query_source:type_name -> com.coralogix.dataprime.v1.NamedQuerySource
	36, // 29: com.coralogix.dataprime.v1.GetDatasetRequest.json:type_name -> com.coralogix.dataprime.v1.GetDatasetRequest.Json
	37, // 30: com.coralogix.dataprime.v1.GetDatasetRequest.csv:type_name -> com.coralogix.dataprime.v1.GetDatasetRequest.Csv
	51, // 31: com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest.query_ast:type_name -> com.coralogix.dataprime.ast.v1.Ast
	52, // 32: com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest.query_id:type_name -> google.protobuf.StringValue
	11, // 33: com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest.named_query_source:type_name -> com.coralogix.dataprime.v1.NamedQuerySource
	39, // 34: com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest.staging_location:type_name -> com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest.StagingLocation
	20, // 35: com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest.execution_config:type_name -> com.coralogix.dataprime.v1.ExecutionConfig
	38, // 36: com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest.csv:type_name -> com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest.Csv
	6,  // 37: com.coralogix.dataprime.v1.DropDatasetRequest.dataset_location:type_name -> com.coralogix.dataprime.v1.DatasetLocation
	2,  // 38: com.coralogix.dataprime.v1.ExecutionConfig.metastore:type_name -> com.coralogix.dataprime.v1.Metastore
	0,  // 39: com.coralogix.dataprime.v1.ExecutionConfig.scheduling_tier:type_name -> com.coralogix.dataprime.v1.SchedulingTier
	1,  // 40: com.coralogix.dataprime.v1.ExecutionConfig.resource_group:type_name -> com.coralogix.dataprime.v1.ResourceGroup
	41, // 41: com.coralogix.dataprime.v1.Failed.internal:type_name -> com.coralogix.dataprime.v1.Failed.Internal
	42, // 42: com.coralogix.dataprime.v1.Failed.external:type_name -> com.coralogix.dataprime.v1.Failed.External
	43, // 43: com.coralogix.dataprime.v1.Failed.cancelled:type_name -> com.coralogix.dataprime.v1.Failed.Cancelled
	25, // 44: com.coralogix.dataprime.v1.AwaitReadyResponse.status:type_name -> com.coralogix.dataprime.v1.QueryStatus
	44, // 45: com.coralogix.dataprime.v1.QueryStatus.queued:type_name -> com.coralogix.dataprime.v1.QueryStatus.Queued
	45, // 46: com.coralogix.dataprime.v1.QueryStatus.running:type_name -> com.coralogix.dataprime.v1.QueryStatus.Running
	22, // 47: com.coralogix.dataprime.v1.QueryStatus.failed:type_name -> com.coralogix.dataprime.v1.Failed
	46, // 48: com.coralogix.dataprime.v1.QueryStatus.completed:type_name -> com.coralogix.dataprime.v1.QueryStatus.Completed
	47, // 49: com.coralogix.dataprime.v1.QueryStatus.planning:type_name -> com.coralogix.dataprime.v1.QueryStatus.Planning
	48, // 50: com.coralogix.dataprime.v1.QueryStatus.not_found:type_name -> com.coralogix.dataprime.v1.QueryStatus.NotFound
	49, // 51: com.coralogix.dataprime.v1.QueryStatus.cancelled:type_name -> com.coralogix.dataprime.v1.QueryStatus.Cancelled
	25, // 52: com.coralogix.dataprime.v1.GetQueryStatusResponse.status:type_name -> com.coralogix.dataprime.v1.QueryStatus
	30, // 53: com.coralogix.dataprime.v1.QueryPayload.dataprime:type_name -> com.coralogix.dataprime.v1.SerializedDataprime
	52, // 54: com.coralogix.dataprime.v1.QuerySource.ArchiveSource.bucket_v2:type_name -> google.protobuf.StringValue
	52, // 55: com.coralogix.dataprime.v1.QuerySource.CustomEnrichmentCsv.bucket_name:type_name -> google.protobuf.StringValue
	52, // 56: com.coralogix.dataprime.v1.QuerySource.CustomEnrichmentCsv.region_name:type_name -> google.protobuf.StringValue
	31, // 57: com.coralogix.dataprime.v1.QuerySource.AsyncQuerySource.archive_source:type_name -> com.coralogix.dataprime.v1.QuerySource.ArchiveSource
	40, // 58: com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest.Csv.columns:type_name -> com.coralogix.dataprime.v1.GetPresignedDownloadUrlRequest.Csv.Column
	55, // 59: com.coralogix.dataprime.v1.QueryStatus.Completed.object_store_warning:type_name -> com.coralogix.dataprime.v1.ObjectStoreWarning
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_com_coralogix_dataprime_v1_query_proto_init() }
func file_com_coralogix_dataprime_v1_query_proto_init() {
	if File_com_coralogix_dataprime_v1_query_proto != nil {
		return
	}
	file_com_coralogix_dataprime_v1_object_store_warning_proto_init()
	file_com_coralogix_dataprime_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldCardinality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitDdlQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedQuerySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitDdlQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPresignedDownloadUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPresignedDownloadUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwaitReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwaitReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerializedDataprime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySource_ArchiveSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySource_OpenSearchSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySource_CustomEnrichmentCsv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySource_AsyncQuerySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySource_SchemaStoreSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetRequest_Json); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetRequest_Csv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPresignedDownloadUrlRequest_Csv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPresignedDownloadUrlRequest_StagingLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPresignedDownloadUrlRequest_Csv_Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failed_Internal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failed_External); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failed_Cancelled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStatus_Queued); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStatus_Running); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStatus_Completed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStatus_Planning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStatus_NotFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_v1_query_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStatus_Cancelled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogix_dataprime_v1_query_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*QuerySource_ArchiveSource_)(nil),
		(*QuerySource_OpenSearchSource_)(nil),
		(*QuerySource_CustomEnrichmentCsv_)(nil),
		(*QuerySource_AsyncQuerySource_)(nil),
		(*QuerySource_SchemaStoreSource_)(nil),
	}
	file_com_coralogix_dataprime_v1_query_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*GetDatasetRequest_Json_)(nil),
		(*GetDatasetRequest_Csv_)(nil),
	}
	file_com_coralogix_dataprime_v1_query_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*GetPresignedDownloadUrlRequest_Csv_)(nil),
	}
	file_com_coralogix_dataprime_v1_query_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_com_coralogix_dataprime_v1_query_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_com_coralogix_dataprime_v1_query_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Failed_Internal_)(nil),
		(*Failed_External_)(nil),
		(*Failed_Cancelled_)(nil),
	}
	file_com_coralogix_dataprime_v1_query_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*QueryStatus_Queued_)(nil),
		(*QueryStatus_Running_)(nil),
		(*QueryStatus_Failed)(nil),
		(*QueryStatus_Completed_)(nil),
		(*QueryStatus_Planning_)(nil),
		(*QueryStatus_NotFound_)(nil),
		(*QueryStatus_Cancelled_)(nil),
	}
	file_com_coralogix_dataprime_v1_query_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*QueryPayload_Dataprime)(nil),
	}
	file_com_coralogix_dataprime_v1_query_proto_msgTypes[29].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_dataprime_v1_query_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_dataprime_v1_query_proto_goTypes,
		DependencyIndexes: file_com_coralogix_dataprime_v1_query_proto_depIdxs,
		EnumInfos:         file_com_coralogix_dataprime_v1_query_proto_enumTypes,
		MessageInfos:      file_com_coralogix_dataprime_v1_query_proto_msgTypes,
	}.Build()
	File_com_coralogix_dataprime_v1_query_proto = out.File
	file_com_coralogix_dataprime_v1_query_proto_rawDesc = nil
	file_com_coralogix_dataprime_v1_query_proto_goTypes = nil
	file_com_coralogix_dataprime_v1_query_proto_depIdxs = nil
}
