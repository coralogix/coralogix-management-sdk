// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: com/coralogix/dataprime/v1/query_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataprimeService_SubmitQuery_FullMethodName             = "/com.coralogix.dataprime.v1.DataprimeService/SubmitQuery"
	DataprimeService_SubmitDdlQuery_FullMethodName          = "/com.coralogix.dataprime.v1.DataprimeService/SubmitDdlQuery"
	DataprimeService_ExplainQuery_FullMethodName            = "/com.coralogix.dataprime.v1.DataprimeService/ExplainQuery"
	DataprimeService_AwaitReady_FullMethodName              = "/com.coralogix.dataprime.v1.DataprimeService/AwaitReady"
	DataprimeService_GetMetrics_FullMethodName              = "/com.coralogix.dataprime.v1.DataprimeService/GetMetrics"
	DataprimeService_GetQueryResults_FullMethodName         = "/com.coralogix.dataprime.v1.DataprimeService/GetQueryResults"
	DataprimeService_GetDataset_FullMethodName              = "/com.coralogix.dataprime.v1.DataprimeService/GetDataset"
	DataprimeService_GetPresignedDownloadUrl_FullMethodName = "/com.coralogix.dataprime.v1.DataprimeService/GetPresignedDownloadUrl"
	DataprimeService_DropDataset_FullMethodName             = "/com.coralogix.dataprime.v1.DataprimeService/DropDataset"
	DataprimeService_GetQueryStatus_FullMethodName          = "/com.coralogix.dataprime.v1.DataprimeService/GetQueryStatus"
	DataprimeService_CancelQuery_FullMethodName             = "/com.coralogix.dataprime.v1.DataprimeService/CancelQuery"
	DataprimeService_ListQuery_FullMethodName               = "/com.coralogix.dataprime.v1.DataprimeService/ListQuery"
)

// DataprimeServiceClient is the client API for DataprimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataprimeServiceClient interface {
	SubmitQuery(ctx context.Context, in *SubmitQueryRequest, opts ...grpc.CallOption) (*SubmitQueryResponse, error)
	SubmitDdlQuery(ctx context.Context, in *SubmitDdlQueryRequest, opts ...grpc.CallOption) (*SubmitDdlQueryResponse, error)
	ExplainQuery(ctx context.Context, in *ExplainQueryRequest, opts ...grpc.CallOption) (*ExplainQueryResponse, error)
	AwaitReady(ctx context.Context, in *AwaitReadyRequest, opts ...grpc.CallOption) (*AwaitReadyResponse, error)
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	GetQueryResults(ctx context.Context, in *GetQueryResultsRequest, opts ...grpc.CallOption) (DataprimeService_GetQueryResultsClient, error)
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (DataprimeService_GetDatasetClient, error)
	GetPresignedDownloadUrl(ctx context.Context, in *GetPresignedDownloadUrlRequest, opts ...grpc.CallOption) (*GetPresignedDownloadUrlResponse, error)
	DropDataset(ctx context.Context, in *DropDatasetRequest, opts ...grpc.CallOption) (*DropDatasetResponse, error)
	GetQueryStatus(ctx context.Context, in *GetQueryStatusRequest, opts ...grpc.CallOption) (*GetQueryStatusResponse, error)
	CancelQuery(ctx context.Context, in *CancelQueryRequest, opts ...grpc.CallOption) (*CancelQueryResponse, error)
	ListQuery(ctx context.Context, in *ListQueryRequest, opts ...grpc.CallOption) (*ListQueryResponse, error)
}

type dataprimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataprimeServiceClient(cc grpc.ClientConnInterface) DataprimeServiceClient {
	return &dataprimeServiceClient{cc}
}

func (c *dataprimeServiceClient) SubmitQuery(ctx context.Context, in *SubmitQueryRequest, opts ...grpc.CallOption) (*SubmitQueryResponse, error) {
	out := new(SubmitQueryResponse)
	err := c.cc.Invoke(ctx, DataprimeService_SubmitQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataprimeServiceClient) SubmitDdlQuery(ctx context.Context, in *SubmitDdlQueryRequest, opts ...grpc.CallOption) (*SubmitDdlQueryResponse, error) {
	out := new(SubmitDdlQueryResponse)
	err := c.cc.Invoke(ctx, DataprimeService_SubmitDdlQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataprimeServiceClient) ExplainQuery(ctx context.Context, in *ExplainQueryRequest, opts ...grpc.CallOption) (*ExplainQueryResponse, error) {
	out := new(ExplainQueryResponse)
	err := c.cc.Invoke(ctx, DataprimeService_ExplainQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataprimeServiceClient) AwaitReady(ctx context.Context, in *AwaitReadyRequest, opts ...grpc.CallOption) (*AwaitReadyResponse, error) {
	out := new(AwaitReadyResponse)
	err := c.cc.Invoke(ctx, DataprimeService_AwaitReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataprimeServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, DataprimeService_GetMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataprimeServiceClient) GetQueryResults(ctx context.Context, in *GetQueryResultsRequest, opts ...grpc.CallOption) (DataprimeService_GetQueryResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataprimeService_ServiceDesc.Streams[0], DataprimeService_GetQueryResults_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dataprimeServiceGetQueryResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataprimeService_GetQueryResultsClient interface {
	Recv() (*GetQueryResultsResponse, error)
	grpc.ClientStream
}

type dataprimeServiceGetQueryResultsClient struct {
	grpc.ClientStream
}

func (x *dataprimeServiceGetQueryResultsClient) Recv() (*GetQueryResultsResponse, error) {
	m := new(GetQueryResultsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataprimeServiceClient) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (DataprimeService_GetDatasetClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataprimeService_ServiceDesc.Streams[1], DataprimeService_GetDataset_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dataprimeServiceGetDatasetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataprimeService_GetDatasetClient interface {
	Recv() (*GetDatasetResponse, error)
	grpc.ClientStream
}

type dataprimeServiceGetDatasetClient struct {
	grpc.ClientStream
}

func (x *dataprimeServiceGetDatasetClient) Recv() (*GetDatasetResponse, error) {
	m := new(GetDatasetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataprimeServiceClient) GetPresignedDownloadUrl(ctx context.Context, in *GetPresignedDownloadUrlRequest, opts ...grpc.CallOption) (*GetPresignedDownloadUrlResponse, error) {
	out := new(GetPresignedDownloadUrlResponse)
	err := c.cc.Invoke(ctx, DataprimeService_GetPresignedDownloadUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataprimeServiceClient) DropDataset(ctx context.Context, in *DropDatasetRequest, opts ...grpc.CallOption) (*DropDatasetResponse, error) {
	out := new(DropDatasetResponse)
	err := c.cc.Invoke(ctx, DataprimeService_DropDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataprimeServiceClient) GetQueryStatus(ctx context.Context, in *GetQueryStatusRequest, opts ...grpc.CallOption) (*GetQueryStatusResponse, error) {
	out := new(GetQueryStatusResponse)
	err := c.cc.Invoke(ctx, DataprimeService_GetQueryStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataprimeServiceClient) CancelQuery(ctx context.Context, in *CancelQueryRequest, opts ...grpc.CallOption) (*CancelQueryResponse, error) {
	out := new(CancelQueryResponse)
	err := c.cc.Invoke(ctx, DataprimeService_CancelQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataprimeServiceClient) ListQuery(ctx context.Context, in *ListQueryRequest, opts ...grpc.CallOption) (*ListQueryResponse, error) {
	out := new(ListQueryResponse)
	err := c.cc.Invoke(ctx, DataprimeService_ListQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataprimeServiceServer is the server API for DataprimeService service.
// All implementations must embed UnimplementedDataprimeServiceServer
// for forward compatibility
type DataprimeServiceServer interface {
	SubmitQuery(context.Context, *SubmitQueryRequest) (*SubmitQueryResponse, error)
	SubmitDdlQuery(context.Context, *SubmitDdlQueryRequest) (*SubmitDdlQueryResponse, error)
	ExplainQuery(context.Context, *ExplainQueryRequest) (*ExplainQueryResponse, error)
	AwaitReady(context.Context, *AwaitReadyRequest) (*AwaitReadyResponse, error)
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	GetQueryResults(*GetQueryResultsRequest, DataprimeService_GetQueryResultsServer) error
	GetDataset(*GetDatasetRequest, DataprimeService_GetDatasetServer) error
	GetPresignedDownloadUrl(context.Context, *GetPresignedDownloadUrlRequest) (*GetPresignedDownloadUrlResponse, error)
	DropDataset(context.Context, *DropDatasetRequest) (*DropDatasetResponse, error)
	GetQueryStatus(context.Context, *GetQueryStatusRequest) (*GetQueryStatusResponse, error)
	CancelQuery(context.Context, *CancelQueryRequest) (*CancelQueryResponse, error)
	ListQuery(context.Context, *ListQueryRequest) (*ListQueryResponse, error)
	mustEmbedUnimplementedDataprimeServiceServer()
}

// UnimplementedDataprimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataprimeServiceServer struct {
}

func (UnimplementedDataprimeServiceServer) SubmitQuery(context.Context, *SubmitQueryRequest) (*SubmitQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitQuery not implemented")
}
func (UnimplementedDataprimeServiceServer) SubmitDdlQuery(context.Context, *SubmitDdlQueryRequest) (*SubmitDdlQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDdlQuery not implemented")
}
func (UnimplementedDataprimeServiceServer) ExplainQuery(context.Context, *ExplainQueryRequest) (*ExplainQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExplainQuery not implemented")
}
func (UnimplementedDataprimeServiceServer) AwaitReady(context.Context, *AwaitReadyRequest) (*AwaitReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AwaitReady not implemented")
}
func (UnimplementedDataprimeServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedDataprimeServiceServer) GetQueryResults(*GetQueryResultsRequest, DataprimeService_GetQueryResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQueryResults not implemented")
}
func (UnimplementedDataprimeServiceServer) GetDataset(*GetDatasetRequest, DataprimeService_GetDatasetServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedDataprimeServiceServer) GetPresignedDownloadUrl(context.Context, *GetPresignedDownloadUrlRequest) (*GetPresignedDownloadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresignedDownloadUrl not implemented")
}
func (UnimplementedDataprimeServiceServer) DropDataset(context.Context, *DropDatasetRequest) (*DropDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropDataset not implemented")
}
func (UnimplementedDataprimeServiceServer) GetQueryStatus(context.Context, *GetQueryStatusRequest) (*GetQueryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryStatus not implemented")
}
func (UnimplementedDataprimeServiceServer) CancelQuery(context.Context, *CancelQueryRequest) (*CancelQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelQuery not implemented")
}
func (UnimplementedDataprimeServiceServer) ListQuery(context.Context, *ListQueryRequest) (*ListQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuery not implemented")
}
func (UnimplementedDataprimeServiceServer) mustEmbedUnimplementedDataprimeServiceServer() {}

// UnsafeDataprimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataprimeServiceServer will
// result in compilation errors.
type UnsafeDataprimeServiceServer interface {
	mustEmbedUnimplementedDataprimeServiceServer()
}

func RegisterDataprimeServiceServer(s grpc.ServiceRegistrar, srv DataprimeServiceServer) {
	s.RegisterService(&DataprimeService_ServiceDesc, srv)
}

func _DataprimeService_SubmitQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataprimeServiceServer).SubmitQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataprimeService_SubmitQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataprimeServiceServer).SubmitQuery(ctx, req.(*SubmitQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataprimeService_SubmitDdlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitDdlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataprimeServiceServer).SubmitDdlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataprimeService_SubmitDdlQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataprimeServiceServer).SubmitDdlQuery(ctx, req.(*SubmitDdlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataprimeService_ExplainQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplainQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataprimeServiceServer).ExplainQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataprimeService_ExplainQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataprimeServiceServer).ExplainQuery(ctx, req.(*ExplainQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataprimeService_AwaitReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwaitReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataprimeServiceServer).AwaitReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataprimeService_AwaitReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataprimeServiceServer).AwaitReady(ctx, req.(*AwaitReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataprimeService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataprimeServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataprimeService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataprimeServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataprimeService_GetQueryResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetQueryResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataprimeServiceServer).GetQueryResults(m, &dataprimeServiceGetQueryResultsServer{stream})
}

type DataprimeService_GetQueryResultsServer interface {
	Send(*GetQueryResultsResponse) error
	grpc.ServerStream
}

type dataprimeServiceGetQueryResultsServer struct {
	grpc.ServerStream
}

func (x *dataprimeServiceGetQueryResultsServer) Send(m *GetQueryResultsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataprimeService_GetDataset_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDatasetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataprimeServiceServer).GetDataset(m, &dataprimeServiceGetDatasetServer{stream})
}

type DataprimeService_GetDatasetServer interface {
	Send(*GetDatasetResponse) error
	grpc.ServerStream
}

type dataprimeServiceGetDatasetServer struct {
	grpc.ServerStream
}

func (x *dataprimeServiceGetDatasetServer) Send(m *GetDatasetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataprimeService_GetPresignedDownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPresignedDownloadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataprimeServiceServer).GetPresignedDownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataprimeService_GetPresignedDownloadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataprimeServiceServer).GetPresignedDownloadUrl(ctx, req.(*GetPresignedDownloadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataprimeService_DropDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataprimeServiceServer).DropDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataprimeService_DropDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataprimeServiceServer).DropDataset(ctx, req.(*DropDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataprimeService_GetQueryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataprimeServiceServer).GetQueryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataprimeService_GetQueryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataprimeServiceServer).GetQueryStatus(ctx, req.(*GetQueryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataprimeService_CancelQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataprimeServiceServer).CancelQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataprimeService_CancelQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataprimeServiceServer).CancelQuery(ctx, req.(*CancelQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataprimeService_ListQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataprimeServiceServer).ListQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataprimeService_ListQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataprimeServiceServer).ListQuery(ctx, req.(*ListQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataprimeService_ServiceDesc is the grpc.ServiceDesc for DataprimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataprimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.dataprime.v1.DataprimeService",
	HandlerType: (*DataprimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitQuery",
			Handler:    _DataprimeService_SubmitQuery_Handler,
		},
		{
			MethodName: "SubmitDdlQuery",
			Handler:    _DataprimeService_SubmitDdlQuery_Handler,
		},
		{
			MethodName: "ExplainQuery",
			Handler:    _DataprimeService_ExplainQuery_Handler,
		},
		{
			MethodName: "AwaitReady",
			Handler:    _DataprimeService_AwaitReady_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _DataprimeService_GetMetrics_Handler,
		},
		{
			MethodName: "GetPresignedDownloadUrl",
			Handler:    _DataprimeService_GetPresignedDownloadUrl_Handler,
		},
		{
			MethodName: "DropDataset",
			Handler:    _DataprimeService_DropDataset_Handler,
		},
		{
			MethodName: "GetQueryStatus",
			Handler:    _DataprimeService_GetQueryStatus_Handler,
		},
		{
			MethodName: "CancelQuery",
			Handler:    _DataprimeService_CancelQuery_Handler,
		},
		{
			MethodName: "ListQuery",
			Handler:    _DataprimeService_ListQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetQueryResults",
			Handler:       _DataprimeService_GetQueryResults_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDataset",
			Handler:       _DataprimeService_GetDataset_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/coralogix/dataprime/v1/query_service.proto",
}
