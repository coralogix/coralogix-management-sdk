// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.3
// source: com/coralogix/dataprime/background_queries/v1/background_query_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BackgroundQueryService_RunQuery_FullMethodName       = "/com.coralogix.dataprime.background_queries.v1.BackgroundQueryService/RunQuery"
	BackgroundQueryService_ListQueries_FullMethodName    = "/com.coralogix.dataprime.background_queries.v1.BackgroundQueryService/ListQueries"
	BackgroundQueryService_ListQueryNames_FullMethodName = "/com.coralogix.dataprime.background_queries.v1.BackgroundQueryService/ListQueryNames"
	BackgroundQueryService_GetQuery_FullMethodName       = "/com.coralogix.dataprime.background_queries.v1.BackgroundQueryService/GetQuery"
	BackgroundQueryService_QueryResult_FullMethodName    = "/com.coralogix.dataprime.background_queries.v1.BackgroundQueryService/QueryResult"
)

// BackgroundQueryServiceClient is the client API for BackgroundQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackgroundQueryServiceClient interface {
	RunQuery(ctx context.Context, in *RunQueryRequest, opts ...grpc.CallOption) (*RunQueryResponse, error)
	ListQueries(ctx context.Context, in *ListQueriesRequest, opts ...grpc.CallOption) (*ListQueriesResponse, error)
	ListQueryNames(ctx context.Context, in *ListQueryNamesRequest, opts ...grpc.CallOption) (*ListQueryNamesResponse, error)
	GetQuery(ctx context.Context, in *GetQueryRequest, opts ...grpc.CallOption) (*GetQueryResponse, error)
	QueryResult(ctx context.Context, in *QueryResultRequest, opts ...grpc.CallOption) (BackgroundQueryService_QueryResultClient, error)
}

type backgroundQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackgroundQueryServiceClient(cc grpc.ClientConnInterface) BackgroundQueryServiceClient {
	return &backgroundQueryServiceClient{cc}
}

func (c *backgroundQueryServiceClient) RunQuery(ctx context.Context, in *RunQueryRequest, opts ...grpc.CallOption) (*RunQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunQueryResponse)
	err := c.cc.Invoke(ctx, BackgroundQueryService_RunQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundQueryServiceClient) ListQueries(ctx context.Context, in *ListQueriesRequest, opts ...grpc.CallOption) (*ListQueriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQueriesResponse)
	err := c.cc.Invoke(ctx, BackgroundQueryService_ListQueries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundQueryServiceClient) ListQueryNames(ctx context.Context, in *ListQueryNamesRequest, opts ...grpc.CallOption) (*ListQueryNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQueryNamesResponse)
	err := c.cc.Invoke(ctx, BackgroundQueryService_ListQueryNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundQueryServiceClient) GetQuery(ctx context.Context, in *GetQueryRequest, opts ...grpc.CallOption) (*GetQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueryResponse)
	err := c.cc.Invoke(ctx, BackgroundQueryService_GetQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backgroundQueryServiceClient) QueryResult(ctx context.Context, in *QueryResultRequest, opts ...grpc.CallOption) (BackgroundQueryService_QueryResultClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BackgroundQueryService_ServiceDesc.Streams[0], BackgroundQueryService_QueryResult_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &backgroundQueryServiceQueryResultClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BackgroundQueryService_QueryResultClient interface {
	Recv() (*QueryResultResponse, error)
	grpc.ClientStream
}

type backgroundQueryServiceQueryResultClient struct {
	grpc.ClientStream
}

func (x *backgroundQueryServiceQueryResultClient) Recv() (*QueryResultResponse, error) {
	m := new(QueryResultResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackgroundQueryServiceServer is the server API for BackgroundQueryService service.
// All implementations must embed UnimplementedBackgroundQueryServiceServer
// for forward compatibility
type BackgroundQueryServiceServer interface {
	RunQuery(context.Context, *RunQueryRequest) (*RunQueryResponse, error)
	ListQueries(context.Context, *ListQueriesRequest) (*ListQueriesResponse, error)
	ListQueryNames(context.Context, *ListQueryNamesRequest) (*ListQueryNamesResponse, error)
	GetQuery(context.Context, *GetQueryRequest) (*GetQueryResponse, error)
	QueryResult(*QueryResultRequest, BackgroundQueryService_QueryResultServer) error
	mustEmbedUnimplementedBackgroundQueryServiceServer()
}

// UnimplementedBackgroundQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackgroundQueryServiceServer struct {
}

func (UnimplementedBackgroundQueryServiceServer) RunQuery(context.Context, *RunQueryRequest) (*RunQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunQuery not implemented")
}
func (UnimplementedBackgroundQueryServiceServer) ListQueries(context.Context, *ListQueriesRequest) (*ListQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueries not implemented")
}
func (UnimplementedBackgroundQueryServiceServer) ListQueryNames(context.Context, *ListQueryNamesRequest) (*ListQueryNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueryNames not implemented")
}
func (UnimplementedBackgroundQueryServiceServer) GetQuery(context.Context, *GetQueryRequest) (*GetQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuery not implemented")
}
func (UnimplementedBackgroundQueryServiceServer) QueryResult(*QueryResultRequest, BackgroundQueryService_QueryResultServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryResult not implemented")
}
func (UnimplementedBackgroundQueryServiceServer) mustEmbedUnimplementedBackgroundQueryServiceServer() {
}

// UnsafeBackgroundQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackgroundQueryServiceServer will
// result in compilation errors.
type UnsafeBackgroundQueryServiceServer interface {
	mustEmbedUnimplementedBackgroundQueryServiceServer()
}

func RegisterBackgroundQueryServiceServer(s grpc.ServiceRegistrar, srv BackgroundQueryServiceServer) {
	s.RegisterService(&BackgroundQueryService_ServiceDesc, srv)
}

func _BackgroundQueryService_RunQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundQueryServiceServer).RunQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundQueryService_RunQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundQueryServiceServer).RunQuery(ctx, req.(*RunQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundQueryService_ListQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundQueryServiceServer).ListQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundQueryService_ListQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundQueryServiceServer).ListQueries(ctx, req.(*ListQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundQueryService_ListQueryNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueryNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundQueryServiceServer).ListQueryNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundQueryService_ListQueryNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundQueryServiceServer).ListQueryNames(ctx, req.(*ListQueryNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundQueryService_GetQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundQueryServiceServer).GetQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundQueryService_GetQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundQueryServiceServer).GetQuery(ctx, req.(*GetQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackgroundQueryService_QueryResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryResultRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackgroundQueryServiceServer).QueryResult(m, &backgroundQueryServiceQueryResultServer{ServerStream: stream})
}

type BackgroundQueryService_QueryResultServer interface {
	Send(*QueryResultResponse) error
	grpc.ServerStream
}

type backgroundQueryServiceQueryResultServer struct {
	grpc.ServerStream
}

func (x *backgroundQueryServiceQueryResultServer) Send(m *QueryResultResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BackgroundQueryService_ServiceDesc is the grpc.ServiceDesc for BackgroundQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackgroundQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.dataprime.background_queries.v1.BackgroundQueryService",
	HandlerType: (*BackgroundQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunQuery",
			Handler:    _BackgroundQueryService_RunQuery_Handler,
		},
		{
			MethodName: "ListQueries",
			Handler:    _BackgroundQueryService_ListQueries_Handler,
		},
		{
			MethodName: "ListQueryNames",
			Handler:    _BackgroundQueryService_ListQueryNames_Handler,
		},
		{
			MethodName: "GetQuery",
			Handler:    _BackgroundQueryService_GetQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryResult",
			Handler:       _BackgroundQueryService_QueryResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/coralogix/dataprime/background_queries/v1/background_query_service.proto",
}
