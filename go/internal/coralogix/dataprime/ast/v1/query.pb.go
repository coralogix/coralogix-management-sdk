// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.0
// source: com/coralogix/dataprime/ast/v1/query.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operator_OrderBy_OrderByExpression_Order int32

const (
	Operator_OrderBy_OrderByExpression_ORDER_UNSPECIFIED Operator_OrderBy_OrderByExpression_Order = 0
	Operator_OrderBy_OrderByExpression_ORDER_ASCENDING   Operator_OrderBy_OrderByExpression_Order = 1
	Operator_OrderBy_OrderByExpression_ORDER_DESCENDING  Operator_OrderBy_OrderByExpression_Order = 2
)

// Enum value maps for Operator_OrderBy_OrderByExpression_Order.
var (
	Operator_OrderBy_OrderByExpression_Order_name = map[int32]string{
		0: "ORDER_UNSPECIFIED",
		1: "ORDER_ASCENDING",
		2: "ORDER_DESCENDING",
	}
	Operator_OrderBy_OrderByExpression_Order_value = map[string]int32{
		"ORDER_UNSPECIFIED": 0,
		"ORDER_ASCENDING":   1,
		"ORDER_DESCENDING":  2,
	}
)

func (x Operator_OrderBy_OrderByExpression_Order) Enum() *Operator_OrderBy_OrderByExpression_Order {
	p := new(Operator_OrderBy_OrderByExpression_Order)
	*p = x
	return p
}

func (x Operator_OrderBy_OrderByExpression_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator_OrderBy_OrderByExpression_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_ast_v1_query_proto_enumTypes[0].Descriptor()
}

func (Operator_OrderBy_OrderByExpression_Order) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_ast_v1_query_proto_enumTypes[0]
}

func (x Operator_OrderBy_OrderByExpression_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator_OrderBy_OrderByExpression_Order.Descriptor instead.
func (Operator_OrderBy_OrderByExpression_Order) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 10, 0, 0}
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    *Source     `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Operators []*Operator `protobuf:"bytes,2,rep,name=operators,proto3" json:"operators,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{0}
}

func (x *Query) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Query) GetOperators() []*Operator {
	if x != nil {
		return x.Operators
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*Source_Logs
	//	*Source_Spans
	//	*Source_CustomDataset
	//	*Source_CustomEnrichment
	//	*Source_Schema
	Source isSource_Source `protobuf_oneof:"source"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{1}
}

func (m *Source) GetSource() isSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Source) GetLogs() *Logs {
	if x, ok := x.GetSource().(*Source_Logs); ok {
		return x.Logs
	}
	return nil
}

func (x *Source) GetSpans() *Spans {
	if x, ok := x.GetSource().(*Source_Spans); ok {
		return x.Spans
	}
	return nil
}

func (x *Source) GetCustomDataset() *CustomDataset {
	if x, ok := x.GetSource().(*Source_CustomDataset); ok {
		return x.CustomDataset
	}
	return nil
}

func (x *Source) GetCustomEnrichment() *CustomEnrichment {
	if x, ok := x.GetSource().(*Source_CustomEnrichment); ok {
		return x.CustomEnrichment
	}
	return nil
}

func (x *Source) GetSchema() *Schema {
	if x, ok := x.GetSource().(*Source_Schema); ok {
		return x.Schema
	}
	return nil
}

type isSource_Source interface {
	isSource_Source()
}

type Source_Logs struct {
	Logs *Logs `protobuf:"bytes,2,opt,name=logs,proto3,oneof"`
}

type Source_Spans struct {
	Spans *Spans `protobuf:"bytes,3,opt,name=spans,proto3,oneof"`
}

type Source_CustomDataset struct {
	CustomDataset *CustomDataset `protobuf:"bytes,4,opt,name=custom_dataset,json=customDataset,proto3,oneof"`
}

type Source_CustomEnrichment struct {
	CustomEnrichment *CustomEnrichment `protobuf:"bytes,5,opt,name=custom_enrichment,json=customEnrichment,proto3,oneof"`
}

type Source_Schema struct {
	Schema *Schema `protobuf:"bytes,6,opt,name=schema,proto3,oneof"`
}

func (*Source_Logs) isSource_Source() {}

func (*Source_Spans) isSource_Source() {}

func (*Source_CustomDataset) isSource_Source() {}

func (*Source_CustomEnrichment) isSource_Source() {}

func (*Source_Schema) isSource_Source() {}

type Logs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    *string    `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3,oneof" json:"team_id,omitempty"`
	TimeFrame *TimeFrame `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3,oneof" json:"time_frame,omitempty"`
}

func (x *Logs) Reset() {
	*x = Logs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logs) ProtoMessage() {}

func (x *Logs) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logs.ProtoReflect.Descriptor instead.
func (*Logs) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{2}
}

func (x *Logs) GetTeamId() string {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return ""
}

func (x *Logs) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

type Spans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    *string    `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3,oneof" json:"team_id,omitempty"`
	TimeFrame *TimeFrame `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3,oneof" json:"time_frame,omitempty"`
}

func (x *Spans) Reset() {
	*x = Spans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spans) ProtoMessage() {}

func (x *Spans) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spans.ProtoReflect.Descriptor instead.
func (*Spans) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{3}
}

func (x *Spans) GetTeamId() string {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return ""
}

func (x *Spans) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

type CustomDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TeamId    *string                 `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3,oneof" json:"team_id,omitempty"`
	TimeFrame *TimeFrame              `protobuf:"bytes,3,opt,name=time_frame,json=timeFrame,proto3,oneof" json:"time_frame,omitempty"`
}

func (x *CustomDataset) Reset() {
	*x = CustomDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDataset) ProtoMessage() {}

func (x *CustomDataset) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDataset.ProtoReflect.Descriptor instead.
func (*CustomDataset) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{4}
}

func (x *CustomDataset) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CustomDataset) GetTeamId() string {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return ""
}

func (x *CustomDataset) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

type CustomEnrichment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TeamId    *string                 `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3,oneof" json:"team_id,omitempty"`
	TimeFrame *TimeFrame              `protobuf:"bytes,3,opt,name=time_frame,json=timeFrame,proto3,oneof" json:"time_frame,omitempty"`
}

func (x *CustomEnrichment) Reset() {
	*x = CustomEnrichment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomEnrichment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomEnrichment) ProtoMessage() {}

func (x *CustomEnrichment) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomEnrichment.ProtoReflect.Descriptor instead.
func (*CustomEnrichment) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{5}
}

func (x *CustomEnrichment) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CustomEnrichment) GetTeamId() string {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return ""
}

func (x *CustomEnrichment) GetTimeFrame() *TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

type TimeFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Making this oneof because we might want to support relative time frame in the future
	//
	// Types that are assignable to TimeFrame:
	//
	//	*TimeFrame_Absolute_
	TimeFrame isTimeFrame_TimeFrame `protobuf_oneof:"time_frame"`
}

func (x *TimeFrame) Reset() {
	*x = TimeFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeFrame) ProtoMessage() {}

func (x *TimeFrame) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeFrame.ProtoReflect.Descriptor instead.
func (*TimeFrame) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{6}
}

func (m *TimeFrame) GetTimeFrame() isTimeFrame_TimeFrame {
	if m != nil {
		return m.TimeFrame
	}
	return nil
}

func (x *TimeFrame) GetAbsolute() *TimeFrame_Absolute {
	if x, ok := x.GetTimeFrame().(*TimeFrame_Absolute_); ok {
		return x.Absolute
	}
	return nil
}

type isTimeFrame_TimeFrame interface {
	isTimeFrame_TimeFrame()
}

type TimeFrame_Absolute_ struct {
	Absolute *TimeFrame_Absolute `protobuf:"bytes,1,opt,name=absolute,proto3,oneof"`
}

func (*TimeFrame_Absolute_) isTimeFrame_TimeFrame() {}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{7}
}

func (x *Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operator:
	//
	//	*Operator_Filter_
	//	*Operator_Create_
	//	*Operator_Move_
	//	*Operator_Remove_
	//	*Operator_Replace_
	//	*Operator_Redact_
	//	*Operator_Choose_
	//	*Operator_Convert_
	//	*Operator_Extract_
	//	*Operator_Limit_
	//	*Operator_OrderBy_
	//	*Operator_GroupBy_
	//	*Operator_Union_
	//	*Operator_Enrich_
	Operator isOperator_Operator `protobuf_oneof:"operator"`
}

func (x *Operator) Reset() {
	*x = Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8}
}

func (m *Operator) GetOperator() isOperator_Operator {
	if m != nil {
		return m.Operator
	}
	return nil
}

func (x *Operator) GetFilter() *Operator_Filter {
	if x, ok := x.GetOperator().(*Operator_Filter_); ok {
		return x.Filter
	}
	return nil
}

func (x *Operator) GetCreate() *Operator_Create {
	if x, ok := x.GetOperator().(*Operator_Create_); ok {
		return x.Create
	}
	return nil
}

func (x *Operator) GetMove() *Operator_Move {
	if x, ok := x.GetOperator().(*Operator_Move_); ok {
		return x.Move
	}
	return nil
}

func (x *Operator) GetRemove() *Operator_Remove {
	if x, ok := x.GetOperator().(*Operator_Remove_); ok {
		return x.Remove
	}
	return nil
}

func (x *Operator) GetReplace() *Operator_Replace {
	if x, ok := x.GetOperator().(*Operator_Replace_); ok {
		return x.Replace
	}
	return nil
}

func (x *Operator) GetRedact() *Operator_Redact {
	if x, ok := x.GetOperator().(*Operator_Redact_); ok {
		return x.Redact
	}
	return nil
}

func (x *Operator) GetChoose() *Operator_Choose {
	if x, ok := x.GetOperator().(*Operator_Choose_); ok {
		return x.Choose
	}
	return nil
}

func (x *Operator) GetConvert() *Operator_Convert {
	if x, ok := x.GetOperator().(*Operator_Convert_); ok {
		return x.Convert
	}
	return nil
}

func (x *Operator) GetExtract() *Operator_Extract {
	if x, ok := x.GetOperator().(*Operator_Extract_); ok {
		return x.Extract
	}
	return nil
}

func (x *Operator) GetLimit() *Operator_Limit {
	if x, ok := x.GetOperator().(*Operator_Limit_); ok {
		return x.Limit
	}
	return nil
}

func (x *Operator) GetOrderBy() *Operator_OrderBy {
	if x, ok := x.GetOperator().(*Operator_OrderBy_); ok {
		return x.OrderBy
	}
	return nil
}

func (x *Operator) GetGroupBy() *Operator_GroupBy {
	if x, ok := x.GetOperator().(*Operator_GroupBy_); ok {
		return x.GroupBy
	}
	return nil
}

func (x *Operator) GetUnion() *Operator_Union {
	if x, ok := x.GetOperator().(*Operator_Union_); ok {
		return x.Union
	}
	return nil
}

func (x *Operator) GetEnrich() *Operator_Enrich {
	if x, ok := x.GetOperator().(*Operator_Enrich_); ok {
		return x.Enrich
	}
	return nil
}

type isOperator_Operator interface {
	isOperator_Operator()
}

type Operator_Filter_ struct {
	Filter *Operator_Filter `protobuf:"bytes,1,opt,name=filter,proto3,oneof"`
}

type Operator_Create_ struct {
	Create *Operator_Create `protobuf:"bytes,2,opt,name=create,proto3,oneof"`
}

type Operator_Move_ struct {
	Move *Operator_Move `protobuf:"bytes,3,opt,name=move,proto3,oneof"`
}

type Operator_Remove_ struct {
	Remove *Operator_Remove `protobuf:"bytes,4,opt,name=remove,proto3,oneof"`
}

type Operator_Replace_ struct {
	Replace *Operator_Replace `protobuf:"bytes,5,opt,name=replace,proto3,oneof"`
}

type Operator_Redact_ struct {
	Redact *Operator_Redact `protobuf:"bytes,6,opt,name=redact,proto3,oneof"`
}

type Operator_Choose_ struct {
	Choose *Operator_Choose `protobuf:"bytes,7,opt,name=choose,proto3,oneof"`
}

type Operator_Convert_ struct {
	Convert *Operator_Convert `protobuf:"bytes,8,opt,name=convert,proto3,oneof"`
}

type Operator_Extract_ struct {
	Extract *Operator_Extract `protobuf:"bytes,9,opt,name=extract,proto3,oneof"`
}

type Operator_Limit_ struct {
	Limit *Operator_Limit `protobuf:"bytes,10,opt,name=limit,proto3,oneof"`
}

type Operator_OrderBy_ struct {
	OrderBy *Operator_OrderBy `protobuf:"bytes,11,opt,name=order_by,json=orderBy,proto3,oneof"`
}

type Operator_GroupBy_ struct {
	GroupBy *Operator_GroupBy `protobuf:"bytes,14,opt,name=group_by,json=groupBy,proto3,oneof"`
}

type Operator_Union_ struct {
	Union *Operator_Union `protobuf:"bytes,15,opt,name=union,proto3,oneof"`
}

type Operator_Enrich_ struct {
	Enrich *Operator_Enrich `protobuf:"bytes,16,opt,name=enrich,proto3,oneof"`
}

func (*Operator_Filter_) isOperator_Operator() {}

func (*Operator_Create_) isOperator_Operator() {}

func (*Operator_Move_) isOperator_Operator() {}

func (*Operator_Remove_) isOperator_Operator() {}

func (*Operator_Replace_) isOperator_Operator() {}

func (*Operator_Redact_) isOperator_Operator() {}

func (*Operator_Choose_) isOperator_Operator() {}

func (*Operator_Convert_) isOperator_Operator() {}

func (*Operator_Extract_) isOperator_Operator() {}

func (*Operator_Limit_) isOperator_Operator() {}

func (*Operator_OrderBy_) isOperator_Operator() {}

func (*Operator_GroupBy_) isOperator_Operator() {}

func (*Operator_Union_) isOperator_Operator() {}

func (*Operator_Enrich_) isOperator_Operator() {}

type TimeFrame_Absolute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *TimeFrame_Absolute) Reset() {
	*x = TimeFrame_Absolute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeFrame_Absolute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeFrame_Absolute) ProtoMessage() {}

func (x *TimeFrame_Absolute) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeFrame_Absolute.ProtoReflect.Descriptor instead.
func (*TimeFrame_Absolute) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{6, 0}
}

func (x *TimeFrame_Absolute) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TimeFrame_Absolute) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type Operator_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *Expression `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *Operator_Filter) Reset() {
	*x = Operator_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Filter) ProtoMessage() {}

func (x *Operator_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Filter.ProtoReflect.Descriptor instead.
func (*Operator_Filter) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Operator_Filter) GetCondition() *Expression {
	if x != nil {
		return x.Condition
	}
	return nil
}

type Operator_Create struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       *Expression_Keypath `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Expression *Expression         `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *Operator_Create) Reset() {
	*x = Operator_Create{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Create) ProtoMessage() {}

func (x *Operator_Create) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Create.ProtoReflect.Descriptor instead.
func (*Operator_Create) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 1}
}

func (x *Operator_Create) GetPath() *Expression_Keypath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Operator_Create) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type Operator_Move struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *Expression_Keypath `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   *Expression_Keypath `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *Operator_Move) Reset() {
	*x = Operator_Move{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Move) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Move) ProtoMessage() {}

func (x *Operator_Move) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Move.ProtoReflect.Descriptor instead.
func (*Operator_Move) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 2}
}

func (x *Operator_Move) GetFrom() *Expression_Keypath {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Operator_Move) GetTo() *Expression_Keypath {
	if x != nil {
		return x.To
	}
	return nil
}

type Operator_Remove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets []*Expression_Keypath `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *Operator_Remove) Reset() {
	*x = Operator_Remove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Remove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Remove) ProtoMessage() {}

func (x *Operator_Remove) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Remove.ProtoReflect.Descriptor instead.
func (*Operator_Remove) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 3}
}

func (x *Operator_Remove) GetTargets() []*Expression_Keypath {
	if x != nil {
		return x.Targets
	}
	return nil
}

type Operator_Replace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       *Expression_Keypath `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Expression *Expression         `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *Operator_Replace) Reset() {
	*x = Operator_Replace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Replace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Replace) ProtoMessage() {}

func (x *Operator_Replace) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Replace.ProtoReflect.Descriptor instead.
func (*Operator_Replace) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 4}
}

func (x *Operator_Replace) GetPath() *Expression_Keypath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Operator_Replace) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type Operator_Redact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        *Expression_Keypath `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Match       *Expression_Match   `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`
	Replacement *Expression         `protobuf:"bytes,3,opt,name=replacement,proto3" json:"replacement,omitempty"`
}

func (x *Operator_Redact) Reset() {
	*x = Operator_Redact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Redact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Redact) ProtoMessage() {}

func (x *Operator_Redact) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Redact.ProtoReflect.Descriptor instead.
func (*Operator_Redact) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 5}
}

func (x *Operator_Redact) GetPath() *Expression_Keypath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Operator_Redact) GetMatch() *Expression_Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *Operator_Redact) GetReplacement() *Expression {
	if x != nil {
		return x.Replacement
	}
	return nil
}

type Operator_Choose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Operator_Choose_Chosen `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Operator_Choose) Reset() {
	*x = Operator_Choose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Choose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Choose) ProtoMessage() {}

func (x *Operator_Choose) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Choose.ProtoReflect.Descriptor instead.
func (*Operator_Choose) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 6}
}

func (x *Operator_Choose) GetFields() []*Operator_Choose_Chosen {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Operator_Convert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversions []*KeypathType `protobuf:"bytes,1,rep,name=conversions,proto3" json:"conversions,omitempty"`
}

func (x *Operator_Convert) Reset() {
	*x = Operator_Convert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Convert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Convert) ProtoMessage() {}

func (x *Operator_Convert) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Convert.ProtoReflect.Descriptor instead.
func (*Operator_Convert) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 7}
}

func (x *Operator_Convert) GetConversions() []*KeypathType {
	if x != nil {
		return x.Conversions
	}
	return nil
}

type Operator_Extract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Into       *Expression_Keypath `protobuf:"bytes,2,opt,name=into,proto3" json:"into,omitempty"`
	Datatypes  []*KeypathType      `protobuf:"bytes,3,rep,name=datatypes,proto3" json:"datatypes,omitempty"`
	// Types that are assignable to Extractor:
	//
	//	*Operator_Extract_Regex
	//	*Operator_Extract_KeyValue
	//	*Operator_Extract_Delimited
	//	*Operator_Extract_Json
	//	*Operator_Extract_MultiRegex
	Extractor isOperator_Extract_Extractor `protobuf_oneof:"extractor"`
}

func (x *Operator_Extract) Reset() {
	*x = Operator_Extract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Extract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Extract) ProtoMessage() {}

func (x *Operator_Extract) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Extract.ProtoReflect.Descriptor instead.
func (*Operator_Extract) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 8}
}

func (x *Operator_Extract) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_Extract) GetInto() *Expression_Keypath {
	if x != nil {
		return x.Into
	}
	return nil
}

func (x *Operator_Extract) GetDatatypes() []*KeypathType {
	if x != nil {
		return x.Datatypes
	}
	return nil
}

func (m *Operator_Extract) GetExtractor() isOperator_Extract_Extractor {
	if m != nil {
		return m.Extractor
	}
	return nil
}

func (x *Operator_Extract) GetRegex() *Operator_Extract_ExtractRegex {
	if x, ok := x.GetExtractor().(*Operator_Extract_Regex); ok {
		return x.Regex
	}
	return nil
}

func (x *Operator_Extract) GetKeyValue() *Operator_Extract_ExtractKeyValue {
	if x, ok := x.GetExtractor().(*Operator_Extract_KeyValue); ok {
		return x.KeyValue
	}
	return nil
}

func (x *Operator_Extract) GetDelimited() *Operator_Extract_ExtractDelimited {
	if x, ok := x.GetExtractor().(*Operator_Extract_Delimited); ok {
		return x.Delimited
	}
	return nil
}

func (x *Operator_Extract) GetJson() *Operator_Extract_ExtractJson {
	if x, ok := x.GetExtractor().(*Operator_Extract_Json); ok {
		return x.Json
	}
	return nil
}

func (x *Operator_Extract) GetMultiRegex() *Operator_Extract_ExtractMultiRegex {
	if x, ok := x.GetExtractor().(*Operator_Extract_MultiRegex); ok {
		return x.MultiRegex
	}
	return nil
}

type isOperator_Extract_Extractor interface {
	isOperator_Extract_Extractor()
}

type Operator_Extract_Regex struct {
	Regex *Operator_Extract_ExtractRegex `protobuf:"bytes,4,opt,name=regex,proto3,oneof"`
}

type Operator_Extract_KeyValue struct {
	KeyValue *Operator_Extract_ExtractKeyValue `protobuf:"bytes,5,opt,name=key_value,json=keyValue,proto3,oneof"`
}

type Operator_Extract_Delimited struct {
	Delimited *Operator_Extract_ExtractDelimited `protobuf:"bytes,6,opt,name=delimited,proto3,oneof"`
}

type Operator_Extract_Json struct {
	Json *Operator_Extract_ExtractJson `protobuf:"bytes,7,opt,name=json,proto3,oneof"`
}

type Operator_Extract_MultiRegex struct {
	MultiRegex *Operator_Extract_ExtractMultiRegex `protobuf:"bytes,8,opt,name=multi_regex,json=multiRegex,proto3,oneof"`
}

func (*Operator_Extract_Regex) isOperator_Extract_Extractor() {}

func (*Operator_Extract_KeyValue) isOperator_Extract_Extractor() {}

func (*Operator_Extract_Delimited) isOperator_Extract_Extractor() {}

func (*Operator_Extract_Json) isOperator_Extract_Extractor() {}

func (*Operator_Extract_MultiRegex) isOperator_Extract_Extractor() {}

type Operator_Limit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCount *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=event_count,json=eventCount,proto3" json:"event_count,omitempty"`
}

func (x *Operator_Limit) Reset() {
	*x = Operator_Limit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Limit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Limit) ProtoMessage() {}

func (x *Operator_Limit) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Limit.ProtoReflect.Descriptor instead.
func (*Operator_Limit) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 9}
}

func (x *Operator_Limit) GetEventCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.EventCount
	}
	return nil
}

type Operator_OrderBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expressions []*Operator_OrderBy_OrderByExpression `protobuf:"bytes,3,rep,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *Operator_OrderBy) Reset() {
	*x = Operator_OrderBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_OrderBy) ProtoMessage() {}

func (x *Operator_OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_OrderBy.ProtoReflect.Descriptor instead.
func (*Operator_OrderBy) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 10}
}

func (x *Operator_OrderBy) GetExpressions() []*Operator_OrderBy_OrderByExpression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type Operator_GroupBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Functions []*Operator_GroupBy_GroupByFunction `protobuf:"bytes,1,rep,name=functions,proto3" json:"functions,omitempty"`
	Groupings []*Operator_GroupBy_GroupingSet     `protobuf:"bytes,2,rep,name=groupings,proto3" json:"groupings,omitempty"`
}

func (x *Operator_GroupBy) Reset() {
	*x = Operator_GroupBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy) ProtoMessage() {}

func (x *Operator_GroupBy) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11}
}

func (x *Operator_GroupBy) GetFunctions() []*Operator_GroupBy_GroupByFunction {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *Operator_GroupBy) GetGroupings() []*Operator_GroupBy_GroupingSet {
	if x != nil {
		return x.Groupings
	}
	return nil
}

type Operator_Union struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *Operator_Union) Reset() {
	*x = Operator_Union{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Union) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Union) ProtoMessage() {}

func (x *Operator_Union) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Union.ProtoReflect.Descriptor instead.
func (*Operator_Union) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 12}
}

func (x *Operator_Union) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type Operator_EnrichmentSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*Operator_EnrichmentSource_CustomEnrichment
	Source isOperator_EnrichmentSource_Source `protobuf_oneof:"source"`
}

func (x *Operator_EnrichmentSource) Reset() {
	*x = Operator_EnrichmentSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_EnrichmentSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_EnrichmentSource) ProtoMessage() {}

func (x *Operator_EnrichmentSource) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_EnrichmentSource.ProtoReflect.Descriptor instead.
func (*Operator_EnrichmentSource) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 13}
}

func (m *Operator_EnrichmentSource) GetSource() isOperator_EnrichmentSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Operator_EnrichmentSource) GetCustomEnrichment() *CustomEnrichment {
	if x, ok := x.GetSource().(*Operator_EnrichmentSource_CustomEnrichment); ok {
		return x.CustomEnrichment
	}
	return nil
}

type isOperator_EnrichmentSource_Source interface {
	isOperator_EnrichmentSource_Source()
}

type Operator_EnrichmentSource_CustomEnrichment struct {
	CustomEnrichment *CustomEnrichment `protobuf:"bytes,1,opt,name=custom_enrichment,json=customEnrichment,proto3,oneof"`
}

func (*Operator_EnrichmentSource_CustomEnrichment) isOperator_EnrichmentSource_Source() {}

type Operator_Enrich struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *Operator_EnrichmentSource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Left   *Expression                `protobuf:"bytes,2,opt,name=left,proto3" json:"left,omitempty"`
	Into   *Expression_Keypath        `protobuf:"bytes,3,opt,name=into,proto3" json:"into,omitempty"`
}

func (x *Operator_Enrich) Reset() {
	*x = Operator_Enrich{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Enrich) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Enrich) ProtoMessage() {}

func (x *Operator_Enrich) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Enrich.ProtoReflect.Descriptor instead.
func (*Operator_Enrich) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 14}
}

func (x *Operator_Enrich) GetSource() *Operator_EnrichmentSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Operator_Enrich) GetLeft() *Expression {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *Operator_Enrich) GetInto() *Expression_Keypath {
	if x != nil {
		return x.Into
	}
	return nil
}

type Operator_Choose_Chosen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	As         *Expression_Keypath `protobuf:"bytes,2,opt,name=as,proto3" json:"as,omitempty"`
}

func (x *Operator_Choose_Chosen) Reset() {
	*x = Operator_Choose_Chosen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Choose_Chosen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Choose_Chosen) ProtoMessage() {}

func (x *Operator_Choose_Chosen) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Choose_Chosen.ProtoReflect.Descriptor instead.
func (*Operator_Choose_Chosen) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 6, 0}
}

func (x *Operator_Choose_Chosen) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_Choose_Chosen) GetAs() *Expression_Keypath {
	if x != nil {
		return x.As
	}
	return nil
}

type Operator_Extract_ExtractRegex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regex *Expression_Regex `protobuf:"bytes,1,opt,name=regex,proto3" json:"regex,omitempty"`
}

func (x *Operator_Extract_ExtractRegex) Reset() {
	*x = Operator_Extract_ExtractRegex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Extract_ExtractRegex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Extract_ExtractRegex) ProtoMessage() {}

func (x *Operator_Extract_ExtractRegex) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Extract_ExtractRegex.ProtoReflect.Descriptor instead.
func (*Operator_Extract_ExtractRegex) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 8, 0}
}

func (x *Operator_Extract_ExtractRegex) GetRegex() *Expression_Regex {
	if x != nil {
		return x.Regex
	}
	return nil
}

type Operator_Extract_ExtractMultiRegex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regex *Expression_Regex `protobuf:"bytes,1,opt,name=regex,proto3" json:"regex,omitempty"`
}

func (x *Operator_Extract_ExtractMultiRegex) Reset() {
	*x = Operator_Extract_ExtractMultiRegex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Extract_ExtractMultiRegex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Extract_ExtractMultiRegex) ProtoMessage() {}

func (x *Operator_Extract_ExtractMultiRegex) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Extract_ExtractMultiRegex.ProtoReflect.Descriptor instead.
func (*Operator_Extract_ExtractMultiRegex) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 8, 1}
}

func (x *Operator_Extract_ExtractMultiRegex) GetRegex() *Expression_Regex {
	if x != nil {
		return x.Regex
	}
	return nil
}

type Operator_Extract_ExtractKeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PairDelimiter  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=pair_delimiter,json=pairDelimiter,proto3" json:"pair_delimiter,omitempty"`
	KeyDelimiter   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=key_delimiter,json=keyDelimiter,proto3" json:"key_delimiter,omitempty"`
	QuoteCharValue *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=quote_char_value,json=quoteCharValue,proto3" json:"quote_char_value,omitempty"`
}

func (x *Operator_Extract_ExtractKeyValue) Reset() {
	*x = Operator_Extract_ExtractKeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Extract_ExtractKeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Extract_ExtractKeyValue) ProtoMessage() {}

func (x *Operator_Extract_ExtractKeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Extract_ExtractKeyValue.ProtoReflect.Descriptor instead.
func (*Operator_Extract_ExtractKeyValue) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 8, 2}
}

func (x *Operator_Extract_ExtractKeyValue) GetPairDelimiter() *wrapperspb.StringValue {
	if x != nil {
		return x.PairDelimiter
	}
	return nil
}

func (x *Operator_Extract_ExtractKeyValue) GetKeyDelimiter() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyDelimiter
	}
	return nil
}

func (x *Operator_Extract_ExtractKeyValue) GetQuoteCharValue() *wrapperspb.StringValue {
	if x != nil {
		return x.QuoteCharValue
	}
	return nil
}

type Operator_Extract_ExtractDelimited struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delimiter *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	Type      Datatype_PrimitiveType  `protobuf:"varint,2,opt,name=type,proto3,enum=com.coralogix.dataprime.ast.v1.Datatype_PrimitiveType" json:"type,omitempty"`
}

func (x *Operator_Extract_ExtractDelimited) Reset() {
	*x = Operator_Extract_ExtractDelimited{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Extract_ExtractDelimited) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Extract_ExtractDelimited) ProtoMessage() {}

func (x *Operator_Extract_ExtractDelimited) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Extract_ExtractDelimited.ProtoReflect.Descriptor instead.
func (*Operator_Extract_ExtractDelimited) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 8, 3}
}

func (x *Operator_Extract_ExtractDelimited) GetDelimiter() *wrapperspb.StringValue {
	if x != nil {
		return x.Delimiter
	}
	return nil
}

func (x *Operator_Extract_ExtractDelimited) GetType() Datatype_PrimitiveType {
	if x != nil {
		return x.Type
	}
	return Datatype_PRIMITIVE_TYPE_UNSPECIFIED
}

type Operator_Extract_ExtractJson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxUnescapeCount *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=max_unescape_count,json=maxUnescapeCount,proto3" json:"max_unescape_count,omitempty"`
}

func (x *Operator_Extract_ExtractJson) Reset() {
	*x = Operator_Extract_ExtractJson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_Extract_ExtractJson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_Extract_ExtractJson) ProtoMessage() {}

func (x *Operator_Extract_ExtractJson) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_Extract_ExtractJson.ProtoReflect.Descriptor instead.
func (*Operator_Extract_ExtractJson) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 8, 4}
}

func (x *Operator_Extract_ExtractJson) GetMaxUnescapeCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxUnescapeCount
	}
	return nil
}

type Operator_OrderBy_OrderByExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression                              `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Order      Operator_OrderBy_OrderByExpression_Order `protobuf:"varint,2,opt,name=order,proto3,enum=com.coralogix.dataprime.ast.v1.Operator_OrderBy_OrderByExpression_Order" json:"order,omitempty"`
}

func (x *Operator_OrderBy_OrderByExpression) Reset() {
	*x = Operator_OrderBy_OrderByExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_OrderBy_OrderByExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_OrderBy_OrderByExpression) ProtoMessage() {}

func (x *Operator_OrderBy_OrderByExpression) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_OrderBy_OrderByExpression.ProtoReflect.Descriptor instead.
func (*Operator_OrderBy_OrderByExpression) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 10, 0}
}

func (x *Operator_OrderBy_OrderByExpression) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_OrderBy_OrderByExpression) GetOrder() Operator_OrderBy_OrderByExpression_Order {
	if x != nil {
		return x.Order
	}
	return Operator_OrderBy_OrderByExpression_ORDER_UNSPECIFIED
}

type Operator_GroupBy_GroupByFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//
	//	*Operator_GroupBy_GroupByFunction_Count_
	//	*Operator_GroupBy_GroupByFunction_DistinctCount_
	//	*Operator_GroupBy_GroupByFunction_Sum_
	//	*Operator_GroupBy_GroupByFunction_Min_
	//	*Operator_GroupBy_GroupByFunction_Max_
	//	*Operator_GroupBy_GroupByFunction_Avg_
	//	*Operator_GroupBy_GroupByFunction_Stddev
	//	*Operator_GroupBy_GroupByFunction_SampleStddev
	//	*Operator_GroupBy_GroupByFunction_Variance_
	//	*Operator_GroupBy_GroupByFunction_SampleVariance_
	//	*Operator_GroupBy_GroupByFunction_Percentile_
	//	*Operator_GroupBy_GroupByFunction_AnyValue_
	//	*Operator_GroupBy_GroupByFunction_ApproxCountDistinct_
	//	*Operator_GroupBy_GroupByFunction_Collect_
	//	*Operator_GroupBy_GroupByFunction_MaxByInternal_
	Function isOperator_GroupBy_GroupByFunction_Function `protobuf_oneof:"function"`
}

func (x *Operator_GroupBy_GroupByFunction) Reset() {
	*x = Operator_GroupBy_GroupByFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0}
}

func (m *Operator_GroupBy_GroupByFunction) GetFunction() isOperator_GroupBy_GroupByFunction_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetCount() *Operator_GroupBy_GroupByFunction_Count {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_Count_); ok {
		return x.Count
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetDistinctCount() *Operator_GroupBy_GroupByFunction_DistinctCount {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_DistinctCount_); ok {
		return x.DistinctCount
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetSum() *Operator_GroupBy_GroupByFunction_Sum {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_Sum_); ok {
		return x.Sum
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetMin() *Operator_GroupBy_GroupByFunction_Min {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_Min_); ok {
		return x.Min
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetMax() *Operator_GroupBy_GroupByFunction_Max {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_Max_); ok {
		return x.Max
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetAvg() *Operator_GroupBy_GroupByFunction_Avg {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_Avg_); ok {
		return x.Avg
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetStddev() *Operator_GroupBy_GroupByFunction_StdDev {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_Stddev); ok {
		return x.Stddev
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetSampleStddev() *Operator_GroupBy_GroupByFunction_SampleStdDev {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_SampleStddev); ok {
		return x.SampleStddev
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetVariance() *Operator_GroupBy_GroupByFunction_Variance {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_Variance_); ok {
		return x.Variance
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetSampleVariance() *Operator_GroupBy_GroupByFunction_SampleVariance {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_SampleVariance_); ok {
		return x.SampleVariance
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetPercentile() *Operator_GroupBy_GroupByFunction_Percentile {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_Percentile_); ok {
		return x.Percentile
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetAnyValue() *Operator_GroupBy_GroupByFunction_AnyValue {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_AnyValue_); ok {
		return x.AnyValue
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetApproxCountDistinct() *Operator_GroupBy_GroupByFunction_ApproxCountDistinct {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_ApproxCountDistinct_); ok {
		return x.ApproxCountDistinct
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetCollect() *Operator_GroupBy_GroupByFunction_Collect {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_Collect_); ok {
		return x.Collect
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction) GetMaxByInternal() *Operator_GroupBy_GroupByFunction_MaxByInternal {
	if x, ok := x.GetFunction().(*Operator_GroupBy_GroupByFunction_MaxByInternal_); ok {
		return x.MaxByInternal
	}
	return nil
}

type isOperator_GroupBy_GroupByFunction_Function interface {
	isOperator_GroupBy_GroupByFunction_Function()
}

type Operator_GroupBy_GroupByFunction_Count_ struct {
	Count *Operator_GroupBy_GroupByFunction_Count `protobuf:"bytes,1,opt,name=count,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_DistinctCount_ struct {
	DistinctCount *Operator_GroupBy_GroupByFunction_DistinctCount `protobuf:"bytes,3,opt,name=distinct_count,json=distinctCount,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_Sum_ struct {
	Sum *Operator_GroupBy_GroupByFunction_Sum `protobuf:"bytes,2,opt,name=sum,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_Min_ struct {
	Min *Operator_GroupBy_GroupByFunction_Min `protobuf:"bytes,5,opt,name=min,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_Max_ struct {
	Max *Operator_GroupBy_GroupByFunction_Max `protobuf:"bytes,6,opt,name=max,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_Avg_ struct {
	Avg *Operator_GroupBy_GroupByFunction_Avg `protobuf:"bytes,7,opt,name=avg,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_Stddev struct {
	Stddev *Operator_GroupBy_GroupByFunction_StdDev `protobuf:"bytes,8,opt,name=stddev,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_SampleStddev struct {
	SampleStddev *Operator_GroupBy_GroupByFunction_SampleStdDev `protobuf:"bytes,9,opt,name=sample_stddev,json=sampleStddev,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_Variance_ struct {
	Variance *Operator_GroupBy_GroupByFunction_Variance `protobuf:"bytes,10,opt,name=variance,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_SampleVariance_ struct {
	SampleVariance *Operator_GroupBy_GroupByFunction_SampleVariance `protobuf:"bytes,11,opt,name=sample_variance,json=sampleVariance,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_Percentile_ struct {
	Percentile *Operator_GroupBy_GroupByFunction_Percentile `protobuf:"bytes,12,opt,name=percentile,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_AnyValue_ struct {
	AnyValue *Operator_GroupBy_GroupByFunction_AnyValue `protobuf:"bytes,13,opt,name=any_value,json=anyValue,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_ApproxCountDistinct_ struct {
	ApproxCountDistinct *Operator_GroupBy_GroupByFunction_ApproxCountDistinct `protobuf:"bytes,14,opt,name=approx_count_distinct,json=approxCountDistinct,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_Collect_ struct {
	Collect *Operator_GroupBy_GroupByFunction_Collect `protobuf:"bytes,15,opt,name=collect,proto3,oneof"`
}

type Operator_GroupBy_GroupByFunction_MaxByInternal_ struct {
	MaxByInternal *Operator_GroupBy_GroupByFunction_MaxByInternal `protobuf:"bytes,16,opt,name=max_by_internal,json=maxByInternal,proto3,oneof"`
}

func (*Operator_GroupBy_GroupByFunction_Count_) isOperator_GroupBy_GroupByFunction_Function() {}

func (*Operator_GroupBy_GroupByFunction_DistinctCount_) isOperator_GroupBy_GroupByFunction_Function() {
}

func (*Operator_GroupBy_GroupByFunction_Sum_) isOperator_GroupBy_GroupByFunction_Function() {}

func (*Operator_GroupBy_GroupByFunction_Min_) isOperator_GroupBy_GroupByFunction_Function() {}

func (*Operator_GroupBy_GroupByFunction_Max_) isOperator_GroupBy_GroupByFunction_Function() {}

func (*Operator_GroupBy_GroupByFunction_Avg_) isOperator_GroupBy_GroupByFunction_Function() {}

func (*Operator_GroupBy_GroupByFunction_Stddev) isOperator_GroupBy_GroupByFunction_Function() {}

func (*Operator_GroupBy_GroupByFunction_SampleStddev) isOperator_GroupBy_GroupByFunction_Function() {}

func (*Operator_GroupBy_GroupByFunction_Variance_) isOperator_GroupBy_GroupByFunction_Function() {}

func (*Operator_GroupBy_GroupByFunction_SampleVariance_) isOperator_GroupBy_GroupByFunction_Function() {
}

func (*Operator_GroupBy_GroupByFunction_Percentile_) isOperator_GroupBy_GroupByFunction_Function() {}

func (*Operator_GroupBy_GroupByFunction_AnyValue_) isOperator_GroupBy_GroupByFunction_Function() {}

func (*Operator_GroupBy_GroupByFunction_ApproxCountDistinct_) isOperator_GroupBy_GroupByFunction_Function() {
}

func (*Operator_GroupBy_GroupByFunction_Collect_) isOperator_GroupBy_GroupByFunction_Function() {}

func (*Operator_GroupBy_GroupByFunction_MaxByInternal_) isOperator_GroupBy_GroupByFunction_Function() {
}

type Operator_GroupBy_GroupingSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Operator_GroupBy_GroupingSetField `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Operator_GroupBy_GroupingSet) Reset() {
	*x = Operator_GroupBy_GroupingSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupingSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupingSet) ProtoMessage() {}

func (x *Operator_GroupBy_GroupingSet) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupingSet.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupingSet) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 1}
}

func (x *Operator_GroupBy_GroupingSet) GetFields() []*Operator_GroupBy_GroupingSetField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Operator_GroupBy_GroupingSetField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupingSetField) Reset() {
	*x = Operator_GroupBy_GroupingSetField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupingSetField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupingSetField) ProtoMessage() {}

func (x *Operator_GroupBy_GroupingSetField) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupingSetField.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupingSetField) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 2}
}

func (x *Operator_GroupBy_GroupingSetField) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupingSetField) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,3,opt,name=expression,proto3,oneof" json:"expression,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_Count) Reset() {
	*x = Operator_GroupBy_GroupByFunction_Count{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_Count) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_Count) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_Count.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_Count) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 0}
}

func (x *Operator_GroupBy_GroupByFunction_Count) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_Count) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_DistinctCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_DistinctCount) Reset() {
	*x = Operator_GroupBy_GroupByFunction_DistinctCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_DistinctCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_DistinctCount) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_DistinctCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_DistinctCount.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_DistinctCount) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 1}
}

func (x *Operator_GroupBy_GroupByFunction_DistinctCount) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_DistinctCount) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_Sum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_Sum) Reset() {
	*x = Operator_GroupBy_GroupByFunction_Sum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_Sum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_Sum) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_Sum) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_Sum.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_Sum) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 2}
}

func (x *Operator_GroupBy_GroupByFunction_Sum) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_Sum) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_Min struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_Min) Reset() {
	*x = Operator_GroupBy_GroupByFunction_Min{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_Min) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_Min) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_Min) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_Min.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_Min) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 3}
}

func (x *Operator_GroupBy_GroupByFunction_Min) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_Min) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_Max struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_Max) Reset() {
	*x = Operator_GroupBy_GroupByFunction_Max{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_Max) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_Max) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_Max) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_Max.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_Max) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 4}
}

func (x *Operator_GroupBy_GroupByFunction_Max) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_Max) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_Avg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_Avg) Reset() {
	*x = Operator_GroupBy_GroupByFunction_Avg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_Avg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_Avg) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_Avg) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_Avg.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_Avg) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 5}
}

func (x *Operator_GroupBy_GroupByFunction_Avg) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_Avg) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_StdDev struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_StdDev) Reset() {
	*x = Operator_GroupBy_GroupByFunction_StdDev{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_StdDev) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_StdDev) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_StdDev) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_StdDev.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_StdDev) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 6}
}

func (x *Operator_GroupBy_GroupByFunction_StdDev) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_StdDev) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_SampleStdDev struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_SampleStdDev) Reset() {
	*x = Operator_GroupBy_GroupByFunction_SampleStdDev{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_SampleStdDev) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_SampleStdDev) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_SampleStdDev) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_SampleStdDev.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_SampleStdDev) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 7}
}

func (x *Operator_GroupBy_GroupByFunction_SampleStdDev) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_SampleStdDev) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_Variance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_Variance) Reset() {
	*x = Operator_GroupBy_GroupByFunction_Variance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_Variance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_Variance) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_Variance) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_Variance.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_Variance) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 8}
}

func (x *Operator_GroupBy_GroupByFunction_Variance) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_Variance) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_SampleVariance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_SampleVariance) Reset() {
	*x = Operator_GroupBy_GroupByFunction_SampleVariance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_SampleVariance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_SampleVariance) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_SampleVariance) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_SampleVariance.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_SampleVariance) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 9}
}

func (x *Operator_GroupBy_GroupByFunction_SampleVariance) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_SampleVariance) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_Percentile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percentile     *Expression         `protobuf:"bytes,1,opt,name=percentile,proto3" json:"percentile,omitempty"`
	Expression     *Expression         `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	ErrorThreshold *Expression         `protobuf:"bytes,3,opt,name=error_threshold,json=errorThreshold,proto3" json:"error_threshold,omitempty"`
	Alias          *Expression_Keypath `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_Percentile) Reset() {
	*x = Operator_GroupBy_GroupByFunction_Percentile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_Percentile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_Percentile) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_Percentile) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_Percentile.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_Percentile) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 10}
}

func (x *Operator_GroupBy_GroupByFunction_Percentile) GetPercentile() *Expression {
	if x != nil {
		return x.Percentile
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_Percentile) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_Percentile) GetErrorThreshold() *Expression {
	if x != nil {
		return x.ErrorThreshold
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_Percentile) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_AnyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_AnyValue) Reset() {
	*x = Operator_GroupBy_GroupByFunction_AnyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_AnyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_AnyValue) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_AnyValue) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_AnyValue.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_AnyValue) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 11}
}

func (x *Operator_GroupBy_GroupByFunction_AnyValue) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_AnyValue) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_ApproxCountDistinct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  *Expression         `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Values []*Expression       `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	Alias  *Expression_Keypath `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_ApproxCountDistinct) Reset() {
	*x = Operator_GroupBy_GroupByFunction_ApproxCountDistinct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_ApproxCountDistinct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_ApproxCountDistinct) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_ApproxCountDistinct) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_ApproxCountDistinct.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_ApproxCountDistinct) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 12}
}

func (x *Operator_GroupBy_GroupByFunction_ApproxCountDistinct) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_ApproxCountDistinct) GetValues() []*Expression {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_ApproxCountDistinct) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

type Operator_GroupBy_GroupByFunction_Collect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	OrderBy    []*Expression       `protobuf:"bytes,2,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	Distinct   bool                `protobuf:"varint,4,opt,name=distinct,proto3" json:"distinct,omitempty"`
	Limit      *int64              `protobuf:"varint,5,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_Collect) Reset() {
	*x = Operator_GroupBy_GroupByFunction_Collect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_Collect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_Collect) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_Collect) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_Collect.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_Collect) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 13}
}

func (x *Operator_GroupBy_GroupByFunction_Collect) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_Collect) GetOrderBy() []*Expression {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_Collect) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_Collect) GetDistinct() bool {
	if x != nil {
		return x.Distinct
	}
	return false
}

func (x *Operator_GroupBy_GroupByFunction_Collect) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type Operator_GroupBy_GroupByFunction_MaxByInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortKey    *Expression         `protobuf:"bytes,1,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	Expression *Expression         `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	Alias      *Expression_Keypath `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Operator_GroupBy_GroupByFunction_MaxByInternal) Reset() {
	*x = Operator_GroupBy_GroupByFunction_MaxByInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator_GroupBy_GroupByFunction_MaxByInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator_GroupBy_GroupByFunction_MaxByInternal) ProtoMessage() {}

func (x *Operator_GroupBy_GroupByFunction_MaxByInternal) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator_GroupBy_GroupByFunction_MaxByInternal.ProtoReflect.Descriptor instead.
func (*Operator_GroupBy_GroupByFunction_MaxByInternal) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP(), []int{8, 11, 0, 14}
}

func (x *Operator_GroupBy_GroupByFunction_MaxByInternal) GetSortKey() *Expression {
	if x != nil {
		return x.SortKey
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_MaxByInternal) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operator_GroupBy_GroupByFunction_MaxByInternal) GetAlias() *Expression_Keypath {
	if x != nil {
		return x.Alias
	}
	return nil
}

var File_com_coralogix_dataprime_ast_v1_query_proto protoreflect.FileDescriptor

var file_com_coralogix_dataprime_ast_v1_query_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x2f, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69,
	0x73, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x3e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x46, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x8e, 0x03,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x48, 0x00, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70,
	0x61, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x5f, 0x0a, 0x11, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6e,
	0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x08,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x8e,
	0x01, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x48, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x48, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0xcc, 0x01,
	0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x48, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0xd3, 0x01, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x61, 0x62,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x1a, 0x66, 0x0a, 0x08,
	0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x02, 0x74, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xab, 0x4b, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x61,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x12, 0x49, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x4c, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x48,
	0x00, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x4d, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x48, 0x00,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x06, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x1a, 0x52, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xae, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10,
	0x06, 0x1a, 0xa4, 0x01, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x42, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61,
	0x74, 0x68, 0x52, 0x02, 0x74, 0x6f, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x1a, 0x5c, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x1a, 0xa3, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79,
	0x70, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0xe6, 0x01, 0x0a,
	0x06, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x46, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4c, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xf9, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x2e, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x1a, 0x9e, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x02, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x02, 0x61, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x1a, 0x58, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xdb, 0x0a, 0x0a, 0x07,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65,
	0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x6f, 0x12, 0x49, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x5f, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x61,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x12, 0x52, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x67, 0x65, 0x78, 0x48, 0x00,
	0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x67, 0x65, 0x78, 0x1a, 0x56, 0x0a, 0x0c,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x46, 0x0a, 0x05,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x52, 0x05, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x1a, 0x5b, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x46, 0x0a, 0x05, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x1a, 0xe1, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x69,
	0x72, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x6b, 0x65,
	0x79, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x10, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9a, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50,
	0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0x58, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4a, 0x73, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x55,
	0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x45, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x88, 0x03, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x64, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x8a, 0x02, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x49, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x53,
	0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x1a, 0x9d, 0x27, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x5e, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x1a, 0xba, 0x23, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x58, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x58, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x58, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x78, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x58,
	0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x76,
	0x67, 0x48, 0x00, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x61, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x64,
	0x65, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x64, 0x44, 0x65,
	0x76, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x12, 0x74, 0x0a, 0x0d, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65,
	0x76, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x64, 0x64, 0x65,
	0x76, 0x12, 0x67, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x0f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x09, 0x61, 0x6e, 0x79, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x8a, 0x01, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x63, 0x74, 0x48, 0x00, 0x52, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x64, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x78, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61,
	0x78, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0xb7, 0x01, 0x0a,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0xa5, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0x9b,
	0x01, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65,
	0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0x9b, 0x01, 0x0a,
	0x03, 0x4d, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70,
	0x61, 0x74, 0x68, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0x9b, 0x01, 0x0a, 0x03, 0x4d,
	0x61, 0x78, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74,
	0x68, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0x9b, 0x01, 0x0a, 0x03, 0x41, 0x76, 0x67,
	0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0x9e, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x44, 0x65,
	0x76, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0xa4, 0x01, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0xa0,
	0x01, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x1a, 0xa6, 0x01, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70,
	0x61, 0x74, 0x68, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0xc3, 0x02, 0x0a, 0x0a, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x53, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x1a, 0xa0, 0x01, 0x0a, 0x08, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x1a, 0xe5, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x48, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79,
	0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0xa7, 0x02, 0x0a, 0x07,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xec, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x4a,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x6e, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12,
	0x59, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x1a, 0xa8, 0x01, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79,
	0x70, 0x61, 0x74, 0x68, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0x44, 0x0a, 0x05, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x7d, 0x0a, 0x10, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x1a, 0xe3, 0x01, 0x0a, 0x06, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x12, 0x51, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x46,
	0x0a, 0x04, 0x69, 0x6e, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68,
	0x52, 0x04, 0x69, 0x6e, 0x74, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_dataprime_ast_v1_query_proto_rawDescOnce sync.Once
	file_com_coralogix_dataprime_ast_v1_query_proto_rawDescData = file_com_coralogix_dataprime_ast_v1_query_proto_rawDesc
)

func file_com_coralogix_dataprime_ast_v1_query_proto_rawDescGZIP() []byte {
	file_com_coralogix_dataprime_ast_v1_query_proto_rawDescOnce.Do(func() {
		file_com_coralogix_dataprime_ast_v1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_dataprime_ast_v1_query_proto_rawDescData)
	})
	return file_com_coralogix_dataprime_ast_v1_query_proto_rawDescData
}

var file_com_coralogix_dataprime_ast_v1_query_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_com_coralogix_dataprime_ast_v1_query_proto_goTypes = []any{
	(Operator_OrderBy_OrderByExpression_Order)(0), // 0: com.coralogix.dataprime.ast.v1.Operator.OrderBy.OrderByExpression.Order
	(*Query)(nil),                                                // 1: com.coralogix.dataprime.ast.v1.Query
	(*Source)(nil),                                               // 2: com.coralogix.dataprime.ast.v1.Source
	(*Logs)(nil),                                                 // 3: com.coralogix.dataprime.ast.v1.Logs
	(*Spans)(nil),                                                // 4: com.coralogix.dataprime.ast.v1.Spans
	(*CustomDataset)(nil),                                        // 5: com.coralogix.dataprime.ast.v1.CustomDataset
	(*CustomEnrichment)(nil),                                     // 6: com.coralogix.dataprime.ast.v1.CustomEnrichment
	(*TimeFrame)(nil),                                            // 7: com.coralogix.dataprime.ast.v1.TimeFrame
	(*Schema)(nil),                                               // 8: com.coralogix.dataprime.ast.v1.Schema
	(*Operator)(nil),                                             // 9: com.coralogix.dataprime.ast.v1.Operator
	(*TimeFrame_Absolute)(nil),                                   // 10: com.coralogix.dataprime.ast.v1.TimeFrame.Absolute
	(*Operator_Filter)(nil),                                      // 11: com.coralogix.dataprime.ast.v1.Operator.Filter
	(*Operator_Create)(nil),                                      // 12: com.coralogix.dataprime.ast.v1.Operator.Create
	(*Operator_Move)(nil),                                        // 13: com.coralogix.dataprime.ast.v1.Operator.Move
	(*Operator_Remove)(nil),                                      // 14: com.coralogix.dataprime.ast.v1.Operator.Remove
	(*Operator_Replace)(nil),                                     // 15: com.coralogix.dataprime.ast.v1.Operator.Replace
	(*Operator_Redact)(nil),                                      // 16: com.coralogix.dataprime.ast.v1.Operator.Redact
	(*Operator_Choose)(nil),                                      // 17: com.coralogix.dataprime.ast.v1.Operator.Choose
	(*Operator_Convert)(nil),                                     // 18: com.coralogix.dataprime.ast.v1.Operator.Convert
	(*Operator_Extract)(nil),                                     // 19: com.coralogix.dataprime.ast.v1.Operator.Extract
	(*Operator_Limit)(nil),                                       // 20: com.coralogix.dataprime.ast.v1.Operator.Limit
	(*Operator_OrderBy)(nil),                                     // 21: com.coralogix.dataprime.ast.v1.Operator.OrderBy
	(*Operator_GroupBy)(nil),                                     // 22: com.coralogix.dataprime.ast.v1.Operator.GroupBy
	(*Operator_Union)(nil),                                       // 23: com.coralogix.dataprime.ast.v1.Operator.Union
	(*Operator_EnrichmentSource)(nil),                            // 24: com.coralogix.dataprime.ast.v1.Operator.EnrichmentSource
	(*Operator_Enrich)(nil),                                      // 25: com.coralogix.dataprime.ast.v1.Operator.Enrich
	(*Operator_Choose_Chosen)(nil),                               // 26: com.coralogix.dataprime.ast.v1.Operator.Choose.Chosen
	(*Operator_Extract_ExtractRegex)(nil),                        // 27: com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractRegex
	(*Operator_Extract_ExtractMultiRegex)(nil),                   // 28: com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractMultiRegex
	(*Operator_Extract_ExtractKeyValue)(nil),                     // 29: com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractKeyValue
	(*Operator_Extract_ExtractDelimited)(nil),                    // 30: com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractDelimited
	(*Operator_Extract_ExtractJson)(nil),                         // 31: com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractJson
	(*Operator_OrderBy_OrderByExpression)(nil),                   // 32: com.coralogix.dataprime.ast.v1.Operator.OrderBy.OrderByExpression
	(*Operator_GroupBy_GroupByFunction)(nil),                     // 33: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction
	(*Operator_GroupBy_GroupingSet)(nil),                         // 34: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupingSet
	(*Operator_GroupBy_GroupingSetField)(nil),                    // 35: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupingSetField
	(*Operator_GroupBy_GroupByFunction_Count)(nil),               // 36: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Count
	(*Operator_GroupBy_GroupByFunction_DistinctCount)(nil),       // 37: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.DistinctCount
	(*Operator_GroupBy_GroupByFunction_Sum)(nil),                 // 38: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Sum
	(*Operator_GroupBy_GroupByFunction_Min)(nil),                 // 39: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Min
	(*Operator_GroupBy_GroupByFunction_Max)(nil),                 // 40: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Max
	(*Operator_GroupBy_GroupByFunction_Avg)(nil),                 // 41: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Avg
	(*Operator_GroupBy_GroupByFunction_StdDev)(nil),              // 42: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.StdDev
	(*Operator_GroupBy_GroupByFunction_SampleStdDev)(nil),        // 43: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.SampleStdDev
	(*Operator_GroupBy_GroupByFunction_Variance)(nil),            // 44: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Variance
	(*Operator_GroupBy_GroupByFunction_SampleVariance)(nil),      // 45: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.SampleVariance
	(*Operator_GroupBy_GroupByFunction_Percentile)(nil),          // 46: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Percentile
	(*Operator_GroupBy_GroupByFunction_AnyValue)(nil),            // 47: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.AnyValue
	(*Operator_GroupBy_GroupByFunction_ApproxCountDistinct)(nil), // 48: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.ApproxCountDistinct
	(*Operator_GroupBy_GroupByFunction_Collect)(nil),             // 49: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Collect
	(*Operator_GroupBy_GroupByFunction_MaxByInternal)(nil),       // 50: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.MaxByInternal
	(*wrapperspb.StringValue)(nil),                               // 51: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),                                // 52: google.protobuf.Timestamp
	(*Expression)(nil),                                           // 53: com.coralogix.dataprime.ast.v1.Expression
	(*Expression_Keypath)(nil),                                   // 54: com.coralogix.dataprime.ast.v1.Expression.Keypath
	(*Expression_Match)(nil),                                     // 55: com.coralogix.dataprime.ast.v1.Expression.Match
	(*KeypathType)(nil),                                          // 56: com.coralogix.dataprime.ast.v1.KeypathType
	(*wrapperspb.Int32Value)(nil),                                // 57: google.protobuf.Int32Value
	(*Expression_Regex)(nil),                                     // 58: com.coralogix.dataprime.ast.v1.Expression.Regex
	(Datatype_PrimitiveType)(0),                                  // 59: com.coralogix.dataprime.ast.v1.Datatype.PrimitiveType
}
var file_com_coralogix_dataprime_ast_v1_query_proto_depIdxs = []int32{
	2,   // 0: com.coralogix.dataprime.ast.v1.Query.source:type_name -> com.coralogix.dataprime.ast.v1.Source
	9,   // 1: com.coralogix.dataprime.ast.v1.Query.operators:type_name -> com.coralogix.dataprime.ast.v1.Operator
	3,   // 2: com.coralogix.dataprime.ast.v1.Source.logs:type_name -> com.coralogix.dataprime.ast.v1.Logs
	4,   // 3: com.coralogix.dataprime.ast.v1.Source.spans:type_name -> com.coralogix.dataprime.ast.v1.Spans
	5,   // 4: com.coralogix.dataprime.ast.v1.Source.custom_dataset:type_name -> com.coralogix.dataprime.ast.v1.CustomDataset
	6,   // 5: com.coralogix.dataprime.ast.v1.Source.custom_enrichment:type_name -> com.coralogix.dataprime.ast.v1.CustomEnrichment
	8,   // 6: com.coralogix.dataprime.ast.v1.Source.schema:type_name -> com.coralogix.dataprime.ast.v1.Schema
	7,   // 7: com.coralogix.dataprime.ast.v1.Logs.time_frame:type_name -> com.coralogix.dataprime.ast.v1.TimeFrame
	7,   // 8: com.coralogix.dataprime.ast.v1.Spans.time_frame:type_name -> com.coralogix.dataprime.ast.v1.TimeFrame
	51,  // 9: com.coralogix.dataprime.ast.v1.CustomDataset.name:type_name -> google.protobuf.StringValue
	7,   // 10: com.coralogix.dataprime.ast.v1.CustomDataset.time_frame:type_name -> com.coralogix.dataprime.ast.v1.TimeFrame
	51,  // 11: com.coralogix.dataprime.ast.v1.CustomEnrichment.name:type_name -> google.protobuf.StringValue
	7,   // 12: com.coralogix.dataprime.ast.v1.CustomEnrichment.time_frame:type_name -> com.coralogix.dataprime.ast.v1.TimeFrame
	10,  // 13: com.coralogix.dataprime.ast.v1.TimeFrame.absolute:type_name -> com.coralogix.dataprime.ast.v1.TimeFrame.Absolute
	11,  // 14: com.coralogix.dataprime.ast.v1.Operator.filter:type_name -> com.coralogix.dataprime.ast.v1.Operator.Filter
	12,  // 15: com.coralogix.dataprime.ast.v1.Operator.create:type_name -> com.coralogix.dataprime.ast.v1.Operator.Create
	13,  // 16: com.coralogix.dataprime.ast.v1.Operator.move:type_name -> com.coralogix.dataprime.ast.v1.Operator.Move
	14,  // 17: com.coralogix.dataprime.ast.v1.Operator.remove:type_name -> com.coralogix.dataprime.ast.v1.Operator.Remove
	15,  // 18: com.coralogix.dataprime.ast.v1.Operator.replace:type_name -> com.coralogix.dataprime.ast.v1.Operator.Replace
	16,  // 19: com.coralogix.dataprime.ast.v1.Operator.redact:type_name -> com.coralogix.dataprime.ast.v1.Operator.Redact
	17,  // 20: com.coralogix.dataprime.ast.v1.Operator.choose:type_name -> com.coralogix.dataprime.ast.v1.Operator.Choose
	18,  // 21: com.coralogix.dataprime.ast.v1.Operator.convert:type_name -> com.coralogix.dataprime.ast.v1.Operator.Convert
	19,  // 22: com.coralogix.dataprime.ast.v1.Operator.extract:type_name -> com.coralogix.dataprime.ast.v1.Operator.Extract
	20,  // 23: com.coralogix.dataprime.ast.v1.Operator.limit:type_name -> com.coralogix.dataprime.ast.v1.Operator.Limit
	21,  // 24: com.coralogix.dataprime.ast.v1.Operator.order_by:type_name -> com.coralogix.dataprime.ast.v1.Operator.OrderBy
	22,  // 25: com.coralogix.dataprime.ast.v1.Operator.group_by:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy
	23,  // 26: com.coralogix.dataprime.ast.v1.Operator.union:type_name -> com.coralogix.dataprime.ast.v1.Operator.Union
	25,  // 27: com.coralogix.dataprime.ast.v1.Operator.enrich:type_name -> com.coralogix.dataprime.ast.v1.Operator.Enrich
	52,  // 28: com.coralogix.dataprime.ast.v1.TimeFrame.Absolute.from:type_name -> google.protobuf.Timestamp
	52,  // 29: com.coralogix.dataprime.ast.v1.TimeFrame.Absolute.to:type_name -> google.protobuf.Timestamp
	53,  // 30: com.coralogix.dataprime.ast.v1.Operator.Filter.condition:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 31: com.coralogix.dataprime.ast.v1.Operator.Create.path:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 32: com.coralogix.dataprime.ast.v1.Operator.Create.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 33: com.coralogix.dataprime.ast.v1.Operator.Move.from:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	54,  // 34: com.coralogix.dataprime.ast.v1.Operator.Move.to:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	54,  // 35: com.coralogix.dataprime.ast.v1.Operator.Remove.targets:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	54,  // 36: com.coralogix.dataprime.ast.v1.Operator.Replace.path:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 37: com.coralogix.dataprime.ast.v1.Operator.Replace.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 38: com.coralogix.dataprime.ast.v1.Operator.Redact.path:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	55,  // 39: com.coralogix.dataprime.ast.v1.Operator.Redact.match:type_name -> com.coralogix.dataprime.ast.v1.Expression.Match
	53,  // 40: com.coralogix.dataprime.ast.v1.Operator.Redact.replacement:type_name -> com.coralogix.dataprime.ast.v1.Expression
	26,  // 41: com.coralogix.dataprime.ast.v1.Operator.Choose.fields:type_name -> com.coralogix.dataprime.ast.v1.Operator.Choose.Chosen
	56,  // 42: com.coralogix.dataprime.ast.v1.Operator.Convert.conversions:type_name -> com.coralogix.dataprime.ast.v1.KeypathType
	53,  // 43: com.coralogix.dataprime.ast.v1.Operator.Extract.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 44: com.coralogix.dataprime.ast.v1.Operator.Extract.into:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	56,  // 45: com.coralogix.dataprime.ast.v1.Operator.Extract.datatypes:type_name -> com.coralogix.dataprime.ast.v1.KeypathType
	27,  // 46: com.coralogix.dataprime.ast.v1.Operator.Extract.regex:type_name -> com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractRegex
	29,  // 47: com.coralogix.dataprime.ast.v1.Operator.Extract.key_value:type_name -> com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractKeyValue
	30,  // 48: com.coralogix.dataprime.ast.v1.Operator.Extract.delimited:type_name -> com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractDelimited
	31,  // 49: com.coralogix.dataprime.ast.v1.Operator.Extract.json:type_name -> com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractJson
	28,  // 50: com.coralogix.dataprime.ast.v1.Operator.Extract.multi_regex:type_name -> com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractMultiRegex
	57,  // 51: com.coralogix.dataprime.ast.v1.Operator.Limit.event_count:type_name -> google.protobuf.Int32Value
	32,  // 52: com.coralogix.dataprime.ast.v1.Operator.OrderBy.expressions:type_name -> com.coralogix.dataprime.ast.v1.Operator.OrderBy.OrderByExpression
	33,  // 53: com.coralogix.dataprime.ast.v1.Operator.GroupBy.functions:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction
	34,  // 54: com.coralogix.dataprime.ast.v1.Operator.GroupBy.groupings:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupingSet
	1,   // 55: com.coralogix.dataprime.ast.v1.Operator.Union.query:type_name -> com.coralogix.dataprime.ast.v1.Query
	6,   // 56: com.coralogix.dataprime.ast.v1.Operator.EnrichmentSource.custom_enrichment:type_name -> com.coralogix.dataprime.ast.v1.CustomEnrichment
	24,  // 57: com.coralogix.dataprime.ast.v1.Operator.Enrich.source:type_name -> com.coralogix.dataprime.ast.v1.Operator.EnrichmentSource
	53,  // 58: com.coralogix.dataprime.ast.v1.Operator.Enrich.left:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 59: com.coralogix.dataprime.ast.v1.Operator.Enrich.into:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 60: com.coralogix.dataprime.ast.v1.Operator.Choose.Chosen.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 61: com.coralogix.dataprime.ast.v1.Operator.Choose.Chosen.as:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	58,  // 62: com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractRegex.regex:type_name -> com.coralogix.dataprime.ast.v1.Expression.Regex
	58,  // 63: com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractMultiRegex.regex:type_name -> com.coralogix.dataprime.ast.v1.Expression.Regex
	51,  // 64: com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractKeyValue.pair_delimiter:type_name -> google.protobuf.StringValue
	51,  // 65: com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractKeyValue.key_delimiter:type_name -> google.protobuf.StringValue
	51,  // 66: com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractKeyValue.quote_char_value:type_name -> google.protobuf.StringValue
	51,  // 67: com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractDelimited.delimiter:type_name -> google.protobuf.StringValue
	59,  // 68: com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractDelimited.type:type_name -> com.coralogix.dataprime.ast.v1.Datatype.PrimitiveType
	57,  // 69: com.coralogix.dataprime.ast.v1.Operator.Extract.ExtractJson.max_unescape_count:type_name -> google.protobuf.Int32Value
	53,  // 70: com.coralogix.dataprime.ast.v1.Operator.OrderBy.OrderByExpression.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	0,   // 71: com.coralogix.dataprime.ast.v1.Operator.OrderBy.OrderByExpression.order:type_name -> com.coralogix.dataprime.ast.v1.Operator.OrderBy.OrderByExpression.Order
	36,  // 72: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.count:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Count
	37,  // 73: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.distinct_count:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.DistinctCount
	38,  // 74: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.sum:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Sum
	39,  // 75: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.min:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Min
	40,  // 76: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.max:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Max
	41,  // 77: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.avg:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Avg
	42,  // 78: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.stddev:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.StdDev
	43,  // 79: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.sample_stddev:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.SampleStdDev
	44,  // 80: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.variance:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Variance
	45,  // 81: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.sample_variance:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.SampleVariance
	46,  // 82: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.percentile:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Percentile
	47,  // 83: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.any_value:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.AnyValue
	48,  // 84: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.approx_count_distinct:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.ApproxCountDistinct
	49,  // 85: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.collect:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Collect
	50,  // 86: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.max_by_internal:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.MaxByInternal
	35,  // 87: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupingSet.fields:type_name -> com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupingSetField
	53,  // 88: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupingSetField.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 89: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupingSetField.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 90: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Count.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 91: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Count.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 92: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.DistinctCount.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 93: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.DistinctCount.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 94: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Sum.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 95: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Sum.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 96: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Min.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 97: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Min.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 98: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Max.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 99: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Max.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 100: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Avg.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 101: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Avg.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 102: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.StdDev.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 103: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.StdDev.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 104: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.SampleStdDev.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 105: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.SampleStdDev.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 106: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Variance.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 107: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Variance.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 108: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.SampleVariance.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 109: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.SampleVariance.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 110: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Percentile.percentile:type_name -> com.coralogix.dataprime.ast.v1.Expression
	53,  // 111: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Percentile.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	53,  // 112: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Percentile.error_threshold:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 113: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Percentile.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 114: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.AnyValue.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 115: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.AnyValue.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 116: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.ApproxCountDistinct.value:type_name -> com.coralogix.dataprime.ast.v1.Expression
	53,  // 117: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.ApproxCountDistinct.values:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 118: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.ApproxCountDistinct.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 119: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Collect.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	53,  // 120: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Collect.order_by:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 121: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.Collect.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	53,  // 122: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.MaxByInternal.sort_key:type_name -> com.coralogix.dataprime.ast.v1.Expression
	53,  // 123: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.MaxByInternal.expression:type_name -> com.coralogix.dataprime.ast.v1.Expression
	54,  // 124: com.coralogix.dataprime.ast.v1.Operator.GroupBy.GroupByFunction.MaxByInternal.alias:type_name -> com.coralogix.dataprime.ast.v1.Expression.Keypath
	125, // [125:125] is the sub-list for method output_type
	125, // [125:125] is the sub-list for method input_type
	125, // [125:125] is the sub-list for extension type_name
	125, // [125:125] is the sub-list for extension extendee
	0,   // [0:125] is the sub-list for field type_name
}

func init() { file_com_coralogix_dataprime_ast_v1_query_proto_init() }
func file_com_coralogix_dataprime_ast_v1_query_proto_init() {
	if File_com_coralogix_dataprime_ast_v1_query_proto != nil {
		return
	}
	file_com_coralogix_dataprime_ast_v1_expression_proto_init()
	file_com_coralogix_dataprime_ast_v1_misc_proto_init()
	file_com_coralogix_dataprime_ast_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Logs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Spans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CustomDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CustomEnrichment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TimeFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TimeFrame_Absolute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Create); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Move); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Remove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Replace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Redact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Choose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Convert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Extract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Limit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_OrderBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Union); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_EnrichmentSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Enrich); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Choose_Chosen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Extract_ExtractRegex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Extract_ExtractMultiRegex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Extract_ExtractKeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Extract_ExtractDelimited); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_Extract_ExtractJson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_OrderBy_OrderByExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupingSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupingSetField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_Count); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_DistinctCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_Sum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_Min); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_Max); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_Avg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_StdDev); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_SampleStdDev); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_Variance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_SampleVariance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_Percentile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_AnyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_ApproxCountDistinct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_Collect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*Operator_GroupBy_GroupByFunction_MaxByInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[1].OneofWrappers = []any{
		(*Source_Logs)(nil),
		(*Source_Spans)(nil),
		(*Source_CustomDataset)(nil),
		(*Source_CustomEnrichment)(nil),
		(*Source_Schema)(nil),
	}
	file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[2].OneofWrappers = []any{}
	file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[3].OneofWrappers = []any{}
	file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[4].OneofWrappers = []any{}
	file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[5].OneofWrappers = []any{}
	file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[6].OneofWrappers = []any{
		(*TimeFrame_Absolute_)(nil),
	}
	file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[8].OneofWrappers = []any{
		(*Operator_Filter_)(nil),
		(*Operator_Create_)(nil),
		(*Operator_Move_)(nil),
		(*Operator_Remove_)(nil),
		(*Operator_Replace_)(nil),
		(*Operator_Redact_)(nil),
		(*Operator_Choose_)(nil),
		(*Operator_Convert_)(nil),
		(*Operator_Extract_)(nil),
		(*Operator_Limit_)(nil),
		(*Operator_OrderBy_)(nil),
		(*Operator_GroupBy_)(nil),
		(*Operator_Union_)(nil),
		(*Operator_Enrich_)(nil),
	}
	file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[18].OneofWrappers = []any{
		(*Operator_Extract_Regex)(nil),
		(*Operator_Extract_KeyValue)(nil),
		(*Operator_Extract_Delimited)(nil),
		(*Operator_Extract_Json)(nil),
		(*Operator_Extract_MultiRegex)(nil),
	}
	file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[23].OneofWrappers = []any{
		(*Operator_EnrichmentSource_CustomEnrichment)(nil),
	}
	file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[32].OneofWrappers = []any{
		(*Operator_GroupBy_GroupByFunction_Count_)(nil),
		(*Operator_GroupBy_GroupByFunction_DistinctCount_)(nil),
		(*Operator_GroupBy_GroupByFunction_Sum_)(nil),
		(*Operator_GroupBy_GroupByFunction_Min_)(nil),
		(*Operator_GroupBy_GroupByFunction_Max_)(nil),
		(*Operator_GroupBy_GroupByFunction_Avg_)(nil),
		(*Operator_GroupBy_GroupByFunction_Stddev)(nil),
		(*Operator_GroupBy_GroupByFunction_SampleStddev)(nil),
		(*Operator_GroupBy_GroupByFunction_Variance_)(nil),
		(*Operator_GroupBy_GroupByFunction_SampleVariance_)(nil),
		(*Operator_GroupBy_GroupByFunction_Percentile_)(nil),
		(*Operator_GroupBy_GroupByFunction_AnyValue_)(nil),
		(*Operator_GroupBy_GroupByFunction_ApproxCountDistinct_)(nil),
		(*Operator_GroupBy_GroupByFunction_Collect_)(nil),
		(*Operator_GroupBy_GroupByFunction_MaxByInternal_)(nil),
	}
	file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[35].OneofWrappers = []any{}
	file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes[48].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_dataprime_ast_v1_query_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_dataprime_ast_v1_query_proto_goTypes,
		DependencyIndexes: file_com_coralogix_dataprime_ast_v1_query_proto_depIdxs,
		EnumInfos:         file_com_coralogix_dataprime_ast_v1_query_proto_enumTypes,
		MessageInfos:      file_com_coralogix_dataprime_ast_v1_query_proto_msgTypes,
	}.Build()
	File_com_coralogix_dataprime_ast_v1_query_proto = out.File
	file_com_coralogix_dataprime_ast_v1_query_proto_rawDesc = nil
	file_com_coralogix_dataprime_ast_v1_query_proto_goTypes = nil
	file_com_coralogix_dataprime_ast_v1_query_proto_depIdxs = nil
}
