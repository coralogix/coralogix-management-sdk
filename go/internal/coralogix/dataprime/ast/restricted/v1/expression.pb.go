// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: com/coralogix/dataprime/ast/restricted/v1/expression.proto

package v1

import (
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Expression_Keypath_Root int32

const (
	Expression_Keypath_ROOT_UNSPECIFIED    Expression_Keypath_Root = 0
	Expression_Keypath_ROOT_EVENT_LABELS   Expression_Keypath_Root = 1
	Expression_Keypath_ROOT_EVENT_METADATA Expression_Keypath_Root = 2
	Expression_Keypath_ROOT_USER_DATA      Expression_Keypath_Root = 3
)

// Enum value maps for Expression_Keypath_Root.
var (
	Expression_Keypath_Root_name = map[int32]string{
		0: "ROOT_UNSPECIFIED",
		1: "ROOT_EVENT_LABELS",
		2: "ROOT_EVENT_METADATA",
		3: "ROOT_USER_DATA",
	}
	Expression_Keypath_Root_value = map[string]int32{
		"ROOT_UNSPECIFIED":    0,
		"ROOT_EVENT_LABELS":   1,
		"ROOT_EVENT_METADATA": 2,
		"ROOT_USER_DATA":      3,
	}
)

func (x Expression_Keypath_Root) Enum() *Expression_Keypath_Root {
	p := new(Expression_Keypath_Root)
	*p = x
	return p
}

func (x Expression_Keypath_Root) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Expression_Keypath_Root) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_enumTypes[0].Descriptor()
}

func (Expression_Keypath_Root) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_enumTypes[0]
}

func (x Expression_Keypath_Root) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Expression_Keypath_Root.Descriptor instead.
func (Expression_Keypath_Root) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP(), []int{0, 1, 0}
}

type Expression_InfixOp_Op int32

const (
	Expression_InfixOp_OP_UNSPECIFIED Expression_InfixOp_Op = 0
	Expression_InfixOp_OP_AND         Expression_InfixOp_Op = 1
	Expression_InfixOp_OP_OR          Expression_InfixOp_Op = 2
	Expression_InfixOp_OP_EQ          Expression_InfixOp_Op = 3
	Expression_InfixOp_OP_NEQ         Expression_InfixOp_Op = 4
	Expression_InfixOp_OP_LT          Expression_InfixOp_Op = 5
	Expression_InfixOp_OP_LTE         Expression_InfixOp_Op = 6
	Expression_InfixOp_OP_GT          Expression_InfixOp_Op = 7
	Expression_InfixOp_OP_GTE         Expression_InfixOp_Op = 8
)

// Enum value maps for Expression_InfixOp_Op.
var (
	Expression_InfixOp_Op_name = map[int32]string{
		0: "OP_UNSPECIFIED",
		1: "OP_AND",
		2: "OP_OR",
		3: "OP_EQ",
		4: "OP_NEQ",
		5: "OP_LT",
		6: "OP_LTE",
		7: "OP_GT",
		8: "OP_GTE",
	}
	Expression_InfixOp_Op_value = map[string]int32{
		"OP_UNSPECIFIED": 0,
		"OP_AND":         1,
		"OP_OR":          2,
		"OP_EQ":          3,
		"OP_NEQ":         4,
		"OP_LT":          5,
		"OP_LTE":         6,
		"OP_GT":          7,
		"OP_GTE":         8,
	}
)

func (x Expression_InfixOp_Op) Enum() *Expression_InfixOp_Op {
	p := new(Expression_InfixOp_Op)
	*p = x
	return p
}

func (x Expression_InfixOp_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Expression_InfixOp_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_enumTypes[1].Descriptor()
}

func (Expression_InfixOp_Op) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_enumTypes[1]
}

func (x Expression_InfixOp_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Expression_InfixOp_Op.Descriptor instead.
func (Expression_InfixOp_Op) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP(), []int{0, 2, 0}
}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datatype *Datatype `protobuf:"bytes,1,opt,name=datatype,proto3" json:"datatype,omitempty"`
	// Types that are assignable to Expression:
	//
	//	*Expression_NullE
	//	*Expression_Keypath_
	//	*Expression_Boolean
	//	*Expression_Integer
	//	*Expression_Str
	//	*Expression_InfixOp_
	//	*Expression_Not_
	//	*Expression_FunctionCall_
	//	*Expression_Long
	//	*Expression_Double
	//	*Expression_Timestamp_
	Expression isExpression_Expression `protobuf_oneof:"expression"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP(), []int{0}
}

func (x *Expression) GetDatatype() *Datatype {
	if x != nil {
		return x.Datatype
	}
	return nil
}

func (m *Expression) GetExpression() isExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (x *Expression) GetNullE() *Expression_Null {
	if x, ok := x.GetExpression().(*Expression_NullE); ok {
		return x.NullE
	}
	return nil
}

func (x *Expression) GetKeypath() *Expression_Keypath {
	if x, ok := x.GetExpression().(*Expression_Keypath_); ok {
		return x.Keypath
	}
	return nil
}

func (x *Expression) GetBoolean() *wrappers.BoolValue {
	if x, ok := x.GetExpression().(*Expression_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Expression) GetInteger() *wrappers.Int32Value {
	if x, ok := x.GetExpression().(*Expression_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Expression) GetStr() *wrappers.StringValue {
	if x, ok := x.GetExpression().(*Expression_Str); ok {
		return x.Str
	}
	return nil
}

func (x *Expression) GetInfixOp() *Expression_InfixOp {
	if x, ok := x.GetExpression().(*Expression_InfixOp_); ok {
		return x.InfixOp
	}
	return nil
}

func (x *Expression) GetNot() *Expression_Not {
	if x, ok := x.GetExpression().(*Expression_Not_); ok {
		return x.Not
	}
	return nil
}

func (x *Expression) GetFunctionCall() *Expression_FunctionCall {
	if x, ok := x.GetExpression().(*Expression_FunctionCall_); ok {
		return x.FunctionCall
	}
	return nil
}

func (x *Expression) GetLong() *wrappers.Int64Value {
	if x, ok := x.GetExpression().(*Expression_Long); ok {
		return x.Long
	}
	return nil
}

func (x *Expression) GetDouble() *wrappers.DoubleValue {
	if x, ok := x.GetExpression().(*Expression_Double); ok {
		return x.Double
	}
	return nil
}

func (x *Expression) GetTimestamp() *Expression_Timestamp {
	if x, ok := x.GetExpression().(*Expression_Timestamp_); ok {
		return x.Timestamp
	}
	return nil
}

type isExpression_Expression interface {
	isExpression_Expression()
}

type Expression_NullE struct {
	NullE *Expression_Null `protobuf:"bytes,2,opt,name=null_e,json=nullE,proto3,oneof"`
}

type Expression_Keypath_ struct {
	Keypath *Expression_Keypath `protobuf:"bytes,3,opt,name=keypath,proto3,oneof"`
}

type Expression_Boolean struct {
	Boolean *wrappers.BoolValue `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type Expression_Integer struct {
	Integer *wrappers.Int32Value `protobuf:"bytes,5,opt,name=integer,proto3,oneof"`
}

type Expression_Str struct {
	Str *wrappers.StringValue `protobuf:"bytes,6,opt,name=str,proto3,oneof"`
}

type Expression_InfixOp_ struct {
	InfixOp *Expression_InfixOp `protobuf:"bytes,7,opt,name=infix_op,json=infixOp,proto3,oneof"`
}

type Expression_Not_ struct {
	Not *Expression_Not `protobuf:"bytes,8,opt,name=not,proto3,oneof"`
}

type Expression_FunctionCall_ struct {
	FunctionCall *Expression_FunctionCall `protobuf:"bytes,9,opt,name=function_call,json=functionCall,proto3,oneof"`
}

type Expression_Long struct {
	Long *wrappers.Int64Value `protobuf:"bytes,11,opt,name=long,proto3,oneof"`
}

type Expression_Double struct {
	Double *wrappers.DoubleValue `protobuf:"bytes,12,opt,name=double,proto3,oneof"`
}

type Expression_Timestamp_ struct {
	Timestamp *Expression_Timestamp `protobuf:"bytes,13,opt,name=timestamp,proto3,oneof"`
}

func (*Expression_NullE) isExpression_Expression() {}

func (*Expression_Keypath_) isExpression_Expression() {}

func (*Expression_Boolean) isExpression_Expression() {}

func (*Expression_Integer) isExpression_Expression() {}

func (*Expression_Str) isExpression_Expression() {}

func (*Expression_InfixOp_) isExpression_Expression() {}

func (*Expression_Not_) isExpression_Expression() {}

func (*Expression_FunctionCall_) isExpression_Expression() {}

func (*Expression_Long) isExpression_Expression() {}

func (*Expression_Double) isExpression_Expression() {}

func (*Expression_Timestamp_) isExpression_Expression() {}

type Expression_Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Expression_Null) Reset() {
	*x = Expression_Null{}
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression_Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Null) ProtoMessage() {}

func (x *Expression_Null) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Null.ProtoReflect.Descriptor instead.
func (*Expression_Null) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP(), []int{0, 0}
}

type Expression_Keypath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root         Expression_Keypath_Root `protobuf:"varint,1,opt,name=root,proto3,enum=com.coralogix.dataprime.ast.restricted.v1.Expression_Keypath_Root" json:"root,omitempty"`
	PathElements []*wrappers.StringValue `protobuf:"bytes,2,rep,name=path_elements,json=pathElements,proto3" json:"path_elements,omitempty"`
	Datatype     *Datatype               `protobuf:"bytes,3,opt,name=datatype,proto3" json:"datatype,omitempty"`
}

func (x *Expression_Keypath) Reset() {
	*x = Expression_Keypath{}
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression_Keypath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Keypath) ProtoMessage() {}

func (x *Expression_Keypath) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Keypath.ProtoReflect.Descriptor instead.
func (*Expression_Keypath) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Expression_Keypath) GetRoot() Expression_Keypath_Root {
	if x != nil {
		return x.Root
	}
	return Expression_Keypath_ROOT_UNSPECIFIED
}

func (x *Expression_Keypath) GetPathElements() []*wrappers.StringValue {
	if x != nil {
		return x.PathElements
	}
	return nil
}

func (x *Expression_Keypath) GetDatatype() *Datatype {
	if x != nil {
		return x.Datatype
	}
	return nil
}

type Expression_InfixOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *Expression           `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Op    Expression_InfixOp_Op `protobuf:"varint,2,opt,name=op,proto3,enum=com.coralogix.dataprime.ast.restricted.v1.Expression_InfixOp_Op" json:"op,omitempty"`
	Right *Expression           `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *Expression_InfixOp) Reset() {
	*x = Expression_InfixOp{}
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression_InfixOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_InfixOp) ProtoMessage() {}

func (x *Expression_InfixOp) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_InfixOp.ProtoReflect.Descriptor instead.
func (*Expression_InfixOp) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Expression_InfixOp) GetLeft() *Expression {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *Expression_InfixOp) GetOp() Expression_InfixOp_Op {
	if x != nil {
		return x.Op
	}
	return Expression_InfixOp_OP_UNSPECIFIED
}

func (x *Expression_InfixOp) GetRight() *Expression {
	if x != nil {
		return x.Right
	}
	return nil
}

type Expression_Not struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *Expression_Not) Reset() {
	*x = Expression_Not{}
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression_Not) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Not) ProtoMessage() {}

func (x *Expression_Not) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Not.ProtoReflect.Descriptor instead.
func (*Expression_Not) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Expression_Not) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type Expression_FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//
	//	*Expression_FunctionCall_Contains_
	//	*Expression_FunctionCall_StartsWith_
	//	*Expression_FunctionCall_EndsWith_
	//	*Expression_FunctionCall_In_
	Function isExpression_FunctionCall_Function `protobuf_oneof:"function"`
}

func (x *Expression_FunctionCall) Reset() {
	*x = Expression_FunctionCall{}
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression_FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_FunctionCall) ProtoMessage() {}

func (x *Expression_FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_FunctionCall.ProtoReflect.Descriptor instead.
func (*Expression_FunctionCall) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP(), []int{0, 4}
}

func (m *Expression_FunctionCall) GetFunction() isExpression_FunctionCall_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *Expression_FunctionCall) GetContains() *Expression_FunctionCall_Contains {
	if x, ok := x.GetFunction().(*Expression_FunctionCall_Contains_); ok {
		return x.Contains
	}
	return nil
}

func (x *Expression_FunctionCall) GetStartsWith() *Expression_FunctionCall_StartsWith {
	if x, ok := x.GetFunction().(*Expression_FunctionCall_StartsWith_); ok {
		return x.StartsWith
	}
	return nil
}

func (x *Expression_FunctionCall) GetEndsWith() *Expression_FunctionCall_EndsWith {
	if x, ok := x.GetFunction().(*Expression_FunctionCall_EndsWith_); ok {
		return x.EndsWith
	}
	return nil
}

func (x *Expression_FunctionCall) GetIn() *Expression_FunctionCall_In {
	if x, ok := x.GetFunction().(*Expression_FunctionCall_In_); ok {
		return x.In
	}
	return nil
}

type isExpression_FunctionCall_Function interface {
	isExpression_FunctionCall_Function()
}

type Expression_FunctionCall_Contains_ struct {
	Contains *Expression_FunctionCall_Contains `protobuf:"bytes,1,opt,name=contains,proto3,oneof"`
}

type Expression_FunctionCall_StartsWith_ struct {
	StartsWith *Expression_FunctionCall_StartsWith `protobuf:"bytes,2,opt,name=starts_with,json=startsWith,proto3,oneof"`
}

type Expression_FunctionCall_EndsWith_ struct {
	EndsWith *Expression_FunctionCall_EndsWith `protobuf:"bytes,3,opt,name=ends_with,json=endsWith,proto3,oneof"`
}

type Expression_FunctionCall_In_ struct {
	In *Expression_FunctionCall_In `protobuf:"bytes,4,opt,name=in,proto3,oneof"`
}

func (*Expression_FunctionCall_Contains_) isExpression_FunctionCall_Function() {}

func (*Expression_FunctionCall_StartsWith_) isExpression_FunctionCall_Function() {}

func (*Expression_FunctionCall_EndsWith_) isExpression_FunctionCall_Function() {}

func (*Expression_FunctionCall_In_) isExpression_FunctionCall_Function() {}

// A timestamp anchored at the Unix epoch (1970-01-01) with nanosecond resolution.
// Earlier timestamps are represented by negative `epoch_nanos`.
// The range of representable timestamps falls roughly within the years 1678 to 2262 (1970 +- 292 years).
type Expression_Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochNanos int64 `protobuf:"varint,1,opt,name=epoch_nanos,json=epochNanos,proto3" json:"epoch_nanos,omitempty"`
}

func (x *Expression_Timestamp) Reset() {
	*x = Expression_Timestamp{}
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression_Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Timestamp) ProtoMessage() {}

func (x *Expression_Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Timestamp.ProtoReflect.Descriptor instead.
func (*Expression_Timestamp) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Expression_Timestamp) GetEpochNanos() int64 {
	if x != nil {
		return x.EpochNanos
	}
	return 0
}

type Expression_FunctionCall_In struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comparand *Expression   `protobuf:"bytes,1,opt,name=comparand,proto3" json:"comparand,omitempty"`
	Value     *Expression   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Values    []*Expression `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Expression_FunctionCall_In) Reset() {
	*x = Expression_FunctionCall_In{}
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression_FunctionCall_In) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_FunctionCall_In) ProtoMessage() {}

func (x *Expression_FunctionCall_In) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_FunctionCall_In.ProtoReflect.Descriptor instead.
func (*Expression_FunctionCall_In) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *Expression_FunctionCall_In) GetComparand() *Expression {
	if x != nil {
		return x.Comparand
	}
	return nil
}

func (x *Expression_FunctionCall_In) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Expression_FunctionCall_In) GetValues() []*Expression {
	if x != nil {
		return x.Values
	}
	return nil
}

type Expression_FunctionCall_Contains struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_   *Expression `protobuf:"bytes,1,opt,name=string,proto3" json:"string,omitempty"`
	Substring *Expression `protobuf:"bytes,2,opt,name=substring,proto3" json:"substring,omitempty"`
}

func (x *Expression_FunctionCall_Contains) Reset() {
	*x = Expression_FunctionCall_Contains{}
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression_FunctionCall_Contains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_FunctionCall_Contains) ProtoMessage() {}

func (x *Expression_FunctionCall_Contains) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_FunctionCall_Contains.ProtoReflect.Descriptor instead.
func (*Expression_FunctionCall_Contains) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *Expression_FunctionCall_Contains) GetString_() *Expression {
	if x != nil {
		return x.String_
	}
	return nil
}

func (x *Expression_FunctionCall_Contains) GetSubstring() *Expression {
	if x != nil {
		return x.Substring
	}
	return nil
}

type Expression_FunctionCall_StartsWith struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ *Expression `protobuf:"bytes,1,opt,name=string,proto3" json:"string,omitempty"`
	Prefix  *Expression `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *Expression_FunctionCall_StartsWith) Reset() {
	*x = Expression_FunctionCall_StartsWith{}
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression_FunctionCall_StartsWith) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_FunctionCall_StartsWith) ProtoMessage() {}

func (x *Expression_FunctionCall_StartsWith) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_FunctionCall_StartsWith.ProtoReflect.Descriptor instead.
func (*Expression_FunctionCall_StartsWith) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP(), []int{0, 4, 2}
}

func (x *Expression_FunctionCall_StartsWith) GetString_() *Expression {
	if x != nil {
		return x.String_
	}
	return nil
}

func (x *Expression_FunctionCall_StartsWith) GetPrefix() *Expression {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type Expression_FunctionCall_EndsWith struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ *Expression `protobuf:"bytes,1,opt,name=string,proto3" json:"string,omitempty"`
	Suffix  *Expression `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
}

func (x *Expression_FunctionCall_EndsWith) Reset() {
	*x = Expression_FunctionCall_EndsWith{}
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression_FunctionCall_EndsWith) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_FunctionCall_EndsWith) ProtoMessage() {}

func (x *Expression_FunctionCall_EndsWith) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_FunctionCall_EndsWith.ProtoReflect.Descriptor instead.
func (*Expression_FunctionCall_EndsWith) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP(), []int{0, 4, 3}
}

func (x *Expression_FunctionCall_EndsWith) GetString_() *Expression {
	if x != nil {
		return x.String_
	}
	return nil
}

func (x *Expression_FunctionCall_EndsWith) GetSuffix() *Expression {
	if x != nil {
		return x.Suffix
	}
	return nil
}

var File_com_coralogix_dataprime_ast_restricted_v1_expression_proto protoreflect.FileDescriptor

var file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2f, 0x61, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0,
	0x17, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53,
	0x0a, 0x06, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x75,
	0x6c, 0x6c, 0x45, 0x12, 0x59, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x70,
	0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36,
	0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x73, 0x74,
	0x72, 0x12, 0x5a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x69, 0x78, 0x5f, 0x6f, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x69, 0x78,
	0x4f, 0x70, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x12, 0x4d, 0x0a,
	0x03, 0x6e, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12, 0x69, 0x0a, 0x0d,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x1a, 0x06, 0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0xd7, 0x02, 0x0a, 0x07,
	0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x12, 0x56, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79,
	0x70, 0x61, 0x74, 0x68, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12,
	0x41, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x4f, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x4f, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x4f, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x03, 0x1a, 0xe9, 0x02, 0x0a, 0x07, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x4f,
	0x70, 0x12, 0x49, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x50, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x6e, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x4b,
	0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x74, 0x0a, 0x02, 0x4f,
	0x70, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x50, 0x5f, 0x45, 0x51, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x4e, 0x45,
	0x51, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x5f, 0x4c, 0x54, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x4c, 0x54, 0x45, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50,
	0x5f, 0x47, 0x54, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x47, 0x54, 0x45, 0x10,
	0x08, 0x1a, 0x5c, 0x0a, 0x03, 0x4e, 0x6f, 0x74, 0x12, 0x55, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0xbd, 0x09, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x69, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x70, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x6a, 0x0a,
	0x09, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x45, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x57, 0x0a, 0x02, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x49, 0x6e, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x6e, 0x1a, 0xf5, 0x01, 0x0a, 0x02, 0x49, 0x6e, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x4b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0xae, 0x01, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xaa, 0x01, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0xa8, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x64,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x2c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x42, 0x0c, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x0a, 0x10,
	0x0b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescOnce sync.Once
	file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescData = file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDesc
)

func file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescGZIP() []byte {
	file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescOnce.Do(func() {
		file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescData)
	})
	return file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDescData
}

var file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_goTypes = []any{
	(Expression_Keypath_Root)(0),               // 0: com.coralogix.dataprime.ast.restricted.v1.Expression.Keypath.Root
	(Expression_InfixOp_Op)(0),                 // 1: com.coralogix.dataprime.ast.restricted.v1.Expression.InfixOp.Op
	(*Expression)(nil),                         // 2: com.coralogix.dataprime.ast.restricted.v1.Expression
	(*Expression_Null)(nil),                    // 3: com.coralogix.dataprime.ast.restricted.v1.Expression.Null
	(*Expression_Keypath)(nil),                 // 4: com.coralogix.dataprime.ast.restricted.v1.Expression.Keypath
	(*Expression_InfixOp)(nil),                 // 5: com.coralogix.dataprime.ast.restricted.v1.Expression.InfixOp
	(*Expression_Not)(nil),                     // 6: com.coralogix.dataprime.ast.restricted.v1.Expression.Not
	(*Expression_FunctionCall)(nil),            // 7: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall
	(*Expression_Timestamp)(nil),               // 8: com.coralogix.dataprime.ast.restricted.v1.Expression.Timestamp
	(*Expression_FunctionCall_In)(nil),         // 9: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.In
	(*Expression_FunctionCall_Contains)(nil),   // 10: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.Contains
	(*Expression_FunctionCall_StartsWith)(nil), // 11: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.StartsWith
	(*Expression_FunctionCall_EndsWith)(nil),   // 12: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.EndsWith
	(*Datatype)(nil),                           // 13: com.coralogix.dataprime.ast.restricted.v1.Datatype
	(*wrappers.BoolValue)(nil),                 // 14: google.protobuf.BoolValue
	(*wrappers.Int32Value)(nil),                // 15: google.protobuf.Int32Value
	(*wrappers.StringValue)(nil),               // 16: google.protobuf.StringValue
	(*wrappers.Int64Value)(nil),                // 17: google.protobuf.Int64Value
	(*wrappers.DoubleValue)(nil),               // 18: google.protobuf.DoubleValue
}
var file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_depIdxs = []int32{
	13, // 0: com.coralogix.dataprime.ast.restricted.v1.Expression.datatype:type_name -> com.coralogix.dataprime.ast.restricted.v1.Datatype
	3,  // 1: com.coralogix.dataprime.ast.restricted.v1.Expression.null_e:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression.Null
	4,  // 2: com.coralogix.dataprime.ast.restricted.v1.Expression.keypath:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression.Keypath
	14, // 3: com.coralogix.dataprime.ast.restricted.v1.Expression.boolean:type_name -> google.protobuf.BoolValue
	15, // 4: com.coralogix.dataprime.ast.restricted.v1.Expression.integer:type_name -> google.protobuf.Int32Value
	16, // 5: com.coralogix.dataprime.ast.restricted.v1.Expression.str:type_name -> google.protobuf.StringValue
	5,  // 6: com.coralogix.dataprime.ast.restricted.v1.Expression.infix_op:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression.InfixOp
	6,  // 7: com.coralogix.dataprime.ast.restricted.v1.Expression.not:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression.Not
	7,  // 8: com.coralogix.dataprime.ast.restricted.v1.Expression.function_call:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall
	17, // 9: com.coralogix.dataprime.ast.restricted.v1.Expression.long:type_name -> google.protobuf.Int64Value
	18, // 10: com.coralogix.dataprime.ast.restricted.v1.Expression.double:type_name -> google.protobuf.DoubleValue
	8,  // 11: com.coralogix.dataprime.ast.restricted.v1.Expression.timestamp:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression.Timestamp
	0,  // 12: com.coralogix.dataprime.ast.restricted.v1.Expression.Keypath.root:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression.Keypath.Root
	16, // 13: com.coralogix.dataprime.ast.restricted.v1.Expression.Keypath.path_elements:type_name -> google.protobuf.StringValue
	13, // 14: com.coralogix.dataprime.ast.restricted.v1.Expression.Keypath.datatype:type_name -> com.coralogix.dataprime.ast.restricted.v1.Datatype
	2,  // 15: com.coralogix.dataprime.ast.restricted.v1.Expression.InfixOp.left:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression
	1,  // 16: com.coralogix.dataprime.ast.restricted.v1.Expression.InfixOp.op:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression.InfixOp.Op
	2,  // 17: com.coralogix.dataprime.ast.restricted.v1.Expression.InfixOp.right:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression
	2,  // 18: com.coralogix.dataprime.ast.restricted.v1.Expression.Not.expression:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression
	10, // 19: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.contains:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.Contains
	11, // 20: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.starts_with:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.StartsWith
	12, // 21: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.ends_with:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.EndsWith
	9,  // 22: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.in:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.In
	2,  // 23: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.In.comparand:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression
	2,  // 24: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.In.value:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression
	2,  // 25: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.In.values:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression
	2,  // 26: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.Contains.string:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression
	2,  // 27: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.Contains.substring:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression
	2,  // 28: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.StartsWith.string:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression
	2,  // 29: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.StartsWith.prefix:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression
	2,  // 30: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.EndsWith.string:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression
	2,  // 31: com.coralogix.dataprime.ast.restricted.v1.Expression.FunctionCall.EndsWith.suffix:type_name -> com.coralogix.dataprime.ast.restricted.v1.Expression
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_init() }
func file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_init() {
	if File_com_coralogix_dataprime_ast_restricted_v1_expression_proto != nil {
		return
	}
	file_com_coralogix_dataprime_ast_restricted_v1_types_proto_init()
	file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[0].OneofWrappers = []any{
		(*Expression_NullE)(nil),
		(*Expression_Keypath_)(nil),
		(*Expression_Boolean)(nil),
		(*Expression_Integer)(nil),
		(*Expression_Str)(nil),
		(*Expression_InfixOp_)(nil),
		(*Expression_Not_)(nil),
		(*Expression_FunctionCall_)(nil),
		(*Expression_Long)(nil),
		(*Expression_Double)(nil),
		(*Expression_Timestamp_)(nil),
	}
	file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes[5].OneofWrappers = []any{
		(*Expression_FunctionCall_Contains_)(nil),
		(*Expression_FunctionCall_StartsWith_)(nil),
		(*Expression_FunctionCall_EndsWith_)(nil),
		(*Expression_FunctionCall_In_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_goTypes,
		DependencyIndexes: file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_depIdxs,
		EnumInfos:         file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_enumTypes,
		MessageInfos:      file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_msgTypes,
	}.Build()
	File_com_coralogix_dataprime_ast_restricted_v1_expression_proto = out.File
	file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_rawDesc = nil
	file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_goTypes = nil
	file_com_coralogix_dataprime_ast_restricted_v1_expression_proto_depIdxs = nil
}
