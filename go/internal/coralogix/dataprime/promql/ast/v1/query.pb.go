// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: com/coralogix/dataprime/promql/ast/v1/query.proto

package v1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VectorOperation_Unary_Op int32

const (
	VectorOperation_Unary_OP_UNSPECIFIED VectorOperation_Unary_Op = 0
	VectorOperation_Unary_OP_PLUS        VectorOperation_Unary_Op = 1
	VectorOperation_Unary_OP_MINUS       VectorOperation_Unary_Op = 2
)

// Enum value maps for VectorOperation_Unary_Op.
var (
	VectorOperation_Unary_Op_name = map[int32]string{
		0: "OP_UNSPECIFIED",
		1: "OP_PLUS",
		2: "OP_MINUS",
	}
	VectorOperation_Unary_Op_value = map[string]int32{
		"OP_UNSPECIFIED": 0,
		"OP_PLUS":        1,
		"OP_MINUS":       2,
	}
)

func (x VectorOperation_Unary_Op) Enum() *VectorOperation_Unary_Op {
	p := new(VectorOperation_Unary_Op)
	*p = x
	return p
}

func (x VectorOperation_Unary_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VectorOperation_Unary_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[0].Descriptor()
}

func (VectorOperation_Unary_Op) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[0]
}

func (x VectorOperation_Unary_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VectorOperation_Unary_Op.Descriptor instead.
func (VectorOperation_Unary_Op) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{1, 0, 0}
}

type VectorOperation_Binary_Op int32

const (
	VectorOperation_Binary_OP_UNSPECIFIED VectorOperation_Binary_Op = 0
	VectorOperation_Binary_OP_ADD         VectorOperation_Binary_Op = 1
	VectorOperation_Binary_OP_SUB         VectorOperation_Binary_Op = 2
	VectorOperation_Binary_OP_MUL         VectorOperation_Binary_Op = 3
	VectorOperation_Binary_OP_DIV         VectorOperation_Binary_Op = 4
	VectorOperation_Binary_OP_MOD         VectorOperation_Binary_Op = 5
	VectorOperation_Binary_OP_ATAN2       VectorOperation_Binary_Op = 6
	VectorOperation_Binary_OP_POW         VectorOperation_Binary_Op = 7
	VectorOperation_Binary_OP_AND         VectorOperation_Binary_Op = 8
	VectorOperation_Binary_OP_OR          VectorOperation_Binary_Op = 9
	VectorOperation_Binary_OP_UNLESS      VectorOperation_Binary_Op = 10
	VectorOperation_Binary_OP_EQ          VectorOperation_Binary_Op = 11
	VectorOperation_Binary_OP_NEQ         VectorOperation_Binary_Op = 12
	VectorOperation_Binary_OP_LT          VectorOperation_Binary_Op = 13
	VectorOperation_Binary_OP_LTE         VectorOperation_Binary_Op = 14
	VectorOperation_Binary_OP_GT          VectorOperation_Binary_Op = 15
	VectorOperation_Binary_OP_GTE         VectorOperation_Binary_Op = 16
	VectorOperation_Binary_OP_EQ_BOOL     VectorOperation_Binary_Op = 17
	VectorOperation_Binary_OP_NEQ_BOOL    VectorOperation_Binary_Op = 18
	VectorOperation_Binary_OP_LT_BOOL     VectorOperation_Binary_Op = 19
	VectorOperation_Binary_OP_LTE_BOOL    VectorOperation_Binary_Op = 20
	VectorOperation_Binary_OP_GT_BOOL     VectorOperation_Binary_Op = 21
	VectorOperation_Binary_OP_GTE_BOOL    VectorOperation_Binary_Op = 22
)

// Enum value maps for VectorOperation_Binary_Op.
var (
	VectorOperation_Binary_Op_name = map[int32]string{
		0:  "OP_UNSPECIFIED",
		1:  "OP_ADD",
		2:  "OP_SUB",
		3:  "OP_MUL",
		4:  "OP_DIV",
		5:  "OP_MOD",
		6:  "OP_ATAN2",
		7:  "OP_POW",
		8:  "OP_AND",
		9:  "OP_OR",
		10: "OP_UNLESS",
		11: "OP_EQ",
		12: "OP_NEQ",
		13: "OP_LT",
		14: "OP_LTE",
		15: "OP_GT",
		16: "OP_GTE",
		17: "OP_EQ_BOOL",
		18: "OP_NEQ_BOOL",
		19: "OP_LT_BOOL",
		20: "OP_LTE_BOOL",
		21: "OP_GT_BOOL",
		22: "OP_GTE_BOOL",
	}
	VectorOperation_Binary_Op_value = map[string]int32{
		"OP_UNSPECIFIED": 0,
		"OP_ADD":         1,
		"OP_SUB":         2,
		"OP_MUL":         3,
		"OP_DIV":         4,
		"OP_MOD":         5,
		"OP_ATAN2":       6,
		"OP_POW":         7,
		"OP_AND":         8,
		"OP_OR":          9,
		"OP_UNLESS":      10,
		"OP_EQ":          11,
		"OP_NEQ":         12,
		"OP_LT":          13,
		"OP_LTE":         14,
		"OP_GT":          15,
		"OP_GTE":         16,
		"OP_EQ_BOOL":     17,
		"OP_NEQ_BOOL":    18,
		"OP_LT_BOOL":     19,
		"OP_LTE_BOOL":    20,
		"OP_GT_BOOL":     21,
		"OP_GTE_BOOL":    22,
	}
)

func (x VectorOperation_Binary_Op) Enum() *VectorOperation_Binary_Op {
	p := new(VectorOperation_Binary_Op)
	*p = x
	return p
}

func (x VectorOperation_Binary_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VectorOperation_Binary_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[1].Descriptor()
}

func (VectorOperation_Binary_Op) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[1]
}

func (x VectorOperation_Binary_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VectorOperation_Binary_Op.Descriptor instead.
func (VectorOperation_Binary_Op) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{1, 1, 0}
}

type VectorOperation_Binary_Grouping_Modifier_Kind int32

const (
	VectorOperation_Binary_Grouping_Modifier_KIND_UNSPECIFIED VectorOperation_Binary_Grouping_Modifier_Kind = 0
	VectorOperation_Binary_Grouping_Modifier_KIND_ON          VectorOperation_Binary_Grouping_Modifier_Kind = 1
	VectorOperation_Binary_Grouping_Modifier_KIND_IGNORING    VectorOperation_Binary_Grouping_Modifier_Kind = 2
)

// Enum value maps for VectorOperation_Binary_Grouping_Modifier_Kind.
var (
	VectorOperation_Binary_Grouping_Modifier_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "KIND_ON",
		2: "KIND_IGNORING",
	}
	VectorOperation_Binary_Grouping_Modifier_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"KIND_ON":          1,
		"KIND_IGNORING":    2,
	}
)

func (x VectorOperation_Binary_Grouping_Modifier_Kind) Enum() *VectorOperation_Binary_Grouping_Modifier_Kind {
	p := new(VectorOperation_Binary_Grouping_Modifier_Kind)
	*p = x
	return p
}

func (x VectorOperation_Binary_Grouping_Modifier_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VectorOperation_Binary_Grouping_Modifier_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[2].Descriptor()
}

func (VectorOperation_Binary_Grouping_Modifier_Kind) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[2]
}

func (x VectorOperation_Binary_Grouping_Modifier_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VectorOperation_Binary_Grouping_Modifier_Kind.Descriptor instead.
func (VectorOperation_Binary_Grouping_Modifier_Kind) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{1, 1, 0, 0, 0}
}

type VectorOperation_Binary_Grouping_Bias_Kind int32

const (
	VectorOperation_Binary_Grouping_Bias_KIND_UNSPECIFIED VectorOperation_Binary_Grouping_Bias_Kind = 0
	VectorOperation_Binary_Grouping_Bias_KIND_LEFT        VectorOperation_Binary_Grouping_Bias_Kind = 1
	VectorOperation_Binary_Grouping_Bias_KIND_RIGHT       VectorOperation_Binary_Grouping_Bias_Kind = 2
)

// Enum value maps for VectorOperation_Binary_Grouping_Bias_Kind.
var (
	VectorOperation_Binary_Grouping_Bias_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "KIND_LEFT",
		2: "KIND_RIGHT",
	}
	VectorOperation_Binary_Grouping_Bias_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"KIND_LEFT":        1,
		"KIND_RIGHT":       2,
	}
)

func (x VectorOperation_Binary_Grouping_Bias_Kind) Enum() *VectorOperation_Binary_Grouping_Bias_Kind {
	p := new(VectorOperation_Binary_Grouping_Bias_Kind)
	*p = x
	return p
}

func (x VectorOperation_Binary_Grouping_Bias_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VectorOperation_Binary_Grouping_Bias_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[3].Descriptor()
}

func (VectorOperation_Binary_Grouping_Bias_Kind) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[3]
}

func (x VectorOperation_Binary_Grouping_Bias_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VectorOperation_Binary_Grouping_Bias_Kind.Descriptor instead.
func (VectorOperation_Binary_Grouping_Bias_Kind) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{1, 1, 0, 1, 0}
}

type VectorExpression_Aggregation_Modifier_Kind int32

const (
	VectorExpression_Aggregation_Modifier_KIND_UNSPECIFIED VectorExpression_Aggregation_Modifier_Kind = 0
	VectorExpression_Aggregation_Modifier_KIND_BY          VectorExpression_Aggregation_Modifier_Kind = 1
	VectorExpression_Aggregation_Modifier_KIND_WITHOUT     VectorExpression_Aggregation_Modifier_Kind = 2
)

// Enum value maps for VectorExpression_Aggregation_Modifier_Kind.
var (
	VectorExpression_Aggregation_Modifier_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "KIND_BY",
		2: "KIND_WITHOUT",
	}
	VectorExpression_Aggregation_Modifier_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"KIND_BY":          1,
		"KIND_WITHOUT":     2,
	}
)

func (x VectorExpression_Aggregation_Modifier_Kind) Enum() *VectorExpression_Aggregation_Modifier_Kind {
	p := new(VectorExpression_Aggregation_Modifier_Kind)
	*p = x
	return p
}

func (x VectorExpression_Aggregation_Modifier_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VectorExpression_Aggregation_Modifier_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[4].Descriptor()
}

func (VectorExpression_Aggregation_Modifier_Kind) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[4]
}

func (x VectorExpression_Aggregation_Modifier_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VectorExpression_Aggregation_Modifier_Kind.Descriptor instead.
func (VectorExpression_Aggregation_Modifier_Kind) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{2, 1, 0, 0}
}

type VectorExpression_Selector_LabelMatcher_Op int32

const (
	VectorExpression_Selector_LabelMatcher_OP_UNSPECIFIED VectorExpression_Selector_LabelMatcher_Op = 0
	VectorExpression_Selector_LabelMatcher_OP_EQ          VectorExpression_Selector_LabelMatcher_Op = 1
	VectorExpression_Selector_LabelMatcher_OP_NEQ         VectorExpression_Selector_LabelMatcher_Op = 2
	VectorExpression_Selector_LabelMatcher_OP_MATCHES     VectorExpression_Selector_LabelMatcher_Op = 3
	VectorExpression_Selector_LabelMatcher_OP_NOT_MATCHES VectorExpression_Selector_LabelMatcher_Op = 4
)

// Enum value maps for VectorExpression_Selector_LabelMatcher_Op.
var (
	VectorExpression_Selector_LabelMatcher_Op_name = map[int32]string{
		0: "OP_UNSPECIFIED",
		1: "OP_EQ",
		2: "OP_NEQ",
		3: "OP_MATCHES",
		4: "OP_NOT_MATCHES",
	}
	VectorExpression_Selector_LabelMatcher_Op_value = map[string]int32{
		"OP_UNSPECIFIED": 0,
		"OP_EQ":          1,
		"OP_NEQ":         2,
		"OP_MATCHES":     3,
		"OP_NOT_MATCHES": 4,
	}
)

func (x VectorExpression_Selector_LabelMatcher_Op) Enum() *VectorExpression_Selector_LabelMatcher_Op {
	p := new(VectorExpression_Selector_LabelMatcher_Op)
	*p = x
	return p
}

func (x VectorExpression_Selector_LabelMatcher_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VectorExpression_Selector_LabelMatcher_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[5].Descriptor()
}

func (VectorExpression_Selector_LabelMatcher_Op) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[5]
}

func (x VectorExpression_Selector_LabelMatcher_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VectorExpression_Selector_LabelMatcher_Op.Descriptor instead.
func (VectorExpression_Selector_LabelMatcher_Op) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{2, 2, 0, 0}
}

type VectorExpression_Selector_Modifier_Boundary int32

const (
	VectorExpression_Selector_Modifier_BOUNDARY_UNSPECIFIED VectorExpression_Selector_Modifier_Boundary = 0
	VectorExpression_Selector_Modifier_BOUNDARY_START       VectorExpression_Selector_Modifier_Boundary = 1
	VectorExpression_Selector_Modifier_BOUNDARY_END         VectorExpression_Selector_Modifier_Boundary = 2
)

// Enum value maps for VectorExpression_Selector_Modifier_Boundary.
var (
	VectorExpression_Selector_Modifier_Boundary_name = map[int32]string{
		0: "BOUNDARY_UNSPECIFIED",
		1: "BOUNDARY_START",
		2: "BOUNDARY_END",
	}
	VectorExpression_Selector_Modifier_Boundary_value = map[string]int32{
		"BOUNDARY_UNSPECIFIED": 0,
		"BOUNDARY_START":       1,
		"BOUNDARY_END":         2,
	}
)

func (x VectorExpression_Selector_Modifier_Boundary) Enum() *VectorExpression_Selector_Modifier_Boundary {
	p := new(VectorExpression_Selector_Modifier_Boundary)
	*p = x
	return p
}

func (x VectorExpression_Selector_Modifier_Boundary) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VectorExpression_Selector_Modifier_Boundary) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[6].Descriptor()
}

func (VectorExpression_Selector_Modifier_Boundary) Type() protoreflect.EnumType {
	return &file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes[6]
}

func (x VectorExpression_Selector_Modifier_Boundary) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VectorExpression_Selector_Modifier_Boundary.Descriptor instead.
func (VectorExpression_Selector_Modifier_Boundary) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{2, 2, 1, 0}
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vector *VectorOperation `protobuf:"bytes,1,opt,name=vector,proto3" json:"vector,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{0}
}

func (x *Query) GetVector() *VectorOperation {
	if x != nil {
		return x.Vector
	}
	return nil
}

type VectorOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operation:
	//
	//	*VectorOperation_Single
	//	*VectorOperation_Unary_
	//	*VectorOperation_Binary_
	//	*VectorOperation_Subquery_
	Operation isVectorOperation_Operation `protobuf_oneof:"operation"`
}

func (x *VectorOperation) Reset() {
	*x = VectorOperation{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorOperation) ProtoMessage() {}

func (x *VectorOperation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorOperation.ProtoReflect.Descriptor instead.
func (*VectorOperation) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{1}
}

func (m *VectorOperation) GetOperation() isVectorOperation_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *VectorOperation) GetSingle() *VectorExpression {
	if x, ok := x.GetOperation().(*VectorOperation_Single); ok {
		return x.Single
	}
	return nil
}

func (x *VectorOperation) GetUnary() *VectorOperation_Unary {
	if x, ok := x.GetOperation().(*VectorOperation_Unary_); ok {
		return x.Unary
	}
	return nil
}

func (x *VectorOperation) GetBinary() *VectorOperation_Binary {
	if x, ok := x.GetOperation().(*VectorOperation_Binary_); ok {
		return x.Binary
	}
	return nil
}

func (x *VectorOperation) GetSubquery() *VectorOperation_Subquery {
	if x, ok := x.GetOperation().(*VectorOperation_Subquery_); ok {
		return x.Subquery
	}
	return nil
}

type isVectorOperation_Operation interface {
	isVectorOperation_Operation()
}

type VectorOperation_Single struct {
	Single *VectorExpression `protobuf:"bytes,1,opt,name=single,proto3,oneof"`
}

type VectorOperation_Unary_ struct {
	Unary *VectorOperation_Unary `protobuf:"bytes,2,opt,name=unary,proto3,oneof"`
}

type VectorOperation_Binary_ struct {
	Binary *VectorOperation_Binary `protobuf:"bytes,3,opt,name=binary,proto3,oneof"`
}

type VectorOperation_Subquery_ struct {
	Subquery *VectorOperation_Subquery `protobuf:"bytes,4,opt,name=subquery,proto3,oneof"`
}

func (*VectorOperation_Single) isVectorOperation_Operation() {}

func (*VectorOperation_Unary_) isVectorOperation_Operation() {}

func (*VectorOperation_Binary_) isVectorOperation_Operation() {}

func (*VectorOperation_Subquery_) isVectorOperation_Operation() {}

type VectorExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expression:
	//
	//	*VectorExpression_Number
	//	*VectorExpression_String_
	//	*VectorExpression_FunctionCall_
	//	*VectorExpression_Aggregation_
	//	*VectorExpression_Selector_
	//	*VectorExpression_Grouped
	Expression isVectorExpression_Expression `protobuf_oneof:"expression"`
}

func (x *VectorExpression) Reset() {
	*x = VectorExpression{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorExpression) ProtoMessage() {}

func (x *VectorExpression) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorExpression.ProtoReflect.Descriptor instead.
func (*VectorExpression) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{2}
}

func (m *VectorExpression) GetExpression() isVectorExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (x *VectorExpression) GetNumber() *Num {
	if x, ok := x.GetExpression().(*VectorExpression_Number); ok {
		return x.Number
	}
	return nil
}

func (x *VectorExpression) GetString_() *wrappers.StringValue {
	if x, ok := x.GetExpression().(*VectorExpression_String_); ok {
		return x.String_
	}
	return nil
}

func (x *VectorExpression) GetFunctionCall() *VectorExpression_FunctionCall {
	if x, ok := x.GetExpression().(*VectorExpression_FunctionCall_); ok {
		return x.FunctionCall
	}
	return nil
}

func (x *VectorExpression) GetAggregation() *VectorExpression_Aggregation {
	if x, ok := x.GetExpression().(*VectorExpression_Aggregation_); ok {
		return x.Aggregation
	}
	return nil
}

func (x *VectorExpression) GetSelector() *VectorExpression_Selector {
	if x, ok := x.GetExpression().(*VectorExpression_Selector_); ok {
		return x.Selector
	}
	return nil
}

func (x *VectorExpression) GetGrouped() *VectorOperation {
	if x, ok := x.GetExpression().(*VectorExpression_Grouped); ok {
		return x.Grouped
	}
	return nil
}

type isVectorExpression_Expression interface {
	isVectorExpression_Expression()
}

type VectorExpression_Number struct {
	Number *Num `protobuf:"bytes,1,opt,name=number,proto3,oneof"`
}

type VectorExpression_String_ struct {
	String_ *wrappers.StringValue `protobuf:"bytes,2,opt,name=string,proto3,oneof"`
}

type VectorExpression_FunctionCall_ struct {
	FunctionCall *VectorExpression_FunctionCall `protobuf:"bytes,3,opt,name=function_call,json=functionCall,proto3,oneof"`
}

type VectorExpression_Aggregation_ struct {
	Aggregation *VectorExpression_Aggregation `protobuf:"bytes,4,opt,name=aggregation,proto3,oneof"`
}

type VectorExpression_Selector_ struct {
	Selector *VectorExpression_Selector `protobuf:"bytes,5,opt,name=selector,proto3,oneof"`
}

type VectorExpression_Grouped struct {
	Grouped *VectorOperation `protobuf:"bytes,6,opt,name=grouped,proto3,oneof"`
}

func (*VectorExpression_Number) isVectorExpression_Expression() {}

func (*VectorExpression_String_) isVectorExpression_Expression() {}

func (*VectorExpression_FunctionCall_) isVectorExpression_Expression() {}

func (*VectorExpression_Aggregation_) isVectorExpression_Expression() {}

func (*VectorExpression_Selector_) isVectorExpression_Expression() {}

func (*VectorExpression_Grouped) isVectorExpression_Expression() {}

type Num struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Num:
	//
	//	*Num_Integer
	//	*Num_Floating
	//	*Num_Infinity_
	Num isNum_Num `protobuf_oneof:"num"`
}

func (x *Num) Reset() {
	*x = Num{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Num) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Num) ProtoMessage() {}

func (x *Num) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Num.ProtoReflect.Descriptor instead.
func (*Num) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{3}
}

func (m *Num) GetNum() isNum_Num {
	if m != nil {
		return m.Num
	}
	return nil
}

func (x *Num) GetInteger() *wrappers.Int64Value {
	if x, ok := x.GetNum().(*Num_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Num) GetFloating() *wrappers.DoubleValue {
	if x, ok := x.GetNum().(*Num_Floating); ok {
		return x.Floating
	}
	return nil
}

func (x *Num) GetInfinity() *Num_Infinity {
	if x, ok := x.GetNum().(*Num_Infinity_); ok {
		return x.Infinity
	}
	return nil
}

type isNum_Num interface {
	isNum_Num()
}

type Num_Integer struct {
	Integer *wrappers.Int64Value `protobuf:"bytes,1,opt,name=integer,proto3,oneof"`
}

type Num_Floating struct {
	Floating *wrappers.DoubleValue `protobuf:"bytes,2,opt,name=floating,proto3,oneof"`
}

type Num_Infinity_ struct {
	Infinity *Num_Infinity `protobuf:"bytes,3,opt,name=infinity,proto3,oneof"`
}

func (*Num_Integer) isNum_Num() {}

func (*Num_Floating) isNum_Num() {}

func (*Num_Infinity_) isNum_Num() {}

type Duration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount *Num   `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Unit   string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *Duration) Reset() {
	*x = Duration{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duration) ProtoMessage() {}

func (x *Duration) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duration.ProtoReflect.Descriptor instead.
func (*Duration) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{4}
}

func (x *Duration) GetAmount() *Num {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Duration) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type VectorOperation_Unary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op      VectorOperation_Unary_Op `protobuf:"varint,1,opt,name=op,proto3,enum=com.coralogix.dataprime.promql.ast.v1.VectorOperation_Unary_Op" json:"op,omitempty"`
	Operand *VectorOperation         `protobuf:"bytes,2,opt,name=operand,proto3" json:"operand,omitempty"`
}

func (x *VectorOperation_Unary) Reset() {
	*x = VectorOperation_Unary{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorOperation_Unary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorOperation_Unary) ProtoMessage() {}

func (x *VectorOperation_Unary) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorOperation_Unary.ProtoReflect.Descriptor instead.
func (*VectorOperation_Unary) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{1, 0}
}

func (x *VectorOperation_Unary) GetOp() VectorOperation_Unary_Op {
	if x != nil {
		return x.Op
	}
	return VectorOperation_Unary_OP_UNSPECIFIED
}

func (x *VectorOperation_Unary) GetOperand() *VectorOperation {
	if x != nil {
		return x.Operand
	}
	return nil
}

type VectorOperation_Binary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left     *VectorOperation                 `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Op       VectorOperation_Binary_Op        `protobuf:"varint,2,opt,name=op,proto3,enum=com.coralogix.dataprime.promql.ast.v1.VectorOperation_Binary_Op" json:"op,omitempty"`
	Grouping *VectorOperation_Binary_Grouping `protobuf:"bytes,3,opt,name=grouping,proto3,oneof" json:"grouping,omitempty"`
	Right    *VectorOperation                 `protobuf:"bytes,4,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *VectorOperation_Binary) Reset() {
	*x = VectorOperation_Binary{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorOperation_Binary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorOperation_Binary) ProtoMessage() {}

func (x *VectorOperation_Binary) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorOperation_Binary.ProtoReflect.Descriptor instead.
func (*VectorOperation_Binary) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{1, 1}
}

func (x *VectorOperation_Binary) GetLeft() *VectorOperation {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *VectorOperation_Binary) GetOp() VectorOperation_Binary_Op {
	if x != nil {
		return x.Op
	}
	return VectorOperation_Binary_OP_UNSPECIFIED
}

func (x *VectorOperation_Binary) GetGrouping() *VectorOperation_Binary_Grouping {
	if x != nil {
		return x.Grouping
	}
	return nil
}

func (x *VectorOperation_Binary) GetRight() *VectorOperation {
	if x != nil {
		return x.Right
	}
	return nil
}

type VectorOperation_Subquery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *VectorOperation                `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Range     *VectorOperation_Subquery_Range `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Offset    *Duration                       `protobuf:"bytes,3,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (x *VectorOperation_Subquery) Reset() {
	*x = VectorOperation_Subquery{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorOperation_Subquery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorOperation_Subquery) ProtoMessage() {}

func (x *VectorOperation_Subquery) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorOperation_Subquery.ProtoReflect.Descriptor instead.
func (*VectorOperation_Subquery) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{1, 2}
}

func (x *VectorOperation_Subquery) GetOperation() *VectorOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *VectorOperation_Subquery) GetRange() *VectorOperation_Subquery_Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *VectorOperation_Subquery) GetOffset() *Duration {
	if x != nil {
		return x.Offset
	}
	return nil
}

type VectorOperation_Binary_Grouping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modifier *VectorOperation_Binary_Grouping_Modifier `protobuf:"bytes,1,opt,name=modifier,proto3" json:"modifier,omitempty"`
	Bias     *VectorOperation_Binary_Grouping_Bias     `protobuf:"bytes,2,opt,name=bias,proto3,oneof" json:"bias,omitempty"`
}

func (x *VectorOperation_Binary_Grouping) Reset() {
	*x = VectorOperation_Binary_Grouping{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorOperation_Binary_Grouping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorOperation_Binary_Grouping) ProtoMessage() {}

func (x *VectorOperation_Binary_Grouping) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorOperation_Binary_Grouping.ProtoReflect.Descriptor instead.
func (*VectorOperation_Binary_Grouping) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *VectorOperation_Binary_Grouping) GetModifier() *VectorOperation_Binary_Grouping_Modifier {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *VectorOperation_Binary_Grouping) GetBias() *VectorOperation_Binary_Grouping_Bias {
	if x != nil {
		return x.Bias
	}
	return nil
}

type VectorOperation_Binary_Grouping_Modifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind   VectorOperation_Binary_Grouping_Modifier_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=com.coralogix.dataprime.promql.ast.v1.VectorOperation_Binary_Grouping_Modifier_Kind" json:"kind,omitempty"`
	Labels []string                                      `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *VectorOperation_Binary_Grouping_Modifier) Reset() {
	*x = VectorOperation_Binary_Grouping_Modifier{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorOperation_Binary_Grouping_Modifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorOperation_Binary_Grouping_Modifier) ProtoMessage() {}

func (x *VectorOperation_Binary_Grouping_Modifier) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorOperation_Binary_Grouping_Modifier.ProtoReflect.Descriptor instead.
func (*VectorOperation_Binary_Grouping_Modifier) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{1, 1, 0, 0}
}

func (x *VectorOperation_Binary_Grouping_Modifier) GetKind() VectorOperation_Binary_Grouping_Modifier_Kind {
	if x != nil {
		return x.Kind
	}
	return VectorOperation_Binary_Grouping_Modifier_KIND_UNSPECIFIED
}

func (x *VectorOperation_Binary_Grouping_Modifier) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type VectorOperation_Binary_Grouping_Bias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind   VectorOperation_Binary_Grouping_Bias_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=com.coralogix.dataprime.promql.ast.v1.VectorOperation_Binary_Grouping_Bias_Kind" json:"kind,omitempty"`
	Labels []string                                  `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *VectorOperation_Binary_Grouping_Bias) Reset() {
	*x = VectorOperation_Binary_Grouping_Bias{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorOperation_Binary_Grouping_Bias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorOperation_Binary_Grouping_Bias) ProtoMessage() {}

func (x *VectorOperation_Binary_Grouping_Bias) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorOperation_Binary_Grouping_Bias.ProtoReflect.Descriptor instead.
func (*VectorOperation_Binary_Grouping_Bias) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{1, 1, 0, 1}
}

func (x *VectorOperation_Binary_Grouping_Bias) GetKind() VectorOperation_Binary_Grouping_Bias_Kind {
	if x != nil {
		return x.Kind
	}
	return VectorOperation_Binary_Grouping_Bias_KIND_UNSPECIFIED
}

func (x *VectorOperation_Binary_Grouping_Bias) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type VectorOperation_Subquery_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *Duration `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   *Duration `protobuf:"bytes,2,opt,name=to,proto3,oneof" json:"to,omitempty"`
}

func (x *VectorOperation_Subquery_Range) Reset() {
	*x = VectorOperation_Subquery_Range{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorOperation_Subquery_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorOperation_Subquery_Range) ProtoMessage() {}

func (x *VectorOperation_Subquery_Range) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorOperation_Subquery_Range.ProtoReflect.Descriptor instead.
func (*VectorOperation_Subquery_Range) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (x *VectorOperation_Subquery_Range) GetFrom() *Duration {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *VectorOperation_Subquery_Range) GetTo() *Duration {
	if x != nil {
		return x.To
	}
	return nil
}

type VectorExpression_FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parameters []*VectorOperation `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *VectorExpression_FunctionCall) Reset() {
	*x = VectorExpression_FunctionCall{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorExpression_FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorExpression_FunctionCall) ProtoMessage() {}

func (x *VectorExpression_FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorExpression_FunctionCall.ProtoReflect.Descriptor instead.
func (*VectorExpression_FunctionCall) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{2, 0}
}

func (x *VectorExpression_FunctionCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VectorExpression_FunctionCall) GetParameters() []*VectorOperation {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type VectorExpression_Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FrontModifier *VectorExpression_Aggregation_Modifier `protobuf:"bytes,2,opt,name=front_modifier,json=frontModifier,proto3,oneof" json:"front_modifier,omitempty"`
	Parameters    []*VectorOperation                     `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty"`
	BackModifier  *VectorExpression_Aggregation_Modifier `protobuf:"bytes,4,opt,name=back_modifier,json=backModifier,proto3,oneof" json:"back_modifier,omitempty"`
}

func (x *VectorExpression_Aggregation) Reset() {
	*x = VectorExpression_Aggregation{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorExpression_Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorExpression_Aggregation) ProtoMessage() {}

func (x *VectorExpression_Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorExpression_Aggregation.ProtoReflect.Descriptor instead.
func (*VectorExpression_Aggregation) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{2, 1}
}

func (x *VectorExpression_Aggregation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VectorExpression_Aggregation) GetFrontModifier() *VectorExpression_Aggregation_Modifier {
	if x != nil {
		return x.FrontModifier
	}
	return nil
}

func (x *VectorExpression_Aggregation) GetParameters() []*VectorOperation {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *VectorExpression_Aggregation) GetBackModifier() *VectorExpression_Aggregation_Modifier {
	if x != nil {
		return x.BackModifier
	}
	return nil
}

type VectorExpression_Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric        *wrappers.StringValue                     `protobuf:"bytes,1,opt,name=metric,proto3,oneof" json:"metric,omitempty"`
	LabelMatchers []*VectorExpression_Selector_LabelMatcher `protobuf:"bytes,2,rep,name=label_matchers,json=labelMatchers,proto3" json:"label_matchers,omitempty"`
	TimeRange     *Duration                                 `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3,oneof" json:"time_range,omitempty"`
	Offset        *Duration                                 `protobuf:"bytes,4,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	AtModifier    *VectorExpression_Selector_Modifier       `protobuf:"bytes,5,opt,name=at_modifier,json=atModifier,proto3,oneof" json:"at_modifier,omitempty"`
}

func (x *VectorExpression_Selector) Reset() {
	*x = VectorExpression_Selector{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorExpression_Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorExpression_Selector) ProtoMessage() {}

func (x *VectorExpression_Selector) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorExpression_Selector.ProtoReflect.Descriptor instead.
func (*VectorExpression_Selector) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{2, 2}
}

func (x *VectorExpression_Selector) GetMetric() *wrappers.StringValue {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *VectorExpression_Selector) GetLabelMatchers() []*VectorExpression_Selector_LabelMatcher {
	if x != nil {
		return x.LabelMatchers
	}
	return nil
}

func (x *VectorExpression_Selector) GetTimeRange() *Duration {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *VectorExpression_Selector) GetOffset() *Duration {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *VectorExpression_Selector) GetAtModifier() *VectorExpression_Selector_Modifier {
	if x != nil {
		return x.AtModifier
	}
	return nil
}

type VectorExpression_Aggregation_Modifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind   VectorExpression_Aggregation_Modifier_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=com.coralogix.dataprime.promql.ast.v1.VectorExpression_Aggregation_Modifier_Kind" json:"kind,omitempty"`
	Labels []string                                   `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *VectorExpression_Aggregation_Modifier) Reset() {
	*x = VectorExpression_Aggregation_Modifier{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorExpression_Aggregation_Modifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorExpression_Aggregation_Modifier) ProtoMessage() {}

func (x *VectorExpression_Aggregation_Modifier) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorExpression_Aggregation_Modifier.ProtoReflect.Descriptor instead.
func (*VectorExpression_Aggregation_Modifier) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *VectorExpression_Aggregation_Modifier) GetKind() VectorExpression_Aggregation_Modifier_Kind {
	if x != nil {
		return x.Kind
	}
	return VectorExpression_Aggregation_Modifier_KIND_UNSPECIFIED
}

func (x *VectorExpression_Aggregation_Modifier) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type VectorExpression_Selector_LabelMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Op    VectorExpression_Selector_LabelMatcher_Op `protobuf:"varint,2,opt,name=op,proto3,enum=com.coralogix.dataprime.promql.ast.v1.VectorExpression_Selector_LabelMatcher_Op" json:"op,omitempty"`
	Value string                                    `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VectorExpression_Selector_LabelMatcher) Reset() {
	*x = VectorExpression_Selector_LabelMatcher{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorExpression_Selector_LabelMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorExpression_Selector_LabelMatcher) ProtoMessage() {}

func (x *VectorExpression_Selector_LabelMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorExpression_Selector_LabelMatcher.ProtoReflect.Descriptor instead.
func (*VectorExpression_Selector_LabelMatcher) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{2, 2, 0}
}

func (x *VectorExpression_Selector_LabelMatcher) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VectorExpression_Selector_LabelMatcher) GetOp() VectorExpression_Selector_LabelMatcher_Op {
	if x != nil {
		return x.Op
	}
	return VectorExpression_Selector_LabelMatcher_OP_UNSPECIFIED
}

func (x *VectorExpression_Selector_LabelMatcher) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type VectorExpression_Selector_Modifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Modifier:
	//
	//	*VectorExpression_Selector_Modifier_Timestamp
	//	*VectorExpression_Selector_Modifier_Boundary_
	Modifier isVectorExpression_Selector_Modifier_Modifier `protobuf_oneof:"modifier"`
}

func (x *VectorExpression_Selector_Modifier) Reset() {
	*x = VectorExpression_Selector_Modifier{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorExpression_Selector_Modifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorExpression_Selector_Modifier) ProtoMessage() {}

func (x *VectorExpression_Selector_Modifier) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorExpression_Selector_Modifier.ProtoReflect.Descriptor instead.
func (*VectorExpression_Selector_Modifier) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{2, 2, 1}
}

func (m *VectorExpression_Selector_Modifier) GetModifier() isVectorExpression_Selector_Modifier_Modifier {
	if m != nil {
		return m.Modifier
	}
	return nil
}

func (x *VectorExpression_Selector_Modifier) GetTimestamp() *timestamp.Timestamp {
	if x, ok := x.GetModifier().(*VectorExpression_Selector_Modifier_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *VectorExpression_Selector_Modifier) GetBoundary() VectorExpression_Selector_Modifier_Boundary {
	if x, ok := x.GetModifier().(*VectorExpression_Selector_Modifier_Boundary_); ok {
		return x.Boundary
	}
	return VectorExpression_Selector_Modifier_BOUNDARY_UNSPECIFIED
}

type isVectorExpression_Selector_Modifier_Modifier interface {
	isVectorExpression_Selector_Modifier_Modifier()
}

type VectorExpression_Selector_Modifier_Timestamp struct {
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3,oneof"`
}

type VectorExpression_Selector_Modifier_Boundary_ struct {
	Boundary VectorExpression_Selector_Modifier_Boundary `protobuf:"varint,2,opt,name=boundary,proto3,enum=com.coralogix.dataprime.promql.ast.v1.VectorExpression_Selector_Modifier_Boundary,oneof"`
}

func (*VectorExpression_Selector_Modifier_Timestamp) isVectorExpression_Selector_Modifier_Modifier() {
}

func (*VectorExpression_Selector_Modifier_Boundary_) isVectorExpression_Selector_Modifier_Modifier() {
}

type Num_Infinity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Num_Infinity) Reset() {
	*x = Num_Infinity{}
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Num_Infinity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Num_Infinity) ProtoMessage() {}

func (x *Num_Infinity) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Num_Infinity.ProtoReflect.Descriptor instead.
func (*Num_Infinity) Descriptor() ([]byte, []int) {
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP(), []int{3, 0}
}

var File_com_coralogix_dataprime_promql_ast_v1_query_proto protoreflect.FileDescriptor

var file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDesc = []byte{
	0x0a, 0x31, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c,
	0x2f, 0x61, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0xbc, 0x12, 0x0a, 0x0f, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x75,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x57, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d,
	0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x5d, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0xdf, 0x01, 0x0a, 0x05, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4f, 0x70,
	0x52, 0x02, 0x6f, 0x70, 0x12, 0x50, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x22, 0x33, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x10, 0x02, 0x1a, 0xa3, 0x0a, 0x0a, 0x06,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x12, 0x50, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4f, 0x70,
	0x52, 0x02, 0x6f, 0x70, 0x12, 0x67, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xf7, 0x04, 0x0a, 0x08,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x04, 0x62, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x69, 0x61, 0x73,
	0x48, 0x00, 0x52, 0x04, 0x62, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x1a, 0xca, 0x01, 0x0a, 0x08,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x3c, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x47,
	0x4e, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0xc1, 0x01, 0x0a, 0x04, 0x42, 0x69, 0x61,
	0x73, 0x12, 0x64, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x69, 0x61, 0x73, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22,
	0x3b, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x62, 0x69, 0x61, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x4d,
	0x55, 0x4c, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x44, 0x49, 0x56, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x50, 0x5f, 0x41, 0x54, 0x41, 0x4e, 0x32, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50,
	0x5f, 0x50, 0x4f, 0x57, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x41, 0x4e, 0x44,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x50, 0x5f, 0x45, 0x51, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x4e, 0x45,
	0x51, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x5f, 0x4c, 0x54, 0x10, 0x0d, 0x12, 0x0a,
	0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x4c, 0x54, 0x45, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50,
	0x5f, 0x47, 0x54, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x47, 0x54, 0x45, 0x10,
	0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x5f, 0x45, 0x51, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10,
	0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x51, 0x5f, 0x42, 0x4f, 0x4f, 0x4c,
	0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x5f, 0x4c, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4c,
	0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x5f, 0x4c, 0x54, 0x45, 0x5f, 0x42, 0x4f, 0x4f,
	0x4c, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x5f, 0x47, 0x54, 0x5f, 0x42, 0x4f, 0x4f,
	0x4c, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x5f, 0x47, 0x54, 0x45, 0x5f, 0x42, 0x4f,
	0x4f, 0x4c, 0x10, 0x16, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x1a, 0xb2, 0x03, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x54,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d,
	0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x4c, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d,
	0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x99, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x44,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x74,
	0x6f, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x12, 0x0a, 0x10, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x67, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	0x1a, 0x7a, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xd9, 0x04, 0x0a,
	0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x78, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x76, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x01, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x1a, 0xc6, 0x01, 0x0a, 0x08, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x3b, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14,
	0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x42, 0x59, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55,
	0x54, 0x10, 0x02, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x89, 0x08, 0x0a, 0x08, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x74, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6f, 0x0a, 0x0b, 0x61, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x03, 0x52, 0x0a, 0x61, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x1a, 0xef, 0x01, 0x0a, 0x0c, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x60, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x12, 0x0a,
	0x0e, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x5f, 0x45, 0x51, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x51, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x10, 0x04, 0x1a, 0x90, 0x02, 0x0a,
	0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x70, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x22, 0x4a, 0x0a, 0x08, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x4e,
	0x44, 0x10, 0x02, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x51, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d,
	0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x2e, 0x49, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x1a, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x05,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x62, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6d,
	0x71, 0x6c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescOnce sync.Once
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescData = file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDesc
)

func file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescGZIP() []byte {
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescOnce.Do(func() {
		file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescData)
	})
	return file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDescData
}

var file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_com_coralogix_dataprime_promql_ast_v1_query_proto_goTypes = []any{
	(VectorOperation_Unary_Op)(0),                      // 0: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Unary.Op
	(VectorOperation_Binary_Op)(0),                     // 1: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Op
	(VectorOperation_Binary_Grouping_Modifier_Kind)(0), // 2: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping.Modifier.Kind
	(VectorOperation_Binary_Grouping_Bias_Kind)(0),     // 3: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping.Bias.Kind
	(VectorExpression_Aggregation_Modifier_Kind)(0),    // 4: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Aggregation.Modifier.Kind
	(VectorExpression_Selector_LabelMatcher_Op)(0),     // 5: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.LabelMatcher.Op
	(VectorExpression_Selector_Modifier_Boundary)(0),   // 6: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.Modifier.Boundary
	(*Query)(nil),                                    // 7: com.coralogix.dataprime.promql.ast.v1.Query
	(*VectorOperation)(nil),                          // 8: com.coralogix.dataprime.promql.ast.v1.VectorOperation
	(*VectorExpression)(nil),                         // 9: com.coralogix.dataprime.promql.ast.v1.VectorExpression
	(*Num)(nil),                                      // 10: com.coralogix.dataprime.promql.ast.v1.Num
	(*Duration)(nil),                                 // 11: com.coralogix.dataprime.promql.ast.v1.Duration
	(*VectorOperation_Unary)(nil),                    // 12: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Unary
	(*VectorOperation_Binary)(nil),                   // 13: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary
	(*VectorOperation_Subquery)(nil),                 // 14: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Subquery
	(*VectorOperation_Binary_Grouping)(nil),          // 15: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping
	(*VectorOperation_Binary_Grouping_Modifier)(nil), // 16: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping.Modifier
	(*VectorOperation_Binary_Grouping_Bias)(nil),     // 17: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping.Bias
	(*VectorOperation_Subquery_Range)(nil),           // 18: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Subquery.Range
	(*VectorExpression_FunctionCall)(nil),            // 19: com.coralogix.dataprime.promql.ast.v1.VectorExpression.FunctionCall
	(*VectorExpression_Aggregation)(nil),             // 20: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Aggregation
	(*VectorExpression_Selector)(nil),                // 21: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector
	(*VectorExpression_Aggregation_Modifier)(nil),    // 22: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Aggregation.Modifier
	(*VectorExpression_Selector_LabelMatcher)(nil),   // 23: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.LabelMatcher
	(*VectorExpression_Selector_Modifier)(nil),       // 24: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.Modifier
	(*Num_Infinity)(nil),                             // 25: com.coralogix.dataprime.promql.ast.v1.Num.Infinity
	(*wrappers.StringValue)(nil),                     // 26: google.protobuf.StringValue
	(*wrappers.Int64Value)(nil),                      // 27: google.protobuf.Int64Value
	(*wrappers.DoubleValue)(nil),                     // 28: google.protobuf.DoubleValue
	(*timestamp.Timestamp)(nil),                      // 29: google.protobuf.Timestamp
}
var file_com_coralogix_dataprime_promql_ast_v1_query_proto_depIdxs = []int32{
	8,  // 0: com.coralogix.dataprime.promql.ast.v1.Query.vector:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation
	9,  // 1: com.coralogix.dataprime.promql.ast.v1.VectorOperation.single:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorExpression
	12, // 2: com.coralogix.dataprime.promql.ast.v1.VectorOperation.unary:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation.Unary
	13, // 3: com.coralogix.dataprime.promql.ast.v1.VectorOperation.binary:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary
	14, // 4: com.coralogix.dataprime.promql.ast.v1.VectorOperation.subquery:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation.Subquery
	10, // 5: com.coralogix.dataprime.promql.ast.v1.VectorExpression.number:type_name -> com.coralogix.dataprime.promql.ast.v1.Num
	26, // 6: com.coralogix.dataprime.promql.ast.v1.VectorExpression.string:type_name -> google.protobuf.StringValue
	19, // 7: com.coralogix.dataprime.promql.ast.v1.VectorExpression.function_call:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorExpression.FunctionCall
	20, // 8: com.coralogix.dataprime.promql.ast.v1.VectorExpression.aggregation:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorExpression.Aggregation
	21, // 9: com.coralogix.dataprime.promql.ast.v1.VectorExpression.selector:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector
	8,  // 10: com.coralogix.dataprime.promql.ast.v1.VectorExpression.grouped:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation
	27, // 11: com.coralogix.dataprime.promql.ast.v1.Num.integer:type_name -> google.protobuf.Int64Value
	28, // 12: com.coralogix.dataprime.promql.ast.v1.Num.floating:type_name -> google.protobuf.DoubleValue
	25, // 13: com.coralogix.dataprime.promql.ast.v1.Num.infinity:type_name -> com.coralogix.dataprime.promql.ast.v1.Num.Infinity
	10, // 14: com.coralogix.dataprime.promql.ast.v1.Duration.amount:type_name -> com.coralogix.dataprime.promql.ast.v1.Num
	0,  // 15: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Unary.op:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation.Unary.Op
	8,  // 16: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Unary.operand:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation
	8,  // 17: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.left:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation
	1,  // 18: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.op:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Op
	15, // 19: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.grouping:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping
	8,  // 20: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.right:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation
	8,  // 21: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Subquery.operation:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation
	18, // 22: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Subquery.range:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation.Subquery.Range
	11, // 23: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Subquery.offset:type_name -> com.coralogix.dataprime.promql.ast.v1.Duration
	16, // 24: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping.modifier:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping.Modifier
	17, // 25: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping.bias:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping.Bias
	2,  // 26: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping.Modifier.kind:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping.Modifier.Kind
	3,  // 27: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping.Bias.kind:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation.Binary.Grouping.Bias.Kind
	11, // 28: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Subquery.Range.from:type_name -> com.coralogix.dataprime.promql.ast.v1.Duration
	11, // 29: com.coralogix.dataprime.promql.ast.v1.VectorOperation.Subquery.Range.to:type_name -> com.coralogix.dataprime.promql.ast.v1.Duration
	8,  // 30: com.coralogix.dataprime.promql.ast.v1.VectorExpression.FunctionCall.parameters:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation
	22, // 31: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Aggregation.front_modifier:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorExpression.Aggregation.Modifier
	8,  // 32: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Aggregation.parameters:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorOperation
	22, // 33: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Aggregation.back_modifier:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorExpression.Aggregation.Modifier
	26, // 34: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.metric:type_name -> google.protobuf.StringValue
	23, // 35: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.label_matchers:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.LabelMatcher
	11, // 36: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.time_range:type_name -> com.coralogix.dataprime.promql.ast.v1.Duration
	11, // 37: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.offset:type_name -> com.coralogix.dataprime.promql.ast.v1.Duration
	24, // 38: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.at_modifier:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.Modifier
	4,  // 39: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Aggregation.Modifier.kind:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorExpression.Aggregation.Modifier.Kind
	5,  // 40: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.LabelMatcher.op:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.LabelMatcher.Op
	29, // 41: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.Modifier.timestamp:type_name -> google.protobuf.Timestamp
	6,  // 42: com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.Modifier.boundary:type_name -> com.coralogix.dataprime.promql.ast.v1.VectorExpression.Selector.Modifier.Boundary
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_com_coralogix_dataprime_promql_ast_v1_query_proto_init() }
func file_com_coralogix_dataprime_promql_ast_v1_query_proto_init() {
	if File_com_coralogix_dataprime_promql_ast_v1_query_proto != nil {
		return
	}
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[1].OneofWrappers = []any{
		(*VectorOperation_Single)(nil),
		(*VectorOperation_Unary_)(nil),
		(*VectorOperation_Binary_)(nil),
		(*VectorOperation_Subquery_)(nil),
	}
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[2].OneofWrappers = []any{
		(*VectorExpression_Number)(nil),
		(*VectorExpression_String_)(nil),
		(*VectorExpression_FunctionCall_)(nil),
		(*VectorExpression_Aggregation_)(nil),
		(*VectorExpression_Selector_)(nil),
		(*VectorExpression_Grouped)(nil),
	}
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[3].OneofWrappers = []any{
		(*Num_Integer)(nil),
		(*Num_Floating)(nil),
		(*Num_Infinity_)(nil),
	}
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[6].OneofWrappers = []any{}
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[7].OneofWrappers = []any{}
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[8].OneofWrappers = []any{}
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[11].OneofWrappers = []any{}
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[13].OneofWrappers = []any{}
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[14].OneofWrappers = []any{}
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes[17].OneofWrappers = []any{
		(*VectorExpression_Selector_Modifier_Timestamp)(nil),
		(*VectorExpression_Selector_Modifier_Boundary_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_dataprime_promql_ast_v1_query_proto_goTypes,
		DependencyIndexes: file_com_coralogix_dataprime_promql_ast_v1_query_proto_depIdxs,
		EnumInfos:         file_com_coralogix_dataprime_promql_ast_v1_query_proto_enumTypes,
		MessageInfos:      file_com_coralogix_dataprime_promql_ast_v1_query_proto_msgTypes,
	}.Build()
	File_com_coralogix_dataprime_promql_ast_v1_query_proto = out.File
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_rawDesc = nil
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_goTypes = nil
	file_com_coralogix_dataprime_promql_ast_v1_query_proto_depIdxs = nil
}
