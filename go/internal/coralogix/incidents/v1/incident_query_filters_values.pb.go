// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.26.1
// source: com/coralogixapis/incidents/v1/incident_query_filters_values.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssigneeWithCount struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Assignee      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=assignee,proto3" json:"assignee,omitempty"`
	Count         *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssigneeWithCount) Reset() {
	*x = AssigneeWithCount{}
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssigneeWithCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssigneeWithCount) ProtoMessage() {}

func (x *AssigneeWithCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssigneeWithCount.ProtoReflect.Descriptor instead.
func (*AssigneeWithCount) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescGZIP(), []int{0}
}

func (x *AssigneeWithCount) GetAssignee() *wrapperspb.StringValue {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *AssigneeWithCount) GetCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type IncidentStatusWithCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        IncidentStatus         `protobuf:"varint,1,opt,name=status,proto3,enum=com.coralogixapis.incidents.v1.IncidentStatus" json:"status,omitempty"`
	Count         *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncidentStatusWithCount) Reset() {
	*x = IncidentStatusWithCount{}
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncidentStatusWithCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentStatusWithCount) ProtoMessage() {}

func (x *IncidentStatusWithCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentStatusWithCount.ProtoReflect.Descriptor instead.
func (*IncidentStatusWithCount) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescGZIP(), []int{1}
}

func (x *IncidentStatusWithCount) GetStatus() IncidentStatus {
	if x != nil {
		return x.Status
	}
	return IncidentStatus_INCIDENT_STATUS_UNSPECIFIED
}

func (x *IncidentStatusWithCount) GetCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type IncidentStateWithCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         IncidentState          `protobuf:"varint,1,opt,name=state,proto3,enum=com.coralogixapis.incidents.v1.IncidentState" json:"state,omitempty"`
	Count         *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncidentStateWithCount) Reset() {
	*x = IncidentStateWithCount{}
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncidentStateWithCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentStateWithCount) ProtoMessage() {}

func (x *IncidentStateWithCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentStateWithCount.ProtoReflect.Descriptor instead.
func (*IncidentStateWithCount) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescGZIP(), []int{2}
}

func (x *IncidentStateWithCount) GetState() IncidentState {
	if x != nil {
		return x.State
	}
	return IncidentState_INCIDENT_STATE_UNSPECIFIED
}

func (x *IncidentStateWithCount) GetCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type IncidentSeverityWithCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Severity      IncidentSeverity       `protobuf:"varint,1,opt,name=severity,proto3,enum=com.coralogixapis.incidents.v1.IncidentSeverity" json:"severity,omitempty"`
	Count         *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncidentSeverityWithCount) Reset() {
	*x = IncidentSeverityWithCount{}
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncidentSeverityWithCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentSeverityWithCount) ProtoMessage() {}

func (x *IncidentSeverityWithCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentSeverityWithCount.ProtoReflect.Descriptor instead.
func (*IncidentSeverityWithCount) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescGZIP(), []int{3}
}

func (x *IncidentSeverityWithCount) GetSeverity() IncidentSeverity {
	if x != nil {
		return x.Severity
	}
	return IncidentSeverity_INCIDENT_SEVERITY_UNSPECIFIED
}

func (x *IncidentSeverityWithCount) GetCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type IncidentMetaLabelsWithCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MetaLabel     *MetaLabel             `protobuf:"bytes,1,opt,name=meta_label,json=metaLabel,proto3" json:"meta_label,omitempty"`
	Count         *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncidentMetaLabelsWithCount) Reset() {
	*x = IncidentMetaLabelsWithCount{}
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncidentMetaLabelsWithCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentMetaLabelsWithCount) ProtoMessage() {}

func (x *IncidentMetaLabelsWithCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentMetaLabelsWithCount.ProtoReflect.Descriptor instead.
func (*IncidentMetaLabelsWithCount) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescGZIP(), []int{4}
}

func (x *IncidentMetaLabelsWithCount) GetMetaLabel() *MetaLabel {
	if x != nil {
		return x.MetaLabel
	}
	return nil
}

func (x *IncidentMetaLabelsWithCount) GetCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type IncidentQueryFiltersValues struct {
	state               protoimpl.MessageState                     `protogen:"open.v1"`
	AssigneeWithCount   []*AssigneeWithCount                       `protobuf:"bytes,1,rep,name=assignee_with_count,json=assigneeWithCount,proto3" json:"assignee_with_count,omitempty"`
	StatusWithCount     []*IncidentStatusWithCount                 `protobuf:"bytes,2,rep,name=status_with_count,json=statusWithCount,proto3" json:"status_with_count,omitempty"`
	StateWithCount      []*IncidentStateWithCount                  `protobuf:"bytes,3,rep,name=state_with_count,json=stateWithCount,proto3" json:"state_with_count,omitempty"`
	SeverityWithCount   []*IncidentSeverityWithCount               `protobuf:"bytes,4,rep,name=severity_with_count,json=severityWithCount,proto3" json:"severity_with_count,omitempty"`
	ContextualLabels    map[string]*ContextualLabelValuesWithCount `protobuf:"bytes,5,rep,name=contextual_labels,json=contextualLabels,proto3" json:"contextual_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MetaLabelsWithCount []*IncidentMetaLabelsWithCount             `protobuf:"bytes,6,rep,name=meta_labels_with_count,json=metaLabelsWithCount,proto3" json:"meta_labels_with_count,omitempty"`
	MetaLabelsOp        FilterOperator                             `protobuf:"varint,7,opt,name=meta_labels_op,json=metaLabelsOp,proto3,enum=com.coralogixapis.incidents.v1.FilterOperator" json:"meta_labels_op,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *IncidentQueryFiltersValues) Reset() {
	*x = IncidentQueryFiltersValues{}
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncidentQueryFiltersValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentQueryFiltersValues) ProtoMessage() {}

func (x *IncidentQueryFiltersValues) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentQueryFiltersValues.ProtoReflect.Descriptor instead.
func (*IncidentQueryFiltersValues) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescGZIP(), []int{5}
}

func (x *IncidentQueryFiltersValues) GetAssigneeWithCount() []*AssigneeWithCount {
	if x != nil {
		return x.AssigneeWithCount
	}
	return nil
}

func (x *IncidentQueryFiltersValues) GetStatusWithCount() []*IncidentStatusWithCount {
	if x != nil {
		return x.StatusWithCount
	}
	return nil
}

func (x *IncidentQueryFiltersValues) GetStateWithCount() []*IncidentStateWithCount {
	if x != nil {
		return x.StateWithCount
	}
	return nil
}

func (x *IncidentQueryFiltersValues) GetSeverityWithCount() []*IncidentSeverityWithCount {
	if x != nil {
		return x.SeverityWithCount
	}
	return nil
}

func (x *IncidentQueryFiltersValues) GetContextualLabels() map[string]*ContextualLabelValuesWithCount {
	if x != nil {
		return x.ContextualLabels
	}
	return nil
}

func (x *IncidentQueryFiltersValues) GetMetaLabelsWithCount() []*IncidentMetaLabelsWithCount {
	if x != nil {
		return x.MetaLabelsWithCount
	}
	return nil
}

func (x *IncidentQueryFiltersValues) GetMetaLabelsOp() FilterOperator {
	if x != nil {
		return x.MetaLabelsOp
	}
	return FilterOperator_FILTER_OPERATOR_OR_OR_UNSPECIFIED
}

type ContextualLabelValuesWithCount struct {
	state           protoimpl.MessageState           `protogen:"open.v1"`
	ValuesWithCount []*ContextualLabelValueWithCount `protobuf:"bytes,1,rep,name=values_with_count,json=valuesWithCount,proto3" json:"values_with_count,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ContextualLabelValuesWithCount) Reset() {
	*x = ContextualLabelValuesWithCount{}
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextualLabelValuesWithCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextualLabelValuesWithCount) ProtoMessage() {}

func (x *ContextualLabelValuesWithCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextualLabelValuesWithCount.ProtoReflect.Descriptor instead.
func (*ContextualLabelValuesWithCount) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescGZIP(), []int{6}
}

func (x *ContextualLabelValuesWithCount) GetValuesWithCount() []*ContextualLabelValueWithCount {
	if x != nil {
		return x.ValuesWithCount
	}
	return nil
}

type ContextualLabelValueWithCount struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	ContextualLabelValue *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=contextual_label_value,json=contextualLabelValue,proto3" json:"contextual_label_value,omitempty"`
	Count                *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ContextualLabelValueWithCount) Reset() {
	*x = ContextualLabelValueWithCount{}
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextualLabelValueWithCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextualLabelValueWithCount) ProtoMessage() {}

func (x *ContextualLabelValueWithCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextualLabelValueWithCount.ProtoReflect.Descriptor instead.
func (*ContextualLabelValueWithCount) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescGZIP(), []int{7}
}

func (x *ContextualLabelValueWithCount) GetContextualLabelValue() *wrapperspb.StringValue {
	if x != nil {
		return x.ContextualLabelValue
	}
	return nil
}

func (x *ContextualLabelValueWithCount) GetCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

var File_com_coralogixapis_incidents_v1_incident_query_filters_values_proto protoreflect.FileDescriptor

var file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDesc = []byte{
	0x0a, 0x42, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x1a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdf, 0x01, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x65, 0x22, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x12, 0x3a, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x92, 0x41,
	0x04, 0x4a, 0x02, 0x31, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x43, 0x92, 0x41,
	0x40, 0x0a, 0x3e, 0x2a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x16, 0x41, 0x6e, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01,
	0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0xd2, 0x01, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x85, 0x02, 0x0a, 0x17, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x16, 0x92,
	0x41, 0x13, 0x4a, 0x11, 0x22, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02,
	0x31, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x4e, 0x92, 0x41, 0x4b, 0x0a, 0x49,
	0x2a, 0x17, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x1d, 0x41, 0x6e, 0x20, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0xd2, 0x01, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x16, 0x49, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02, 0x31, 0x30, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x4b, 0x92, 0x41, 0x48, 0x0a, 0x46, 0x2a, 0x16, 0x49, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x32, 0x1c, 0x41, 0x6e, 0x20, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0xd2, 0x01, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0xd2, 0x01, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4c, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3a,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a,
	0x02, 0x31, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a,
	0x4f, 0x2a, 0x19, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x1f, 0x41, 0x6e,
	0x20, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0xd2, 0x01, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x80, 0x02, 0x0a, 0x1b, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x48, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x09, 0x6d, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02, 0x31, 0x30, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x5b, 0x92, 0x41, 0x58, 0x0a, 0x56, 0x2a, 0x1b, 0x49,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x22, 0x41, 0x6e, 0x20, 0x69,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01,
	0x0a, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xd7, 0x08, 0x0a, 0x1a, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x61, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x11, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x13,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x70, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4f, 0x70, 0x1a, 0x83,
	0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0xd6, 0x01, 0x92, 0x41, 0xd2, 0x01, 0x0a, 0xcf, 0x01, 0x2a, 0x1a,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x32, 0x20, 0x41, 0x6e, 0x20, 0x69,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0xd2, 0x01, 0x13, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0xd2, 0x01, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x13, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2,
	0x01, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0xd2, 0x01, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x0e, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x6f, 0x70, 0x22, 0xec, 0x01,
	0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x69, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x5f, 0x92, 0x41, 0x5c,
	0x0a, 0x5a, 0x2a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x32, 0x24, 0x41, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c,
	0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xba, 0x02, 0x0a,
	0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x71,
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x4a, 0x18, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x92,
	0x41, 0x04, 0x4a, 0x02, 0x31, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x6a, 0x92,
	0x41, 0x67, 0x0a, 0x65, 0x2a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x32, 0x23, 0x41, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61,
	0x6c, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0xd2, 0x01, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescOnce sync.Once
	file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescData = file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDesc
)

func file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescData)
	})
	return file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDescData
}

var file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_goTypes = []any{
	(*AssigneeWithCount)(nil),              // 0: com.coralogixapis.incidents.v1.AssigneeWithCount
	(*IncidentStatusWithCount)(nil),        // 1: com.coralogixapis.incidents.v1.IncidentStatusWithCount
	(*IncidentStateWithCount)(nil),         // 2: com.coralogixapis.incidents.v1.IncidentStateWithCount
	(*IncidentSeverityWithCount)(nil),      // 3: com.coralogixapis.incidents.v1.IncidentSeverityWithCount
	(*IncidentMetaLabelsWithCount)(nil),    // 4: com.coralogixapis.incidents.v1.IncidentMetaLabelsWithCount
	(*IncidentQueryFiltersValues)(nil),     // 5: com.coralogixapis.incidents.v1.IncidentQueryFiltersValues
	(*ContextualLabelValuesWithCount)(nil), // 6: com.coralogixapis.incidents.v1.ContextualLabelValuesWithCount
	(*ContextualLabelValueWithCount)(nil),  // 7: com.coralogixapis.incidents.v1.ContextualLabelValueWithCount
	nil,                                    // 8: com.coralogixapis.incidents.v1.IncidentQueryFiltersValues.ContextualLabelsEntry
	(*wrapperspb.StringValue)(nil),         // 9: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),          // 10: google.protobuf.Int32Value
	(IncidentStatus)(0),                    // 11: com.coralogixapis.incidents.v1.IncidentStatus
	(IncidentState)(0),                     // 12: com.coralogixapis.incidents.v1.IncidentState
	(IncidentSeverity)(0),                  // 13: com.coralogixapis.incidents.v1.IncidentSeverity
	(*MetaLabel)(nil),                      // 14: com.coralogixapis.incidents.v1.MetaLabel
	(FilterOperator)(0),                    // 15: com.coralogixapis.incidents.v1.FilterOperator
}
var file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_depIdxs = []int32{
	9,  // 0: com.coralogixapis.incidents.v1.AssigneeWithCount.assignee:type_name -> google.protobuf.StringValue
	10, // 1: com.coralogixapis.incidents.v1.AssigneeWithCount.count:type_name -> google.protobuf.Int32Value
	11, // 2: com.coralogixapis.incidents.v1.IncidentStatusWithCount.status:type_name -> com.coralogixapis.incidents.v1.IncidentStatus
	10, // 3: com.coralogixapis.incidents.v1.IncidentStatusWithCount.count:type_name -> google.protobuf.Int32Value
	12, // 4: com.coralogixapis.incidents.v1.IncidentStateWithCount.state:type_name -> com.coralogixapis.incidents.v1.IncidentState
	10, // 5: com.coralogixapis.incidents.v1.IncidentStateWithCount.count:type_name -> google.protobuf.Int32Value
	13, // 6: com.coralogixapis.incidents.v1.IncidentSeverityWithCount.severity:type_name -> com.coralogixapis.incidents.v1.IncidentSeverity
	10, // 7: com.coralogixapis.incidents.v1.IncidentSeverityWithCount.count:type_name -> google.protobuf.Int32Value
	14, // 8: com.coralogixapis.incidents.v1.IncidentMetaLabelsWithCount.meta_label:type_name -> com.coralogixapis.incidents.v1.MetaLabel
	10, // 9: com.coralogixapis.incidents.v1.IncidentMetaLabelsWithCount.count:type_name -> google.protobuf.Int32Value
	0,  // 10: com.coralogixapis.incidents.v1.IncidentQueryFiltersValues.assignee_with_count:type_name -> com.coralogixapis.incidents.v1.AssigneeWithCount
	1,  // 11: com.coralogixapis.incidents.v1.IncidentQueryFiltersValues.status_with_count:type_name -> com.coralogixapis.incidents.v1.IncidentStatusWithCount
	2,  // 12: com.coralogixapis.incidents.v1.IncidentQueryFiltersValues.state_with_count:type_name -> com.coralogixapis.incidents.v1.IncidentStateWithCount
	3,  // 13: com.coralogixapis.incidents.v1.IncidentQueryFiltersValues.severity_with_count:type_name -> com.coralogixapis.incidents.v1.IncidentSeverityWithCount
	8,  // 14: com.coralogixapis.incidents.v1.IncidentQueryFiltersValues.contextual_labels:type_name -> com.coralogixapis.incidents.v1.IncidentQueryFiltersValues.ContextualLabelsEntry
	4,  // 15: com.coralogixapis.incidents.v1.IncidentQueryFiltersValues.meta_labels_with_count:type_name -> com.coralogixapis.incidents.v1.IncidentMetaLabelsWithCount
	15, // 16: com.coralogixapis.incidents.v1.IncidentQueryFiltersValues.meta_labels_op:type_name -> com.coralogixapis.incidents.v1.FilterOperator
	7,  // 17: com.coralogixapis.incidents.v1.ContextualLabelValuesWithCount.values_with_count:type_name -> com.coralogixapis.incidents.v1.ContextualLabelValueWithCount
	9,  // 18: com.coralogixapis.incidents.v1.ContextualLabelValueWithCount.contextual_label_value:type_name -> google.protobuf.StringValue
	10, // 19: com.coralogixapis.incidents.v1.ContextualLabelValueWithCount.count:type_name -> google.protobuf.Int32Value
	6,  // 20: com.coralogixapis.incidents.v1.IncidentQueryFiltersValues.ContextualLabelsEntry.value:type_name -> com.coralogixapis.incidents.v1.ContextualLabelValuesWithCount
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_init() }
func file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_init() {
	if File_com_coralogixapis_incidents_v1_incident_query_filters_values_proto != nil {
		return
	}
	file_com_coralogixapis_incidents_v1_filter_operators_proto_init()
	file_com_coralogixapis_incidents_v1_incident_severity_proto_init()
	file_com_coralogixapis_incidents_v1_incident_status_proto_init()
	file_com_coralogixapis_incidents_v1_incident_state_proto_init()
	file_com_coralogixapis_incidents_v1_meta_label_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_incidents_v1_incident_query_filters_values_proto = out.File
	file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_rawDesc = nil
	file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_goTypes = nil
	file_com_coralogixapis_incidents_v1_incident_query_filters_values_proto_depIdxs = nil
}
