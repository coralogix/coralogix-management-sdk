// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.26.1
// source: com/coralogixapis/incidents/v1/incident.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IncidentFields int32

const (
	IncidentFields_INCIDENTS_FIELDS_UNSPECIFIED            IncidentFields = 0
	IncidentFields_INCIDENTS_FIELDS_ID                     IncidentFields = 1
	IncidentFields_INCIDENTS_FIELDS_SEVERITY               IncidentFields = 2
	IncidentFields_INCIDENTS_FIELDS_NAME                   IncidentFields = 3
	IncidentFields_INCIDENTS_FIELDS_CREATED_TIME           IncidentFields = 4
	IncidentFields_INCIDENTS_FIELDS_CLOSED_TIME            IncidentFields = 5
	IncidentFields_INCIDENTS_FIELDS_STATE                  IncidentFields = 6
	IncidentFields_INCIDENTS_FIELDS_STATUS                 IncidentFields = 7
	IncidentFields_INCIDENTS_FIELDS_LAST_STATE_UPDATE_TIME IncidentFields = 8
	IncidentFields_INCIDENTS_FIELDS_APPLICATION_NAME       IncidentFields = 9
	IncidentFields_INCIDENTS_FIELDS_SUBSYSTEM_NAME         IncidentFields = 10
	IncidentFields_INCIDENTS_FIELDS_DURATION               IncidentFields = 11
)

// Enum value maps for IncidentFields.
var (
	IncidentFields_name = map[int32]string{
		0:  "INCIDENTS_FIELDS_UNSPECIFIED",
		1:  "INCIDENTS_FIELDS_ID",
		2:  "INCIDENTS_FIELDS_SEVERITY",
		3:  "INCIDENTS_FIELDS_NAME",
		4:  "INCIDENTS_FIELDS_CREATED_TIME",
		5:  "INCIDENTS_FIELDS_CLOSED_TIME",
		6:  "INCIDENTS_FIELDS_STATE",
		7:  "INCIDENTS_FIELDS_STATUS",
		8:  "INCIDENTS_FIELDS_LAST_STATE_UPDATE_TIME",
		9:  "INCIDENTS_FIELDS_APPLICATION_NAME",
		10: "INCIDENTS_FIELDS_SUBSYSTEM_NAME",
		11: "INCIDENTS_FIELDS_DURATION",
	}
	IncidentFields_value = map[string]int32{
		"INCIDENTS_FIELDS_UNSPECIFIED":            0,
		"INCIDENTS_FIELDS_ID":                     1,
		"INCIDENTS_FIELDS_SEVERITY":               2,
		"INCIDENTS_FIELDS_NAME":                   3,
		"INCIDENTS_FIELDS_CREATED_TIME":           4,
		"INCIDENTS_FIELDS_CLOSED_TIME":            5,
		"INCIDENTS_FIELDS_STATE":                  6,
		"INCIDENTS_FIELDS_STATUS":                 7,
		"INCIDENTS_FIELDS_LAST_STATE_UPDATE_TIME": 8,
		"INCIDENTS_FIELDS_APPLICATION_NAME":       9,
		"INCIDENTS_FIELDS_SUBSYSTEM_NAME":         10,
		"INCIDENTS_FIELDS_DURATION":               11,
	}
)

func (x IncidentFields) Enum() *IncidentFields {
	p := new(IncidentFields)
	*p = x
	return p
}

func (x IncidentFields) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncidentFields) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogixapis_incidents_v1_incident_proto_enumTypes[0].Descriptor()
}

func (IncidentFields) Type() protoreflect.EnumType {
	return &file_com_coralogixapis_incidents_v1_incident_proto_enumTypes[0]
}

func (x IncidentFields) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncidentFields.Descriptor instead.
func (IncidentFields) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_proto_rawDescGZIP(), []int{0}
}

// *
// Represents an Incident.
type Incident struct {
	state               protoimpl.MessageState  `protogen:"open.v1"`
	Id                  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                                // The Incident's id
	Name                *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                                                            // The Incident's name
	State               IncidentState           `protobuf:"varint,3,opt,name=state,proto3,enum=com.coralogixapis.incidents.v1.IncidentState" json:"state,omitempty"`                                                                       // The Incident's current state, the internal state of the incident, usually is derived from the operational events of the incident
	Status              IncidentStatus          `protobuf:"varint,4,opt,name=status,proto3,enum=com.coralogixapis.incidents.v1.IncidentStatus" json:"status,omitempty"`                                                                    // The Incident's current status, the status of the incident can be derived from state of the incident and/or administrative user operation (i.e acknowledging the incident)
	Assignments         []*Assignment           `protobuf:"bytes,5,rep,name=assignments,proto3" json:"assignments,omitempty"`                                                                                                              // The Incident's current assignments
	Description         *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                                                                                                              // The Incident's current description
	Severity            IncidentSeverity        `protobuf:"varint,7,opt,name=severity,proto3,enum=com.coralogixapis.incidents.v1.IncidentSeverity" json:"severity,omitempty"`                                                              // The Incident's current severity
	ContextualLabels    map[string]string       `protobuf:"bytes,13,rep,name=contextual_labels,json=contextualLabels,proto3" json:"contextual_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // The Incident's current contextual labels, contextual labels are dynamic labels that gives contextual information about the incident ( for example: alert_name label can appear in an incident created by an event originated from the alerting system )
	DisplayLabels       map[string]string       `protobuf:"bytes,14,rep,name=display_labels,json=displayLabels,proto3" json:"display_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`          // The Incident's current display labels, display labels are dynamic labels that gives more of an extension to the name of the incident, for identification and naming purposes
	Events              []*IncidentEvent        `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`                                                                                                                       // The Incident's current events
	CreatedAt           *timestamppb.Timestamp  `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ClosedAt            *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=closed_at,json=closedAt,proto3" json:"closed_at,omitempty"`
	LastStateUpdateTime *timestamppb.Timestamp  `protobuf:"bytes,15,opt,name=last_state_update_time,json=lastStateUpdateTime,proto3" json:"last_state_update_time,omitempty"`
	LastStateUpdateKey  *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=last_state_update_key,json=lastStateUpdateKey,proto3" json:"last_state_update_key,omitempty"` // The Incident's last event payload key that caused the incident to change state
	IsMuted             *wrapperspb.BoolValue   `protobuf:"bytes,17,opt,name=is_muted,json=isMuted,proto3" json:"is_muted,omitempty"`                                      // Is the incident muted/suppressed
	MetaLabels          []*MetaLabel            `protobuf:"bytes,18,rep,name=meta_labels,json=metaLabels,proto3" json:"meta_labels,omitempty"`                             // The Incident's current meta labels
	Duration            *durationpb.Duration    `protobuf:"bytes,19,opt,name=duration,proto3" json:"duration,omitempty"`                                                   // The Incident duration between created at and close time
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Incident) Reset() {
	*x = Incident{}
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Incident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Incident) ProtoMessage() {}

func (x *Incident) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Incident.ProtoReflect.Descriptor instead.
func (*Incident) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_proto_rawDescGZIP(), []int{0}
}

func (x *Incident) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Incident) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Incident) GetState() IncidentState {
	if x != nil {
		return x.State
	}
	return IncidentState_INCIDENT_STATE_UNSPECIFIED
}

func (x *Incident) GetStatus() IncidentStatus {
	if x != nil {
		return x.Status
	}
	return IncidentStatus_INCIDENT_STATUS_UNSPECIFIED
}

func (x *Incident) GetAssignments() []*Assignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

func (x *Incident) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Incident) GetSeverity() IncidentSeverity {
	if x != nil {
		return x.Severity
	}
	return IncidentSeverity_INCIDENT_SEVERITY_UNSPECIFIED
}

func (x *Incident) GetContextualLabels() map[string]string {
	if x != nil {
		return x.ContextualLabels
	}
	return nil
}

func (x *Incident) GetDisplayLabels() map[string]string {
	if x != nil {
		return x.DisplayLabels
	}
	return nil
}

func (x *Incident) GetEvents() []*IncidentEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Incident) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Incident) GetClosedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

func (x *Incident) GetLastStateUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStateUpdateTime
	}
	return nil
}

func (x *Incident) GetLastStateUpdateKey() *wrapperspb.StringValue {
	if x != nil {
		return x.LastStateUpdateKey
	}
	return nil
}

func (x *Incident) GetIsMuted() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsMuted
	}
	return nil
}

func (x *Incident) GetMetaLabels() []*MetaLabel {
	if x != nil {
		return x.MetaLabels
	}
	return nil
}

func (x *Incident) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type IncidentFieldOneOf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Field:
	//
	//	*IncidentFieldOneOf_Id
	//	*IncidentFieldOneOf_Severity
	//	*IncidentFieldOneOf_Name
	//	*IncidentFieldOneOf_CreatedAt
	//	*IncidentFieldOneOf_ClosedAt
	//	*IncidentFieldOneOf_State
	//	*IncidentFieldOneOf_Status
	//	*IncidentFieldOneOf_LastStateUpdateTime
	//	*IncidentFieldOneOf_ApplicationName
	//	*IncidentFieldOneOf_SubsystemName
	//	*IncidentFieldOneOf_Duration
	Field         isIncidentFieldOneOf_Field `protobuf_oneof:"field"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncidentFieldOneOf) Reset() {
	*x = IncidentFieldOneOf{}
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncidentFieldOneOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentFieldOneOf) ProtoMessage() {}

func (x *IncidentFieldOneOf) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentFieldOneOf.ProtoReflect.Descriptor instead.
func (*IncidentFieldOneOf) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_proto_rawDescGZIP(), []int{1}
}

func (x *IncidentFieldOneOf) GetField() isIncidentFieldOneOf_Field {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *IncidentFieldOneOf) GetId() *wrapperspb.StringValue {
	if x != nil {
		if x, ok := x.Field.(*IncidentFieldOneOf_Id); ok {
			return x.Id
		}
	}
	return nil
}

func (x *IncidentFieldOneOf) GetSeverity() IncidentSeverity {
	if x != nil {
		if x, ok := x.Field.(*IncidentFieldOneOf_Severity); ok {
			return x.Severity
		}
	}
	return IncidentSeverity_INCIDENT_SEVERITY_UNSPECIFIED
}

func (x *IncidentFieldOneOf) GetName() *wrapperspb.StringValue {
	if x != nil {
		if x, ok := x.Field.(*IncidentFieldOneOf_Name); ok {
			return x.Name
		}
	}
	return nil
}

func (x *IncidentFieldOneOf) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Field.(*IncidentFieldOneOf_CreatedAt); ok {
			return x.CreatedAt
		}
	}
	return nil
}

func (x *IncidentFieldOneOf) GetClosedAt() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Field.(*IncidentFieldOneOf_ClosedAt); ok {
			return x.ClosedAt
		}
	}
	return nil
}

func (x *IncidentFieldOneOf) GetState() IncidentState {
	if x != nil {
		if x, ok := x.Field.(*IncidentFieldOneOf_State); ok {
			return x.State
		}
	}
	return IncidentState_INCIDENT_STATE_UNSPECIFIED
}

func (x *IncidentFieldOneOf) GetStatus() IncidentStatus {
	if x != nil {
		if x, ok := x.Field.(*IncidentFieldOneOf_Status); ok {
			return x.Status
		}
	}
	return IncidentStatus_INCIDENT_STATUS_UNSPECIFIED
}

func (x *IncidentFieldOneOf) GetLastStateUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Field.(*IncidentFieldOneOf_LastStateUpdateTime); ok {
			return x.LastStateUpdateTime
		}
	}
	return nil
}

func (x *IncidentFieldOneOf) GetApplicationName() *wrapperspb.StringValue {
	if x != nil {
		if x, ok := x.Field.(*IncidentFieldOneOf_ApplicationName); ok {
			return x.ApplicationName
		}
	}
	return nil
}

func (x *IncidentFieldOneOf) GetSubsystemName() *wrapperspb.StringValue {
	if x != nil {
		if x, ok := x.Field.(*IncidentFieldOneOf_SubsystemName); ok {
			return x.SubsystemName
		}
	}
	return nil
}

func (x *IncidentFieldOneOf) GetDuration() *durationpb.Duration {
	if x != nil {
		if x, ok := x.Field.(*IncidentFieldOneOf_Duration); ok {
			return x.Duration
		}
	}
	return nil
}

type isIncidentFieldOneOf_Field interface {
	isIncidentFieldOneOf_Field()
}

type IncidentFieldOneOf_Id struct {
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type IncidentFieldOneOf_Severity struct {
	Severity IncidentSeverity `protobuf:"varint,2,opt,name=severity,proto3,enum=com.coralogixapis.incidents.v1.IncidentSeverity,oneof"`
}

type IncidentFieldOneOf_Name struct {
	Name *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type IncidentFieldOneOf_CreatedAt struct {
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3,oneof"`
}

type IncidentFieldOneOf_ClosedAt struct {
	ClosedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=closed_at,json=closedAt,proto3,oneof"`
}

type IncidentFieldOneOf_State struct {
	State IncidentState `protobuf:"varint,6,opt,name=state,proto3,enum=com.coralogixapis.incidents.v1.IncidentState,oneof"`
}

type IncidentFieldOneOf_Status struct {
	Status IncidentStatus `protobuf:"varint,7,opt,name=status,proto3,enum=com.coralogixapis.incidents.v1.IncidentStatus,oneof"`
}

type IncidentFieldOneOf_LastStateUpdateTime struct {
	LastStateUpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_state_update_time,json=lastStateUpdateTime,proto3,oneof"`
}

type IncidentFieldOneOf_ApplicationName struct {
	ApplicationName *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=application_name,json=applicationName,proto3,oneof"`
}

type IncidentFieldOneOf_SubsystemName struct {
	SubsystemName *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=subsystem_name,json=subsystemName,proto3,oneof"`
}

type IncidentFieldOneOf_Duration struct {
	Duration *durationpb.Duration `protobuf:"bytes,11,opt,name=duration,proto3,oneof"`
}

func (*IncidentFieldOneOf_Id) isIncidentFieldOneOf_Field() {}

func (*IncidentFieldOneOf_Severity) isIncidentFieldOneOf_Field() {}

func (*IncidentFieldOneOf_Name) isIncidentFieldOneOf_Field() {}

func (*IncidentFieldOneOf_CreatedAt) isIncidentFieldOneOf_Field() {}

func (*IncidentFieldOneOf_ClosedAt) isIncidentFieldOneOf_Field() {}

func (*IncidentFieldOneOf_State) isIncidentFieldOneOf_Field() {}

func (*IncidentFieldOneOf_Status) isIncidentFieldOneOf_Field() {}

func (*IncidentFieldOneOf_LastStateUpdateTime) isIncidentFieldOneOf_Field() {}

func (*IncidentFieldOneOf_ApplicationName) isIncidentFieldOneOf_Field() {}

func (*IncidentFieldOneOf_SubsystemName) isIncidentFieldOneOf_Field() {}

func (*IncidentFieldOneOf_Duration) isIncidentFieldOneOf_Field() {}

type ContextualLabels struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	FieldName     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldValue    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextualLabels) Reset() {
	*x = ContextualLabels{}
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextualLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextualLabels) ProtoMessage() {}

func (x *ContextualLabels) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextualLabels.ProtoReflect.Descriptor instead.
func (*ContextualLabels) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_proto_rawDescGZIP(), []int{2}
}

func (x *ContextualLabels) GetFieldName() *wrapperspb.StringValue {
	if x != nil {
		return x.FieldName
	}
	return nil
}

func (x *ContextualLabels) GetFieldValue() *wrapperspb.StringValue {
	if x != nil {
		return x.FieldValue
	}
	return nil
}

type GroupByValues struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Values:
	//
	//	*GroupByValues_IncidentField
	//	*GroupByValues_ContextualLabels
	Values        isGroupByValues_Values `protobuf_oneof:"values"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupByValues) Reset() {
	*x = GroupByValues{}
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupByValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByValues) ProtoMessage() {}

func (x *GroupByValues) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByValues.ProtoReflect.Descriptor instead.
func (*GroupByValues) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_proto_rawDescGZIP(), []int{3}
}

func (x *GroupByValues) GetValues() isGroupByValues_Values {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *GroupByValues) GetIncidentField() *IncidentFieldOneOf {
	if x != nil {
		if x, ok := x.Values.(*GroupByValues_IncidentField); ok {
			return x.IncidentField
		}
	}
	return nil
}

func (x *GroupByValues) GetContextualLabels() *ContextualLabels {
	if x != nil {
		if x, ok := x.Values.(*GroupByValues_ContextualLabels); ok {
			return x.ContextualLabels
		}
	}
	return nil
}

type isGroupByValues_Values interface {
	isGroupByValues_Values()
}

type GroupByValues_IncidentField struct {
	IncidentField *IncidentFieldOneOf `protobuf:"bytes,1,opt,name=incident_field,json=incidentField,proto3,oneof"`
}

type GroupByValues_ContextualLabels struct {
	ContextualLabels *ContextualLabels `protobuf:"bytes,2,opt,name=contextual_labels,json=contextualLabels,proto3,oneof"`
}

func (*GroupByValues_IncidentField) isGroupByValues_Values() {}

func (*GroupByValues_ContextualLabels) isGroupByValues_Values() {}

// Represents and Incident Aggregation (group by)
type IncidentAggregation struct {
	state               protoimpl.MessageState     `protogen:"open.v1"`
	GroupBysValue       []*GroupByValues           `protobuf:"bytes,1,rep,name=group_bys_value,json=groupBysValue,proto3" json:"group_bys_value,omitempty"`                      // The Aggregation's group by fields and values
	AggStateCount       []*IncidentStateCount      `protobuf:"bytes,2,rep,name=agg_state_count,json=aggStateCount,proto3" json:"agg_state_count,omitempty"`                      // The Aggregation's count of states
	AggStatusCount      []*IncidentStatusCount     `protobuf:"bytes,3,rep,name=agg_status_count,json=aggStatusCount,proto3" json:"agg_status_count,omitempty"`                   // The Aggregation's count of statuses
	AggSeverityCount    []*IncidentSeverityCount   `protobuf:"bytes,4,rep,name=agg_severity_count,json=aggSeverityCount,proto3" json:"agg_severity_count,omitempty"`             // The Aggregation's count of severities
	AggAssignmentsCount []*IncidentAssignmentCount `protobuf:"bytes,5,rep,name=agg_assignments_count,json=aggAssignmentsCount,proto3" json:"agg_assignments_count,omitempty"`    // The Aggregation's count of assignments
	FirstCreatedAt      *timestamppb.Timestamp     `protobuf:"bytes,6,opt,name=first_created_at,json=firstCreatedAt,proto3" json:"first_created_at,omitempty"`                   // The Aggregation's first incident created time
	LastClosedAt        *timestamppb.Timestamp     `protobuf:"bytes,7,opt,name=last_closed_at,json=lastClosedAt,proto3" json:"last_closed_at,omitempty"`                         // The Aggregation's last incident closed time
	AllValuesCount      *wrapperspb.UInt32Value    `protobuf:"bytes,8,opt,name=all_values_count,json=allValuesCount,proto3" json:"all_values_count,omitempty"`                   // The Aggregation's count of incidents
	ListIncidentsId     []*wrapperspb.StringValue  `protobuf:"bytes,9,rep,name=list_incidents_id,json=listIncidentsId,proto3" json:"list_incidents_id,omitempty"`                // The Aggregation's list of incident's id
	LastStateUpdateTime *timestamppb.Timestamp     `protobuf:"bytes,10,opt,name=last_state_update_time,json=lastStateUpdateTime,proto3" json:"last_state_update_time,omitempty"` // The Aggregation's last state update time
	AggMetaLabelsCount  []*IncidentMetaLabelsCount `protobuf:"bytes,11,rep,name=agg_meta_labels_count,json=aggMetaLabelsCount,proto3" json:"agg_meta_labels_count,omitempty"`    // The Aggregation's of meta labels
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *IncidentAggregation) Reset() {
	*x = IncidentAggregation{}
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncidentAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentAggregation) ProtoMessage() {}

func (x *IncidentAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentAggregation.ProtoReflect.Descriptor instead.
func (*IncidentAggregation) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_proto_rawDescGZIP(), []int{4}
}

func (x *IncidentAggregation) GetGroupBysValue() []*GroupByValues {
	if x != nil {
		return x.GroupBysValue
	}
	return nil
}

func (x *IncidentAggregation) GetAggStateCount() []*IncidentStateCount {
	if x != nil {
		return x.AggStateCount
	}
	return nil
}

func (x *IncidentAggregation) GetAggStatusCount() []*IncidentStatusCount {
	if x != nil {
		return x.AggStatusCount
	}
	return nil
}

func (x *IncidentAggregation) GetAggSeverityCount() []*IncidentSeverityCount {
	if x != nil {
		return x.AggSeverityCount
	}
	return nil
}

func (x *IncidentAggregation) GetAggAssignmentsCount() []*IncidentAssignmentCount {
	if x != nil {
		return x.AggAssignmentsCount
	}
	return nil
}

func (x *IncidentAggregation) GetFirstCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstCreatedAt
	}
	return nil
}

func (x *IncidentAggregation) GetLastClosedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastClosedAt
	}
	return nil
}

func (x *IncidentAggregation) GetAllValuesCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.AllValuesCount
	}
	return nil
}

func (x *IncidentAggregation) GetListIncidentsId() []*wrapperspb.StringValue {
	if x != nil {
		return x.ListIncidentsId
	}
	return nil
}

func (x *IncidentAggregation) GetLastStateUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStateUpdateTime
	}
	return nil
}

func (x *IncidentAggregation) GetAggMetaLabelsCount() []*IncidentMetaLabelsCount {
	if x != nil {
		return x.AggMetaLabelsCount
	}
	return nil
}

type IncidentMetaLabelsCount struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	MetaLabel     *MetaLabel              `protobuf:"bytes,1,opt,name=meta_label,json=metaLabel,proto3" json:"meta_label,omitempty"`
	Count         *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncidentMetaLabelsCount) Reset() {
	*x = IncidentMetaLabelsCount{}
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncidentMetaLabelsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentMetaLabelsCount) ProtoMessage() {}

func (x *IncidentMetaLabelsCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentMetaLabelsCount.ProtoReflect.Descriptor instead.
func (*IncidentMetaLabelsCount) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_proto_rawDescGZIP(), []int{5}
}

func (x *IncidentMetaLabelsCount) GetMetaLabel() *MetaLabel {
	if x != nil {
		return x.MetaLabel
	}
	return nil
}

func (x *IncidentMetaLabelsCount) GetCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type IncidentAssignmentCount struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	AssignedTo    *UserDetails            `protobuf:"bytes,1,opt,name=assigned_to,json=assignedTo,proto3" json:"assigned_to,omitempty"`
	Count         *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncidentAssignmentCount) Reset() {
	*x = IncidentAssignmentCount{}
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncidentAssignmentCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentAssignmentCount) ProtoMessage() {}

func (x *IncidentAssignmentCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentAssignmentCount.ProtoReflect.Descriptor instead.
func (*IncidentAssignmentCount) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_proto_rawDescGZIP(), []int{6}
}

func (x *IncidentAssignmentCount) GetAssignedTo() *UserDetails {
	if x != nil {
		return x.AssignedTo
	}
	return nil
}

func (x *IncidentAssignmentCount) GetCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type IncidentSeverityCount struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Severity      IncidentSeverity        `protobuf:"varint,1,opt,name=severity,proto3,enum=com.coralogixapis.incidents.v1.IncidentSeverity" json:"severity,omitempty"`
	Count         *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncidentSeverityCount) Reset() {
	*x = IncidentSeverityCount{}
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncidentSeverityCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentSeverityCount) ProtoMessage() {}

func (x *IncidentSeverityCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentSeverityCount.ProtoReflect.Descriptor instead.
func (*IncidentSeverityCount) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_proto_rawDescGZIP(), []int{7}
}

func (x *IncidentSeverityCount) GetSeverity() IncidentSeverity {
	if x != nil {
		return x.Severity
	}
	return IncidentSeverity_INCIDENT_SEVERITY_UNSPECIFIED
}

func (x *IncidentSeverityCount) GetCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type IncidentStatusCount struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Status        IncidentStatus          `protobuf:"varint,1,opt,name=status,proto3,enum=com.coralogixapis.incidents.v1.IncidentStatus" json:"status,omitempty"`
	Count         *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncidentStatusCount) Reset() {
	*x = IncidentStatusCount{}
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncidentStatusCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentStatusCount) ProtoMessage() {}

func (x *IncidentStatusCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentStatusCount.ProtoReflect.Descriptor instead.
func (*IncidentStatusCount) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_proto_rawDescGZIP(), []int{8}
}

func (x *IncidentStatusCount) GetStatus() IncidentStatus {
	if x != nil {
		return x.Status
	}
	return IncidentStatus_INCIDENT_STATUS_UNSPECIFIED
}

func (x *IncidentStatusCount) GetCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type IncidentStateCount struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	State         IncidentState           `protobuf:"varint,1,opt,name=state,proto3,enum=com.coralogixapis.incidents.v1.IncidentState" json:"state,omitempty"`
	Count         *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncidentStateCount) Reset() {
	*x = IncidentStateCount{}
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncidentStateCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentStateCount) ProtoMessage() {}

func (x *IncidentStateCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentStateCount.ProtoReflect.Descriptor instead.
func (*IncidentStateCount) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_incidents_v1_incident_proto_rawDescGZIP(), []int{9}
}

func (x *IncidentStateCount) GetState() IncidentState {
	if x != nil {
		return x.State
	}
	return IncidentState_INCIDENT_STATE_UNSPECIFIED
}

func (x *IncidentStateCount) GetCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

var File_com_coralogixapis_incidents_v1_incident_proto protoreflect.FileDescriptor

var file_com_coralogixapis_incidents_v1_incident_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x42,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x36, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x0d, 0x0a, 0x08, 0x49, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12,
	0x92, 0x41, 0x0f, 0x4a, 0x0d, 0x22, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b, 0x92, 0x41,
	0x18, 0x4a, 0x16, 0x22, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x6b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x62, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0x92, 0x41,
	0x18, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x54, 0x30,
	0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d,
	0x30, 0x31, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22,
	0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x6c, 0x0a, 0x16, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x4a, 0x16, 0x22, 0x32, 0x30,
	0x32, 0x34, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30,
	0x30, 0x5a, 0x22, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x4a, 0x17, 0x22, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x22, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x75,
	0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x0b, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x43, 0x0a,
	0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0xe5, 0x01, 0x92, 0x41, 0xe1, 0x01, 0x0a, 0xde, 0x01, 0x2a, 0x08,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x32, 0x0b, 0x41, 0x6e, 0x20, 0x69, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xd2, 0x01, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0xd2, 0x01, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0xd2, 0x01, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0xd2, 0x01, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0xd2, 0x01, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0xd2, 0x01, 0x0e,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0xd2, 0x01,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0xd2, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0xd2, 0x01, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0xd2, 0x01, 0x15, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0xd2, 0x01, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x22, 0xf8, 0x05, 0x0a,
	0x12, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e,
	0x65, 0x4f, 0x66, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x51, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x13,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45,
	0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0b,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x12, 0x92, 0x41, 0x0f, 0x4a, 0x0d, 0x22, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x55, 0x92, 0x41, 0x52, 0x0a, 0x50, 0x2a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75,
	0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x21, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x75, 0x61, 0x6c, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x61, 0x6e, 0x20, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0xd2, 0x01, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x6e, 0x65, 0x4f, 0x66, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xe8, 0x09, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x62, 0x79, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x5a, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x61, 0x67,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x10, 0x61,
	0x67, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x12, 0x61, 0x67,
	0x67, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x61,
	0x67, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x6b, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x13, 0x61, 0x67, 0x67, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x10,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x11,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x12, 0x61, 0x67, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x3a, 0x95, 0x02, 0x92, 0x41, 0x91, 0x02, 0x0a, 0x8e, 0x02, 0x2a, 0x13, 0x49,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0x17, 0x41, 0x6e, 0x20, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x20,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x0f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xd2, 0x01, 0x0f,
	0x61, 0x67, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2,
	0x01, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0xd2, 0x01, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x15, 0x61, 0x67, 0x67, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2,
	0x01, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0xd2, 0x01, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0xd2, 0x01, 0x10, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x16, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0xd2, 0x01, 0x15, 0x61, 0x67, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x17,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07,
	0x92, 0x41, 0x04, 0x4a, 0x02, 0x31, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x52,
	0x92, 0x41, 0x4f, 0x0a, 0x4d, 0x2a, 0x17, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x1d,
	0x41, 0x6e, 0x20, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x65, 0x74, 0x61,
	0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xd2, 0x01, 0x0a,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c,
	0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x3b, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02,
	0x31, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x49, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07,
	0x92, 0x41, 0x04, 0x4a, 0x02, 0x31, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9a,
	0x01, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x92, 0x41, 0x04,
	0x4a, 0x02, 0x31, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x12,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02, 0x31, 0x30, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x9b, 0x03, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x43, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x43,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x5f, 0x49, 0x44,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x53, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d,
	0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12,
	0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x05, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x07, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x4e,
	0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x43, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x09, 0x12, 0x23,
	0x0a, 0x1f, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x53,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_incidents_v1_incident_proto_rawDescOnce sync.Once
	file_com_coralogixapis_incidents_v1_incident_proto_rawDescData = file_com_coralogixapis_incidents_v1_incident_proto_rawDesc
)

func file_com_coralogixapis_incidents_v1_incident_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_incidents_v1_incident_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_incidents_v1_incident_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_incidents_v1_incident_proto_rawDescData)
	})
	return file_com_coralogixapis_incidents_v1_incident_proto_rawDescData
}

var file_com_coralogixapis_incidents_v1_incident_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_coralogixapis_incidents_v1_incident_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_com_coralogixapis_incidents_v1_incident_proto_goTypes = []any{
	(IncidentFields)(0),             // 0: com.coralogixapis.incidents.v1.IncidentFields
	(*Incident)(nil),                // 1: com.coralogixapis.incidents.v1.Incident
	(*IncidentFieldOneOf)(nil),      // 2: com.coralogixapis.incidents.v1.IncidentFieldOneOf
	(*ContextualLabels)(nil),        // 3: com.coralogixapis.incidents.v1.ContextualLabels
	(*GroupByValues)(nil),           // 4: com.coralogixapis.incidents.v1.GroupByValues
	(*IncidentAggregation)(nil),     // 5: com.coralogixapis.incidents.v1.IncidentAggregation
	(*IncidentMetaLabelsCount)(nil), // 6: com.coralogixapis.incidents.v1.IncidentMetaLabelsCount
	(*IncidentAssignmentCount)(nil), // 7: com.coralogixapis.incidents.v1.IncidentAssignmentCount
	(*IncidentSeverityCount)(nil),   // 8: com.coralogixapis.incidents.v1.IncidentSeverityCount
	(*IncidentStatusCount)(nil),     // 9: com.coralogixapis.incidents.v1.IncidentStatusCount
	(*IncidentStateCount)(nil),      // 10: com.coralogixapis.incidents.v1.IncidentStateCount
	nil,                             // 11: com.coralogixapis.incidents.v1.Incident.ContextualLabelsEntry
	nil,                             // 12: com.coralogixapis.incidents.v1.Incident.DisplayLabelsEntry
	(*wrapperspb.StringValue)(nil),  // 13: google.protobuf.StringValue
	(IncidentState)(0),              // 14: com.coralogixapis.incidents.v1.IncidentState
	(IncidentStatus)(0),             // 15: com.coralogixapis.incidents.v1.IncidentStatus
	(*Assignment)(nil),              // 16: com.coralogixapis.incidents.v1.Assignment
	(IncidentSeverity)(0),           // 17: com.coralogixapis.incidents.v1.IncidentSeverity
	(*IncidentEvent)(nil),           // 18: com.coralogixapis.incidents.v1.IncidentEvent
	(*timestamppb.Timestamp)(nil),   // 19: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),    // 20: google.protobuf.BoolValue
	(*MetaLabel)(nil),               // 21: com.coralogixapis.incidents.v1.MetaLabel
	(*durationpb.Duration)(nil),     // 22: google.protobuf.Duration
	(*wrapperspb.UInt32Value)(nil),  // 23: google.protobuf.UInt32Value
	(*UserDetails)(nil),             // 24: com.coralogixapis.incidents.v1.UserDetails
}
var file_com_coralogixapis_incidents_v1_incident_proto_depIdxs = []int32{
	13, // 0: com.coralogixapis.incidents.v1.Incident.id:type_name -> google.protobuf.StringValue
	13, // 1: com.coralogixapis.incidents.v1.Incident.name:type_name -> google.protobuf.StringValue
	14, // 2: com.coralogixapis.incidents.v1.Incident.state:type_name -> com.coralogixapis.incidents.v1.IncidentState
	15, // 3: com.coralogixapis.incidents.v1.Incident.status:type_name -> com.coralogixapis.incidents.v1.IncidentStatus
	16, // 4: com.coralogixapis.incidents.v1.Incident.assignments:type_name -> com.coralogixapis.incidents.v1.Assignment
	13, // 5: com.coralogixapis.incidents.v1.Incident.description:type_name -> google.protobuf.StringValue
	17, // 6: com.coralogixapis.incidents.v1.Incident.severity:type_name -> com.coralogixapis.incidents.v1.IncidentSeverity
	11, // 7: com.coralogixapis.incidents.v1.Incident.contextual_labels:type_name -> com.coralogixapis.incidents.v1.Incident.ContextualLabelsEntry
	12, // 8: com.coralogixapis.incidents.v1.Incident.display_labels:type_name -> com.coralogixapis.incidents.v1.Incident.DisplayLabelsEntry
	18, // 9: com.coralogixapis.incidents.v1.Incident.events:type_name -> com.coralogixapis.incidents.v1.IncidentEvent
	19, // 10: com.coralogixapis.incidents.v1.Incident.created_at:type_name -> google.protobuf.Timestamp
	19, // 11: com.coralogixapis.incidents.v1.Incident.closed_at:type_name -> google.protobuf.Timestamp
	19, // 12: com.coralogixapis.incidents.v1.Incident.last_state_update_time:type_name -> google.protobuf.Timestamp
	13, // 13: com.coralogixapis.incidents.v1.Incident.last_state_update_key:type_name -> google.protobuf.StringValue
	20, // 14: com.coralogixapis.incidents.v1.Incident.is_muted:type_name -> google.protobuf.BoolValue
	21, // 15: com.coralogixapis.incidents.v1.Incident.meta_labels:type_name -> com.coralogixapis.incidents.v1.MetaLabel
	22, // 16: com.coralogixapis.incidents.v1.Incident.duration:type_name -> google.protobuf.Duration
	13, // 17: com.coralogixapis.incidents.v1.IncidentFieldOneOf.id:type_name -> google.protobuf.StringValue
	17, // 18: com.coralogixapis.incidents.v1.IncidentFieldOneOf.severity:type_name -> com.coralogixapis.incidents.v1.IncidentSeverity
	13, // 19: com.coralogixapis.incidents.v1.IncidentFieldOneOf.name:type_name -> google.protobuf.StringValue
	19, // 20: com.coralogixapis.incidents.v1.IncidentFieldOneOf.created_at:type_name -> google.protobuf.Timestamp
	19, // 21: com.coralogixapis.incidents.v1.IncidentFieldOneOf.closed_at:type_name -> google.protobuf.Timestamp
	14, // 22: com.coralogixapis.incidents.v1.IncidentFieldOneOf.state:type_name -> com.coralogixapis.incidents.v1.IncidentState
	15, // 23: com.coralogixapis.incidents.v1.IncidentFieldOneOf.status:type_name -> com.coralogixapis.incidents.v1.IncidentStatus
	19, // 24: com.coralogixapis.incidents.v1.IncidentFieldOneOf.last_state_update_time:type_name -> google.protobuf.Timestamp
	13, // 25: com.coralogixapis.incidents.v1.IncidentFieldOneOf.application_name:type_name -> google.protobuf.StringValue
	13, // 26: com.coralogixapis.incidents.v1.IncidentFieldOneOf.subsystem_name:type_name -> google.protobuf.StringValue
	22, // 27: com.coralogixapis.incidents.v1.IncidentFieldOneOf.duration:type_name -> google.protobuf.Duration
	13, // 28: com.coralogixapis.incidents.v1.ContextualLabels.field_name:type_name -> google.protobuf.StringValue
	13, // 29: com.coralogixapis.incidents.v1.ContextualLabels.field_value:type_name -> google.protobuf.StringValue
	2,  // 30: com.coralogixapis.incidents.v1.GroupByValues.incident_field:type_name -> com.coralogixapis.incidents.v1.IncidentFieldOneOf
	3,  // 31: com.coralogixapis.incidents.v1.GroupByValues.contextual_labels:type_name -> com.coralogixapis.incidents.v1.ContextualLabels
	4,  // 32: com.coralogixapis.incidents.v1.IncidentAggregation.group_bys_value:type_name -> com.coralogixapis.incidents.v1.GroupByValues
	10, // 33: com.coralogixapis.incidents.v1.IncidentAggregation.agg_state_count:type_name -> com.coralogixapis.incidents.v1.IncidentStateCount
	9,  // 34: com.coralogixapis.incidents.v1.IncidentAggregation.agg_status_count:type_name -> com.coralogixapis.incidents.v1.IncidentStatusCount
	8,  // 35: com.coralogixapis.incidents.v1.IncidentAggregation.agg_severity_count:type_name -> com.coralogixapis.incidents.v1.IncidentSeverityCount
	7,  // 36: com.coralogixapis.incidents.v1.IncidentAggregation.agg_assignments_count:type_name -> com.coralogixapis.incidents.v1.IncidentAssignmentCount
	19, // 37: com.coralogixapis.incidents.v1.IncidentAggregation.first_created_at:type_name -> google.protobuf.Timestamp
	19, // 38: com.coralogixapis.incidents.v1.IncidentAggregation.last_closed_at:type_name -> google.protobuf.Timestamp
	23, // 39: com.coralogixapis.incidents.v1.IncidentAggregation.all_values_count:type_name -> google.protobuf.UInt32Value
	13, // 40: com.coralogixapis.incidents.v1.IncidentAggregation.list_incidents_id:type_name -> google.protobuf.StringValue
	19, // 41: com.coralogixapis.incidents.v1.IncidentAggregation.last_state_update_time:type_name -> google.protobuf.Timestamp
	6,  // 42: com.coralogixapis.incidents.v1.IncidentAggregation.agg_meta_labels_count:type_name -> com.coralogixapis.incidents.v1.IncidentMetaLabelsCount
	21, // 43: com.coralogixapis.incidents.v1.IncidentMetaLabelsCount.meta_label:type_name -> com.coralogixapis.incidents.v1.MetaLabel
	23, // 44: com.coralogixapis.incidents.v1.IncidentMetaLabelsCount.count:type_name -> google.protobuf.UInt32Value
	24, // 45: com.coralogixapis.incidents.v1.IncidentAssignmentCount.assigned_to:type_name -> com.coralogixapis.incidents.v1.UserDetails
	23, // 46: com.coralogixapis.incidents.v1.IncidentAssignmentCount.count:type_name -> google.protobuf.UInt32Value
	17, // 47: com.coralogixapis.incidents.v1.IncidentSeverityCount.severity:type_name -> com.coralogixapis.incidents.v1.IncidentSeverity
	23, // 48: com.coralogixapis.incidents.v1.IncidentSeverityCount.count:type_name -> google.protobuf.UInt32Value
	15, // 49: com.coralogixapis.incidents.v1.IncidentStatusCount.status:type_name -> com.coralogixapis.incidents.v1.IncidentStatus
	23, // 50: com.coralogixapis.incidents.v1.IncidentStatusCount.count:type_name -> google.protobuf.UInt32Value
	14, // 51: com.coralogixapis.incidents.v1.IncidentStateCount.state:type_name -> com.coralogixapis.incidents.v1.IncidentState
	23, // 52: com.coralogixapis.incidents.v1.IncidentStateCount.count:type_name -> google.protobuf.UInt32Value
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_com_coralogixapis_incidents_v1_incident_proto_init() }
func file_com_coralogixapis_incidents_v1_incident_proto_init() {
	if File_com_coralogixapis_incidents_v1_incident_proto != nil {
		return
	}
	file_com_coralogixapis_incidents_v1_assignee_proto_init()
	file_com_coralogixapis_incidents_v1_incident_event_incident_event_proto_init()
	file_com_coralogixapis_incidents_v1_incident_severity_proto_init()
	file_com_coralogixapis_incidents_v1_incident_state_proto_init()
	file_com_coralogixapis_incidents_v1_incident_status_proto_init()
	file_com_coralogixapis_incidents_v1_meta_label_proto_init()
	file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[1].OneofWrappers = []any{
		(*IncidentFieldOneOf_Id)(nil),
		(*IncidentFieldOneOf_Severity)(nil),
		(*IncidentFieldOneOf_Name)(nil),
		(*IncidentFieldOneOf_CreatedAt)(nil),
		(*IncidentFieldOneOf_ClosedAt)(nil),
		(*IncidentFieldOneOf_State)(nil),
		(*IncidentFieldOneOf_Status)(nil),
		(*IncidentFieldOneOf_LastStateUpdateTime)(nil),
		(*IncidentFieldOneOf_ApplicationName)(nil),
		(*IncidentFieldOneOf_SubsystemName)(nil),
		(*IncidentFieldOneOf_Duration)(nil),
	}
	file_com_coralogixapis_incidents_v1_incident_proto_msgTypes[3].OneofWrappers = []any{
		(*GroupByValues_IncidentField)(nil),
		(*GroupByValues_ContextualLabels)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_incidents_v1_incident_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogixapis_incidents_v1_incident_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_incidents_v1_incident_proto_depIdxs,
		EnumInfos:         file_com_coralogixapis_incidents_v1_incident_proto_enumTypes,
		MessageInfos:      file_com_coralogixapis_incidents_v1_incident_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_incidents_v1_incident_proto = out.File
	file_com_coralogixapis_incidents_v1_incident_proto_rawDesc = nil
	file_com_coralogixapis_incidents_v1_incident_proto_goTypes = nil
	file_com_coralogixapis_incidents_v1_incident_proto_depIdxs = nil
}
