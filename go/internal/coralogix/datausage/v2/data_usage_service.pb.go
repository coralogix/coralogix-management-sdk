// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: com/coralogix/datausage/v2/data_usage_service.proto

package v2

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AggregateBy int32

const (
	AggregateBy_AGGREGATE_BY_UNSPECIFIED AggregateBy = 0
	AggregateBy_AGGREGATE_BY_APPLICATION AggregateBy = 1
	AggregateBy_AGGREGATE_BY_SUBSYSTEM   AggregateBy = 2
	AggregateBy_AGGREGATE_BY_PILLAR      AggregateBy = 3
	AggregateBy_AGGREGATE_BY_PRIORITY    AggregateBy = 4
)

// Enum value maps for AggregateBy.
var (
	AggregateBy_name = map[int32]string{
		0: "AGGREGATE_BY_UNSPECIFIED",
		1: "AGGREGATE_BY_APPLICATION",
		2: "AGGREGATE_BY_SUBSYSTEM",
		3: "AGGREGATE_BY_PILLAR",
		4: "AGGREGATE_BY_PRIORITY",
	}
	AggregateBy_value = map[string]int32{
		"AGGREGATE_BY_UNSPECIFIED": 0,
		"AGGREGATE_BY_APPLICATION": 1,
		"AGGREGATE_BY_SUBSYSTEM":   2,
		"AGGREGATE_BY_PILLAR":      3,
		"AGGREGATE_BY_PRIORITY":    4,
	}
)

func (x AggregateBy) Enum() *AggregateBy {
	p := new(AggregateBy)
	*p = x
	return p
}

func (x AggregateBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregateBy) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_enumTypes[0].Descriptor()
}

func (AggregateBy) Type() protoreflect.EnumType {
	return &file_com_coralogix_datausage_v2_data_usage_service_proto_enumTypes[0]
}

func (x AggregateBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregateBy.Descriptor instead.
func (AggregateBy) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{0}
}

type GetTeamDetailedDataUsageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Date request interval
	DateRange *DateRange `protobuf:"bytes,2,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// Aggregation resolution with minute precision.
	//
	// Do note that to avoid overloading the service we enforce resolution limits
	// that depend on the server configuration. This is configured by the server.
	// This means that, for instance, requests with 1 min resolution for an interval of 30 days will be rejected.
	//
	// Resolution must be between 1 min and date_range interval
	Resolution *durationpb.Duration `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// List of aggregate parameters.
	// i.e. if AggregateBy is [AGGREGATE_BY_PILLAR, AGGREGATE_BY_PRIORITY], then the response will stream data aggregated by pillar and priority.
	Aggregate     []AggregateBy `protobuf:"varint,4,rep,packed,name=aggregate,proto3,enum=com.coralogix.datausage.v2.AggregateBy" json:"aggregate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTeamDetailedDataUsageRequest) Reset() {
	*x = GetTeamDetailedDataUsageRequest{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamDetailedDataUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamDetailedDataUsageRequest) ProtoMessage() {}

func (x *GetTeamDetailedDataUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamDetailedDataUsageRequest.ProtoReflect.Descriptor instead.
func (*GetTeamDetailedDataUsageRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetTeamDetailedDataUsageRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetTeamDetailedDataUsageRequest) GetResolution() *durationpb.Duration {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *GetTeamDetailedDataUsageRequest) GetAggregate() []AggregateBy {
	if x != nil {
		return x.Aggregate
	}
	return nil
}

type GetTeamDetailedDataUsageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SizeGb        *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=size_gb,json=sizeGb,proto3" json:"size_gb,omitempty"`
	Units         *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=units,proto3" json:"units,omitempty"`
	Dimensions    []*Dimension           `protobuf:"bytes,4,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTeamDetailedDataUsageResponse) Reset() {
	*x = GetTeamDetailedDataUsageResponse{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamDetailedDataUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamDetailedDataUsageResponse) ProtoMessage() {}

func (x *GetTeamDetailedDataUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamDetailedDataUsageResponse.ProtoReflect.Descriptor instead.
func (*GetTeamDetailedDataUsageResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetTeamDetailedDataUsageResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GetTeamDetailedDataUsageResponse) GetSizeGb() *wrapperspb.FloatValue {
	if x != nil {
		return x.SizeGb
	}
	return nil
}

func (x *GetTeamDetailedDataUsageResponse) GetUnits() *wrapperspb.FloatValue {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *GetTeamDetailedDataUsageResponse) GetDimensions() []*Dimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

type GetSpansCountRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	DateRange *DateRange             `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// Aggregation resolution with second precision.
	//
	// Resolution must be between 1 second and date_range interval
	Resolution *durationpb.Duration `protobuf:"bytes,2,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// Example: (application1 OR application2) AND (subsystem1 OR subsystem2)
	// Match occurs on full match
	Filters       *ScopesFilter `protobuf:"bytes,3,opt,name=filters,proto3,oneof" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpansCountRequest) Reset() {
	*x = GetSpansCountRequest{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpansCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpansCountRequest) ProtoMessage() {}

func (x *GetSpansCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpansCountRequest.ProtoReflect.Descriptor instead.
func (*GetSpansCountRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetSpansCountRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetSpansCountRequest) GetResolution() *durationpb.Duration {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *GetSpansCountRequest) GetFilters() *ScopesFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ScopesFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Application   []string               `protobuf:"bytes,1,rep,name=application,proto3" json:"application,omitempty"`
	Subsystem     []string               `protobuf:"bytes,2,rep,name=subsystem,proto3" json:"subsystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScopesFilter) Reset() {
	*x = ScopesFilter{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScopesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopesFilter) ProtoMessage() {}

func (x *ScopesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopesFilter.ProtoReflect.Descriptor instead.
func (*ScopesFilter) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{3}
}

func (x *ScopesFilter) GetApplication() []string {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *ScopesFilter) GetSubsystem() []string {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

type SpansCount struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SuccessSpanCount    *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=success_span_count,json=successSpanCount,proto3" json:"success_span_count,omitempty"`
	ErrorSpanCount      *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=error_span_count,json=errorSpanCount,proto3" json:"error_span_count,omitempty"`
	LowSuccessSpanCount *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=low_success_span_count,json=lowSuccessSpanCount,proto3" json:"low_success_span_count,omitempty"`
	LowErrorSpanCount   *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=low_error_span_count,json=lowErrorSpanCount,proto3" json:"low_error_span_count,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SpansCount) Reset() {
	*x = SpansCount{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpansCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpansCount) ProtoMessage() {}

func (x *SpansCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpansCount.ProtoReflect.Descriptor instead.
func (*SpansCount) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{4}
}

func (x *SpansCount) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SpansCount) GetSuccessSpanCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.SuccessSpanCount
	}
	return nil
}

func (x *SpansCount) GetErrorSpanCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.ErrorSpanCount
	}
	return nil
}

func (x *SpansCount) GetLowSuccessSpanCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.LowSuccessSpanCount
	}
	return nil
}

func (x *SpansCount) GetLowErrorSpanCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.LowErrorSpanCount
	}
	return nil
}

type GetSpansCountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpansCount    []*SpansCount          `protobuf:"bytes,1,rep,name=spans_count,json=spansCount,proto3" json:"spans_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpansCountResponse) Reset() {
	*x = GetSpansCountResponse{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpansCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpansCountResponse) ProtoMessage() {}

func (x *GetSpansCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpansCountResponse.ProtoReflect.Descriptor instead.
func (*GetSpansCountResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetSpansCountResponse) GetSpansCount() []*SpansCount {
	if x != nil {
		return x.SpansCount
	}
	return nil
}

type GetLogsCountRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	DateRange *DateRange             `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// Aggregation resolution with second precision.
	//
	// Resolution must be between 1 second and date_range interval
	Resolution *durationpb.Duration `protobuf:"bytes,2,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// Example: (application1 OR application2) AND (subsystem1 OR subsystem2)
	// Match occurs on full match
	Filters       *ScopesFilter `protobuf:"bytes,3,opt,name=filters,proto3,oneof" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLogsCountRequest) Reset() {
	*x = GetLogsCountRequest{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogsCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsCountRequest) ProtoMessage() {}

func (x *GetLogsCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsCountRequest.ProtoReflect.Descriptor instead.
func (*GetLogsCountRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetLogsCountRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetLogsCountRequest) GetResolution() *durationpb.Duration {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *GetLogsCountRequest) GetFilters() *ScopesFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type LogsCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	LogsCount     uint64                 `protobuf:"varint,2,opt,name=logs_count,json=logsCount,proto3" json:"logs_count,omitempty"`
	Severity      Severity               `protobuf:"varint,3,opt,name=severity,proto3,enum=com.coralogix.datausage.v2.Severity" json:"severity,omitempty"`
	Priority      Priority               `protobuf:"varint,4,opt,name=priority,proto3,enum=com.coralogix.datausage.v2.Priority" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogsCount) Reset() {
	*x = LogsCount{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsCount) ProtoMessage() {}

func (x *LogsCount) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsCount.ProtoReflect.Descriptor instead.
func (*LogsCount) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{7}
}

func (x *LogsCount) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogsCount) GetLogsCount() uint64 {
	if x != nil {
		return x.LogsCount
	}
	return 0
}

func (x *LogsCount) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *LogsCount) GetPriority() Priority {
	if x != nil {
		return x.Priority
	}
	return Priority_PRIORITY_UNSPECIFIED
}

type GetLogsCountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogsCount     []*LogsCount           `protobuf:"bytes,1,rep,name=logs_count,json=logsCount,proto3" json:"logs_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLogsCountResponse) Reset() {
	*x = GetLogsCountResponse{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogsCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsCountResponse) ProtoMessage() {}

func (x *GetLogsCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsCountResponse.ProtoReflect.Descriptor instead.
func (*GetLogsCountResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetLogsCountResponse) GetLogsCount() []*LogsCount {
	if x != nil {
		return x.LogsCount
	}
	return nil
}

type GetDataUsageMetricsExportStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDataUsageMetricsExportStatusRequest) Reset() {
	*x = GetDataUsageMetricsExportStatusRequest{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataUsageMetricsExportStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataUsageMetricsExportStatusRequest) ProtoMessage() {}

func (x *GetDataUsageMetricsExportStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataUsageMetricsExportStatusRequest.ProtoReflect.Descriptor instead.
func (*GetDataUsageMetricsExportStatusRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{9}
}

type GetDataUsageMetricsExportStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDataUsageMetricsExportStatusResponse) Reset() {
	*x = GetDataUsageMetricsExportStatusResponse{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataUsageMetricsExportStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataUsageMetricsExportStatusResponse) ProtoMessage() {}

func (x *GetDataUsageMetricsExportStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataUsageMetricsExportStatusResponse.ProtoReflect.Descriptor instead.
func (*GetDataUsageMetricsExportStatusResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetDataUsageMetricsExportStatusResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type UpdateDataUsageMetricsExportStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDataUsageMetricsExportStatusRequest) Reset() {
	*x = UpdateDataUsageMetricsExportStatusRequest{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDataUsageMetricsExportStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataUsageMetricsExportStatusRequest) ProtoMessage() {}

func (x *UpdateDataUsageMetricsExportStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataUsageMetricsExportStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateDataUsageMetricsExportStatusRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateDataUsageMetricsExportStatusRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type UpdateDataUsageMetricsExportStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDataUsageMetricsExportStatusResponse) Reset() {
	*x = UpdateDataUsageMetricsExportStatusResponse{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDataUsageMetricsExportStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataUsageMetricsExportStatusResponse) ProtoMessage() {}

func (x *UpdateDataUsageMetricsExportStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataUsageMetricsExportStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateDataUsageMetricsExportStatusResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateDataUsageMetricsExportStatusResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type GetDataUsageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Date request interval
	DateRange *DateRange `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// Aggregation resolution. Minimum supported value is 1h
	//
	// Do note that to avoid overloading the service we enforce resolution limits
	// that depend on the server configuration. This is configured by the server.
	// This means that, for instance, requests with 1 hour resolution for an interval of 30 days will be rejected but accepted for 1 day interval.
	//
	// Resolution must be between 1 hour and date_range interval
	Resolution *durationpb.Duration `protobuf:"bytes,2,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// List of aggregate parameters.
	// i.e. if AggregateBy is [AGGREGATE_BY_PILLAR, AGGREGATE_BY_PRIORITY], then the response will stream data aggregated by pillar and priority.
	Aggregate []AggregateBy `protobuf:"varint,3,rep,packed,name=aggregate,proto3,enum=com.coralogix.datausage.v2.AggregateBy" json:"aggregate,omitempty"`
	// Dimensions to filter by.
	// When used together with aggregation it is pointless to filter by dimension keys that are not aggregated.
	// i.e. if we filter by Dimension [ {"subsystem", "subsystem1"}]
	//
	//	we only return entries that at least have that dimension i.e. [{"subsystem", "subsystem1"}, {"application", "application1"}]
	DimensionFilters []*Dimension `protobuf:"bytes,4,rep,name=dimension_filters,json=dimensionFilters,proto3" json:"dimension_filters,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetDataUsageRequest) Reset() {
	*x = GetDataUsageRequest{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataUsageRequest) ProtoMessage() {}

func (x *GetDataUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataUsageRequest.ProtoReflect.Descriptor instead.
func (*GetDataUsageRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetDataUsageRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetDataUsageRequest) GetResolution() *durationpb.Duration {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *GetDataUsageRequest) GetAggregate() []AggregateBy {
	if x != nil {
		return x.Aggregate
	}
	return nil
}

func (x *GetDataUsageRequest) GetDimensionFilters() []*Dimension {
	if x != nil {
		return x.DimensionFilters
	}
	return nil
}

type DataUsageEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SizeGb        float32                `protobuf:"fixed32,2,opt,name=size_gb,json=sizeGb,proto3" json:"size_gb,omitempty"`
	Units         float32                `protobuf:"fixed32,3,opt,name=units,proto3" json:"units,omitempty"`
	Dimensions    []*Dimension           `protobuf:"bytes,4,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataUsageEntry) Reset() {
	*x = DataUsageEntry{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataUsageEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataUsageEntry) ProtoMessage() {}

func (x *DataUsageEntry) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataUsageEntry.ProtoReflect.Descriptor instead.
func (*DataUsageEntry) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{14}
}

func (x *DataUsageEntry) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DataUsageEntry) GetSizeGb() float32 {
	if x != nil {
		return x.SizeGb
	}
	return 0
}

func (x *DataUsageEntry) GetUnits() float32 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *DataUsageEntry) GetDimensions() []*Dimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

type GetDataUsageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*DataUsageEntry      `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDataUsageResponse) Reset() {
	*x = GetDataUsageResponse{}
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataUsageResponse) ProtoMessage() {}

func (x *GetDataUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataUsageResponse.ProtoReflect.Descriptor instead.
func (*GetDataUsageResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetDataUsageResponse) GetEntries() []*DataUsageEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

var File_com_coralogix_datausage_v2_data_usage_service_proto protoreflect.FileDescriptor

var file_com_coralogix_datausage_v2_data_usage_service_proto_rawDesc = []byte{
	0x0a, 0x33, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x32, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x03,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x79, 0x52, 0x09,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x3a, 0xf2, 0x01, 0x92, 0x41, 0xee, 0x01,
	0x0a, 0x6e, 0x2a, 0x24, 0x47, 0x65, 0x74, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x20, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x46, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72,
	0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x22, 0xb4, 0x03, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x4a, 0x16, 0x22,
	0x32, 0x30, 0x32, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30,
	0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x3f, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09,
	0x92, 0x41, 0x06, 0x4a, 0x04, 0x32, 0x2e, 0x35, 0x30, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x47,
	0x62, 0x12, 0x3c, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x92,
	0x41, 0x06, 0x4a, 0x04, 0x35, 0x2e, 0x30, 0x30, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x45, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x92, 0x41, 0x70, 0x0a, 0x6e, 0x2a, 0x25, 0x47,
	0x65, 0x74, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x20, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x55, 0x73, 0x61, 0x67, 0x65, 0x20, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x45, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x22, 0xc1, 0x03, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x3a, 0xd2,
	0x01, 0x92, 0x41, 0xce, 0x01, 0x0a, 0x4e, 0x2a, 0x17, 0x47, 0x65, 0x74, 0x20, 0x53, 0x70, 0x61,
	0x6e, 0x73, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x33, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x20, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75,
	0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x6e, 0x64, 0x2d,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0xc1, 0x02, 0x0a, 0x0c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x22, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x4a,
	0x0c, 0x22, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x31, 0x22, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0xc8, 0x01, 0x92, 0x41, 0xc4, 0x01, 0x0a,
	0x44, 0x2a, 0x0d, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x32, 0x33, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x61, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x2e, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75,
	0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x6e, 0x64, 0x2d,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x22, 0xfc, 0x04, 0x0a, 0x0a, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x55, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x4a, 0x16, 0x22, 0x32, 0x30, 0x32, 0x31, 0x2d, 0x30, 0x31,
	0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x53, 0x0a, 0x12, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x08, 0x92, 0x41, 0x05, 0x4a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x10, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e,
	0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02, 0x31, 0x30, 0x52, 0x0e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59,
	0x0a, 0x16, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x92, 0x41, 0x04,
	0x4a, 0x02, 0x35, 0x30, 0x52, 0x13, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x14, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x92, 0x41, 0x03, 0x4a, 0x01, 0x35, 0x52, 0x11, 0x6c, 0x6f,
	0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a,
	0xc0, 0x01, 0x92, 0x41, 0xbc, 0x01, 0x0a, 0x3c, 0x2a, 0x0b, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x20,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x2d, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x20, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74,
	0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x22, 0xb5, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0b,
	0x73, 0x70, 0x61, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x70, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0xd2, 0x01, 0x92, 0x41, 0xce, 0x01, 0x0a, 0x4e, 0x2a, 0x18,
	0x47, 0x65, 0x74, 0x20, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x32, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
	0x73, 0x70, 0x61, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x2a, 0x7c, 0x0a, 0x1f,
	0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x12,
	0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x22, 0xbe, 0x03, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x3a, 0xd0, 0x01, 0x92,
	0x41, 0xcc, 0x01, 0x0a, 0x4c, 0x2a, 0x16, 0x47, 0x65, 0x74, 0x20, 0x4c, 0x6f, 0x67, 0x73, 0x20,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x32, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f,
	0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xb3, 0x03, 0x0a, 0x09,
	0x4c, 0x6f, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x92, 0x41, 0x05, 0x4a, 0x03, 0x31, 0x30,
	0x30, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x40,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x3a, 0xbe, 0x01, 0x92, 0x41, 0xba, 0x01, 0x0a, 0x3a, 0x2a, 0x0a, 0x4c, 0x6f, 0x67, 0x73, 0x20,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x2c, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20,
	0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f,
	0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x2f, 0x22, 0xaf, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x6c, 0x6f,
	0x67, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x3a, 0xd0, 0x01, 0x92, 0x41, 0xcc, 0x01, 0x0a, 0x4c, 0x2a, 0x17, 0x47, 0x65, 0x74, 0x20, 0x4c,
	0x6f, 0x67, 0x73, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x31, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75,
	0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x6e, 0x64, 0x2d,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x22, 0x28, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd3, 0x02,
	0x0a, 0x27, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0xfc,
	0x01, 0x92, 0x41, 0xf8, 0x01, 0x0a, 0x78, 0x2a, 0x2d, 0x47, 0x65, 0x74, 0x20, 0x44, 0x61, 0x74,
	0x61, 0x20, 0x55, 0x73, 0x61, 0x67, 0x65, 0x20, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x47, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x20, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x2a,
	0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x22, 0xd7, 0x02, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0xfe, 0x01, 0x92, 0x41, 0xfa, 0x01, 0x0a, 0x7a, 0x2a,
	0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x20, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x47, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e,
	0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x12, 0x59, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d,
	0x61, 0x6e, 0x64, 0x2d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xd3, 0x02,
	0x0a, 0x2a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92,
	0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x3a, 0xff, 0x01, 0x92, 0x41, 0xfb, 0x01, 0x0a, 0x7b, 0x2a, 0x30, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x55, 0x73, 0x61, 0x67, 0x65, 0x20, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x47, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x20, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x2a, 0x7c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75,
	0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x6e, 0x64, 0x2d,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x22, 0x84, 0x04, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x09,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x79, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0xd0, 0x01, 0x92, 0x41, 0xcc, 0x01, 0x0a, 0x4c,
	0x2a, 0x16, 0x47, 0x65, 0x74, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x32, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x2a, 0x7c, 0x0a, 0x1f,
	0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x12,
	0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x22, 0x8d, 0x03, 0x0a, 0x0e, 0x44,
	0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x67, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x62,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0xca, 0x01,
	0x92, 0x41, 0xc6, 0x01, 0x0a, 0x46, 0x2a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x20, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x20, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x32, 0x32, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x2a, 0x7c, 0x0a, 0x1f,
	0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x12,
	0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x22, 0xaf, 0x02, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3a, 0xd0, 0x01, 0x92, 0x41, 0xcc, 0x01,
	0x0a, 0x4c, 0x2a, 0x17, 0x47, 0x65, 0x74, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x31, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x2a, 0x7c,
	0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x12, 0x59, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x2a, 0x99, 0x01, 0x0a,
	0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x49, 0x4c, 0x4c, 0x41, 0x52, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52,
	0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x04, 0x32, 0x9e, 0x08, 0x0a, 0x10, 0x44, 0x61, 0x74,
	0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9c, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x30, 0x01, 0x12, 0x98, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x32,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x94, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x01, 0x12, 0xce,
	0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0xda, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a,
	0x22, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x8a, 0x01, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescOnce sync.Once
	file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescData = file_com_coralogix_datausage_v2_data_usage_service_proto_rawDesc
)

func file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescGZIP() []byte {
	file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescOnce.Do(func() {
		file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescData)
	})
	return file_com_coralogix_datausage_v2_data_usage_service_proto_rawDescData
}

var file_com_coralogix_datausage_v2_data_usage_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_com_coralogix_datausage_v2_data_usage_service_proto_goTypes = []any{
	(AggregateBy)(0),                                   // 0: com.coralogix.datausage.v2.AggregateBy
	(*GetTeamDetailedDataUsageRequest)(nil),            // 1: com.coralogix.datausage.v2.GetTeamDetailedDataUsageRequest
	(*GetTeamDetailedDataUsageResponse)(nil),           // 2: com.coralogix.datausage.v2.GetTeamDetailedDataUsageResponse
	(*GetSpansCountRequest)(nil),                       // 3: com.coralogix.datausage.v2.GetSpansCountRequest
	(*ScopesFilter)(nil),                               // 4: com.coralogix.datausage.v2.ScopesFilter
	(*SpansCount)(nil),                                 // 5: com.coralogix.datausage.v2.SpansCount
	(*GetSpansCountResponse)(nil),                      // 6: com.coralogix.datausage.v2.GetSpansCountResponse
	(*GetLogsCountRequest)(nil),                        // 7: com.coralogix.datausage.v2.GetLogsCountRequest
	(*LogsCount)(nil),                                  // 8: com.coralogix.datausage.v2.LogsCount
	(*GetLogsCountResponse)(nil),                       // 9: com.coralogix.datausage.v2.GetLogsCountResponse
	(*GetDataUsageMetricsExportStatusRequest)(nil),     // 10: com.coralogix.datausage.v2.GetDataUsageMetricsExportStatusRequest
	(*GetDataUsageMetricsExportStatusResponse)(nil),    // 11: com.coralogix.datausage.v2.GetDataUsageMetricsExportStatusResponse
	(*UpdateDataUsageMetricsExportStatusRequest)(nil),  // 12: com.coralogix.datausage.v2.UpdateDataUsageMetricsExportStatusRequest
	(*UpdateDataUsageMetricsExportStatusResponse)(nil), // 13: com.coralogix.datausage.v2.UpdateDataUsageMetricsExportStatusResponse
	(*GetDataUsageRequest)(nil),                        // 14: com.coralogix.datausage.v2.GetDataUsageRequest
	(*DataUsageEntry)(nil),                             // 15: com.coralogix.datausage.v2.DataUsageEntry
	(*GetDataUsageResponse)(nil),                       // 16: com.coralogix.datausage.v2.GetDataUsageResponse
	(*DateRange)(nil),                                  // 17: com.coralogix.datausage.v2.DateRange
	(*durationpb.Duration)(nil),                        // 18: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                      // 19: google.protobuf.Timestamp
	(*wrapperspb.FloatValue)(nil),                      // 20: google.protobuf.FloatValue
	(*Dimension)(nil),                                  // 21: com.coralogix.datausage.v2.Dimension
	(*wrapperspb.Int64Value)(nil),                      // 22: google.protobuf.Int64Value
	(Severity)(0),                                      // 23: com.coralogix.datausage.v2.Severity
	(Priority)(0),                                      // 24: com.coralogix.datausage.v2.Priority
}
var file_com_coralogix_datausage_v2_data_usage_service_proto_depIdxs = []int32{
	17, // 0: com.coralogix.datausage.v2.GetTeamDetailedDataUsageRequest.date_range:type_name -> com.coralogix.datausage.v2.DateRange
	18, // 1: com.coralogix.datausage.v2.GetTeamDetailedDataUsageRequest.resolution:type_name -> google.protobuf.Duration
	0,  // 2: com.coralogix.datausage.v2.GetTeamDetailedDataUsageRequest.aggregate:type_name -> com.coralogix.datausage.v2.AggregateBy
	19, // 3: com.coralogix.datausage.v2.GetTeamDetailedDataUsageResponse.timestamp:type_name -> google.protobuf.Timestamp
	20, // 4: com.coralogix.datausage.v2.GetTeamDetailedDataUsageResponse.size_gb:type_name -> google.protobuf.FloatValue
	20, // 5: com.coralogix.datausage.v2.GetTeamDetailedDataUsageResponse.units:type_name -> google.protobuf.FloatValue
	21, // 6: com.coralogix.datausage.v2.GetTeamDetailedDataUsageResponse.dimensions:type_name -> com.coralogix.datausage.v2.Dimension
	17, // 7: com.coralogix.datausage.v2.GetSpansCountRequest.date_range:type_name -> com.coralogix.datausage.v2.DateRange
	18, // 8: com.coralogix.datausage.v2.GetSpansCountRequest.resolution:type_name -> google.protobuf.Duration
	4,  // 9: com.coralogix.datausage.v2.GetSpansCountRequest.filters:type_name -> com.coralogix.datausage.v2.ScopesFilter
	19, // 10: com.coralogix.datausage.v2.SpansCount.timestamp:type_name -> google.protobuf.Timestamp
	22, // 11: com.coralogix.datausage.v2.SpansCount.success_span_count:type_name -> google.protobuf.Int64Value
	22, // 12: com.coralogix.datausage.v2.SpansCount.error_span_count:type_name -> google.protobuf.Int64Value
	22, // 13: com.coralogix.datausage.v2.SpansCount.low_success_span_count:type_name -> google.protobuf.Int64Value
	22, // 14: com.coralogix.datausage.v2.SpansCount.low_error_span_count:type_name -> google.protobuf.Int64Value
	5,  // 15: com.coralogix.datausage.v2.GetSpansCountResponse.spans_count:type_name -> com.coralogix.datausage.v2.SpansCount
	17, // 16: com.coralogix.datausage.v2.GetLogsCountRequest.date_range:type_name -> com.coralogix.datausage.v2.DateRange
	18, // 17: com.coralogix.datausage.v2.GetLogsCountRequest.resolution:type_name -> google.protobuf.Duration
	4,  // 18: com.coralogix.datausage.v2.GetLogsCountRequest.filters:type_name -> com.coralogix.datausage.v2.ScopesFilter
	19, // 19: com.coralogix.datausage.v2.LogsCount.timestamp:type_name -> google.protobuf.Timestamp
	23, // 20: com.coralogix.datausage.v2.LogsCount.severity:type_name -> com.coralogix.datausage.v2.Severity
	24, // 21: com.coralogix.datausage.v2.LogsCount.priority:type_name -> com.coralogix.datausage.v2.Priority
	8,  // 22: com.coralogix.datausage.v2.GetLogsCountResponse.logs_count:type_name -> com.coralogix.datausage.v2.LogsCount
	17, // 23: com.coralogix.datausage.v2.GetDataUsageRequest.date_range:type_name -> com.coralogix.datausage.v2.DateRange
	18, // 24: com.coralogix.datausage.v2.GetDataUsageRequest.resolution:type_name -> google.protobuf.Duration
	0,  // 25: com.coralogix.datausage.v2.GetDataUsageRequest.aggregate:type_name -> com.coralogix.datausage.v2.AggregateBy
	21, // 26: com.coralogix.datausage.v2.GetDataUsageRequest.dimension_filters:type_name -> com.coralogix.datausage.v2.Dimension
	19, // 27: com.coralogix.datausage.v2.DataUsageEntry.timestamp:type_name -> google.protobuf.Timestamp
	21, // 28: com.coralogix.datausage.v2.DataUsageEntry.dimensions:type_name -> com.coralogix.datausage.v2.Dimension
	15, // 29: com.coralogix.datausage.v2.GetDataUsageResponse.entries:type_name -> com.coralogix.datausage.v2.DataUsageEntry
	1,  // 30: com.coralogix.datausage.v2.DataUsageService.GetTeamDetailedDataUsage:input_type -> com.coralogix.datausage.v2.GetTeamDetailedDataUsageRequest
	3,  // 31: com.coralogix.datausage.v2.DataUsageService.GetSpansCount:input_type -> com.coralogix.datausage.v2.GetSpansCountRequest
	7,  // 32: com.coralogix.datausage.v2.DataUsageService.GetLogsCount:input_type -> com.coralogix.datausage.v2.GetLogsCountRequest
	10, // 33: com.coralogix.datausage.v2.DataUsageService.GetDataUsageMetricsExportStatus:input_type -> com.coralogix.datausage.v2.GetDataUsageMetricsExportStatusRequest
	12, // 34: com.coralogix.datausage.v2.DataUsageService.UpdateDataUsageMetricsExportStatus:input_type -> com.coralogix.datausage.v2.UpdateDataUsageMetricsExportStatusRequest
	14, // 35: com.coralogix.datausage.v2.DataUsageService.GetDataUsage:input_type -> com.coralogix.datausage.v2.GetDataUsageRequest
	2,  // 36: com.coralogix.datausage.v2.DataUsageService.GetTeamDetailedDataUsage:output_type -> com.coralogix.datausage.v2.GetTeamDetailedDataUsageResponse
	6,  // 37: com.coralogix.datausage.v2.DataUsageService.GetSpansCount:output_type -> com.coralogix.datausage.v2.GetSpansCountResponse
	9,  // 38: com.coralogix.datausage.v2.DataUsageService.GetLogsCount:output_type -> com.coralogix.datausage.v2.GetLogsCountResponse
	11, // 39: com.coralogix.datausage.v2.DataUsageService.GetDataUsageMetricsExportStatus:output_type -> com.coralogix.datausage.v2.GetDataUsageMetricsExportStatusResponse
	13, // 40: com.coralogix.datausage.v2.DataUsageService.UpdateDataUsageMetricsExportStatus:output_type -> com.coralogix.datausage.v2.UpdateDataUsageMetricsExportStatusResponse
	16, // 41: com.coralogix.datausage.v2.DataUsageService.GetDataUsage:output_type -> com.coralogix.datausage.v2.GetDataUsageResponse
	36, // [36:42] is the sub-list for method output_type
	30, // [30:36] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_com_coralogix_datausage_v2_data_usage_service_proto_init() }
func file_com_coralogix_datausage_v2_data_usage_service_proto_init() {
	if File_com_coralogix_datausage_v2_data_usage_service_proto != nil {
		return
	}
	file_com_coralogix_datausage_v2_data_usage_proto_init()
	file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[2].OneofWrappers = []any{}
	file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_datausage_v2_data_usage_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogix_datausage_v2_data_usage_service_proto_goTypes,
		DependencyIndexes: file_com_coralogix_datausage_v2_data_usage_service_proto_depIdxs,
		EnumInfos:         file_com_coralogix_datausage_v2_data_usage_service_proto_enumTypes,
		MessageInfos:      file_com_coralogix_datausage_v2_data_usage_service_proto_msgTypes,
	}.Build()
	File_com_coralogix_datausage_v2_data_usage_service_proto = out.File
	file_com_coralogix_datausage_v2_data_usage_service_proto_rawDesc = nil
	file_com_coralogix_datausage_v2_data_usage_service_proto_goTypes = nil
	file_com_coralogix_datausage_v2_data_usage_service_proto_depIdxs = nil
}
