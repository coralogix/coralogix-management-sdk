// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: com/coralogix/datausage/v2/data_usage_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataUsageService_GetTeamDetailedDataUsage_FullMethodName           = "/com.coralogix.datausage.v2.DataUsageService/GetTeamDetailedDataUsage"
	DataUsageService_GetSpansCount_FullMethodName                      = "/com.coralogix.datausage.v2.DataUsageService/GetSpansCount"
	DataUsageService_GetLogsCount_FullMethodName                       = "/com.coralogix.datausage.v2.DataUsageService/GetLogsCount"
	DataUsageService_GetDataUsageMetricsExportStatus_FullMethodName    = "/com.coralogix.datausage.v2.DataUsageService/GetDataUsageMetricsExportStatus"
	DataUsageService_UpdateDataUsageMetricsExportStatus_FullMethodName = "/com.coralogix.datausage.v2.DataUsageService/UpdateDataUsageMetricsExportStatus"
	DataUsageService_GetDataUsage_FullMethodName                       = "/com.coralogix.datausage.v2.DataUsageService/GetDataUsage"
	DataUsageService_GetDailyUsageUnits_FullMethodName                 = "/com.coralogix.datausage.v2.DataUsageService/GetDailyUsageUnits"
	DataUsageService_GetDailyUsageProcessedGbs_FullMethodName          = "/com.coralogix.datausage.v2.DataUsageService/GetDailyUsageProcessedGbs"
	DataUsageService_GetDailyUsageEvaluationTokens_FullMethodName      = "/com.coralogix.datausage.v2.DataUsageService/GetDailyUsageEvaluationTokens"
)

// DataUsageServiceClient is the client API for DataUsageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataUsageServiceClient interface {
	// Deprecated: Do not use.
	// Deprecated. Please use GetDataUsage instead.
	GetTeamDetailedDataUsage(ctx context.Context, in *GetTeamDetailedDataUsageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTeamDetailedDataUsageResponse], error)
	GetSpansCount(ctx context.Context, in *GetSpansCountRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSpansCountResponse], error)
	GetLogsCount(ctx context.Context, in *GetLogsCountRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetLogsCountResponse], error)
	GetDataUsageMetricsExportStatus(ctx context.Context, in *GetDataUsageMetricsExportStatusRequest, opts ...grpc.CallOption) (*GetDataUsageMetricsExportStatusResponse, error)
	UpdateDataUsageMetricsExportStatus(ctx context.Context, in *UpdateDataUsageMetricsExportStatusRequest, opts ...grpc.CallOption) (*UpdateDataUsageMetricsExportStatusResponse, error)
	GetDataUsage(ctx context.Context, in *GetDataUsageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDataUsageResponse], error)
	// /Endpoint to fetch daily usage in units
	GetDailyUsageUnits(ctx context.Context, in *GetDailyUsageUnitsRequest, opts ...grpc.CallOption) (*GetDailyUsageUnitsResponse, error)
	// /Endpoint to fetch daily usage in GBs
	GetDailyUsageProcessedGbs(ctx context.Context, in *GetDailyUsageProcessedGbsRequest, opts ...grpc.CallOption) (*GetDailyUsageProcessedGbsResponse, error)
	// /Endpoint to fetch daily usage in evaluation tokens
	GetDailyUsageEvaluationTokens(ctx context.Context, in *GetDailyUsageEvaluationTokensRequest, opts ...grpc.CallOption) (*GetDailyUsageEvaluationTokensResponse, error)
}

type dataUsageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataUsageServiceClient(cc grpc.ClientConnInterface) DataUsageServiceClient {
	return &dataUsageServiceClient{cc}
}

// Deprecated: Do not use.
func (c *dataUsageServiceClient) GetTeamDetailedDataUsage(ctx context.Context, in *GetTeamDetailedDataUsageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTeamDetailedDataUsageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataUsageService_ServiceDesc.Streams[0], DataUsageService_GetTeamDetailedDataUsage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTeamDetailedDataUsageRequest, GetTeamDetailedDataUsageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataUsageService_GetTeamDetailedDataUsageClient = grpc.ServerStreamingClient[GetTeamDetailedDataUsageResponse]

func (c *dataUsageServiceClient) GetSpansCount(ctx context.Context, in *GetSpansCountRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSpansCountResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataUsageService_ServiceDesc.Streams[1], DataUsageService_GetSpansCount_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSpansCountRequest, GetSpansCountResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataUsageService_GetSpansCountClient = grpc.ServerStreamingClient[GetSpansCountResponse]

func (c *dataUsageServiceClient) GetLogsCount(ctx context.Context, in *GetLogsCountRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetLogsCountResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataUsageService_ServiceDesc.Streams[2], DataUsageService_GetLogsCount_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetLogsCountRequest, GetLogsCountResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataUsageService_GetLogsCountClient = grpc.ServerStreamingClient[GetLogsCountResponse]

func (c *dataUsageServiceClient) GetDataUsageMetricsExportStatus(ctx context.Context, in *GetDataUsageMetricsExportStatusRequest, opts ...grpc.CallOption) (*GetDataUsageMetricsExportStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataUsageMetricsExportStatusResponse)
	err := c.cc.Invoke(ctx, DataUsageService_GetDataUsageMetricsExportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataUsageServiceClient) UpdateDataUsageMetricsExportStatus(ctx context.Context, in *UpdateDataUsageMetricsExportStatusRequest, opts ...grpc.CallOption) (*UpdateDataUsageMetricsExportStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDataUsageMetricsExportStatusResponse)
	err := c.cc.Invoke(ctx, DataUsageService_UpdateDataUsageMetricsExportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataUsageServiceClient) GetDataUsage(ctx context.Context, in *GetDataUsageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDataUsageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataUsageService_ServiceDesc.Streams[3], DataUsageService_GetDataUsage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDataUsageRequest, GetDataUsageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataUsageService_GetDataUsageClient = grpc.ServerStreamingClient[GetDataUsageResponse]

func (c *dataUsageServiceClient) GetDailyUsageUnits(ctx context.Context, in *GetDailyUsageUnitsRequest, opts ...grpc.CallOption) (*GetDailyUsageUnitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailyUsageUnitsResponse)
	err := c.cc.Invoke(ctx, DataUsageService_GetDailyUsageUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataUsageServiceClient) GetDailyUsageProcessedGbs(ctx context.Context, in *GetDailyUsageProcessedGbsRequest, opts ...grpc.CallOption) (*GetDailyUsageProcessedGbsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailyUsageProcessedGbsResponse)
	err := c.cc.Invoke(ctx, DataUsageService_GetDailyUsageProcessedGbs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataUsageServiceClient) GetDailyUsageEvaluationTokens(ctx context.Context, in *GetDailyUsageEvaluationTokensRequest, opts ...grpc.CallOption) (*GetDailyUsageEvaluationTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailyUsageEvaluationTokensResponse)
	err := c.cc.Invoke(ctx, DataUsageService_GetDailyUsageEvaluationTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataUsageServiceServer is the server API for DataUsageService service.
// All implementations must embed UnimplementedDataUsageServiceServer
// for forward compatibility.
type DataUsageServiceServer interface {
	// Deprecated: Do not use.
	// Deprecated. Please use GetDataUsage instead.
	GetTeamDetailedDataUsage(*GetTeamDetailedDataUsageRequest, grpc.ServerStreamingServer[GetTeamDetailedDataUsageResponse]) error
	GetSpansCount(*GetSpansCountRequest, grpc.ServerStreamingServer[GetSpansCountResponse]) error
	GetLogsCount(*GetLogsCountRequest, grpc.ServerStreamingServer[GetLogsCountResponse]) error
	GetDataUsageMetricsExportStatus(context.Context, *GetDataUsageMetricsExportStatusRequest) (*GetDataUsageMetricsExportStatusResponse, error)
	UpdateDataUsageMetricsExportStatus(context.Context, *UpdateDataUsageMetricsExportStatusRequest) (*UpdateDataUsageMetricsExportStatusResponse, error)
	GetDataUsage(*GetDataUsageRequest, grpc.ServerStreamingServer[GetDataUsageResponse]) error
	// /Endpoint to fetch daily usage in units
	GetDailyUsageUnits(context.Context, *GetDailyUsageUnitsRequest) (*GetDailyUsageUnitsResponse, error)
	// /Endpoint to fetch daily usage in GBs
	GetDailyUsageProcessedGbs(context.Context, *GetDailyUsageProcessedGbsRequest) (*GetDailyUsageProcessedGbsResponse, error)
	// /Endpoint to fetch daily usage in evaluation tokens
	GetDailyUsageEvaluationTokens(context.Context, *GetDailyUsageEvaluationTokensRequest) (*GetDailyUsageEvaluationTokensResponse, error)
	mustEmbedUnimplementedDataUsageServiceServer()
}

// UnimplementedDataUsageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataUsageServiceServer struct{}

func (UnimplementedDataUsageServiceServer) GetTeamDetailedDataUsage(*GetTeamDetailedDataUsageRequest, grpc.ServerStreamingServer[GetTeamDetailedDataUsageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTeamDetailedDataUsage not implemented")
}
func (UnimplementedDataUsageServiceServer) GetSpansCount(*GetSpansCountRequest, grpc.ServerStreamingServer[GetSpansCountResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetSpansCount not implemented")
}
func (UnimplementedDataUsageServiceServer) GetLogsCount(*GetLogsCountRequest, grpc.ServerStreamingServer[GetLogsCountResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetLogsCount not implemented")
}
func (UnimplementedDataUsageServiceServer) GetDataUsageMetricsExportStatus(context.Context, *GetDataUsageMetricsExportStatusRequest) (*GetDataUsageMetricsExportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataUsageMetricsExportStatus not implemented")
}
func (UnimplementedDataUsageServiceServer) UpdateDataUsageMetricsExportStatus(context.Context, *UpdateDataUsageMetricsExportStatusRequest) (*UpdateDataUsageMetricsExportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataUsageMetricsExportStatus not implemented")
}
func (UnimplementedDataUsageServiceServer) GetDataUsage(*GetDataUsageRequest, grpc.ServerStreamingServer[GetDataUsageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetDataUsage not implemented")
}
func (UnimplementedDataUsageServiceServer) GetDailyUsageUnits(context.Context, *GetDailyUsageUnitsRequest) (*GetDailyUsageUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyUsageUnits not implemented")
}
func (UnimplementedDataUsageServiceServer) GetDailyUsageProcessedGbs(context.Context, *GetDailyUsageProcessedGbsRequest) (*GetDailyUsageProcessedGbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyUsageProcessedGbs not implemented")
}
func (UnimplementedDataUsageServiceServer) GetDailyUsageEvaluationTokens(context.Context, *GetDailyUsageEvaluationTokensRequest) (*GetDailyUsageEvaluationTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyUsageEvaluationTokens not implemented")
}
func (UnimplementedDataUsageServiceServer) mustEmbedUnimplementedDataUsageServiceServer() {}
func (UnimplementedDataUsageServiceServer) testEmbeddedByValue()                          {}

// UnsafeDataUsageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataUsageServiceServer will
// result in compilation errors.
type UnsafeDataUsageServiceServer interface {
	mustEmbedUnimplementedDataUsageServiceServer()
}

func RegisterDataUsageServiceServer(s grpc.ServiceRegistrar, srv DataUsageServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataUsageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataUsageService_ServiceDesc, srv)
}

func _DataUsageService_GetTeamDetailedDataUsage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTeamDetailedDataUsageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataUsageServiceServer).GetTeamDetailedDataUsage(m, &grpc.GenericServerStream[GetTeamDetailedDataUsageRequest, GetTeamDetailedDataUsageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataUsageService_GetTeamDetailedDataUsageServer = grpc.ServerStreamingServer[GetTeamDetailedDataUsageResponse]

func _DataUsageService_GetSpansCount_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSpansCountRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataUsageServiceServer).GetSpansCount(m, &grpc.GenericServerStream[GetSpansCountRequest, GetSpansCountResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataUsageService_GetSpansCountServer = grpc.ServerStreamingServer[GetSpansCountResponse]

func _DataUsageService_GetLogsCount_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLogsCountRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataUsageServiceServer).GetLogsCount(m, &grpc.GenericServerStream[GetLogsCountRequest, GetLogsCountResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataUsageService_GetLogsCountServer = grpc.ServerStreamingServer[GetLogsCountResponse]

func _DataUsageService_GetDataUsageMetricsExportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataUsageMetricsExportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUsageServiceServer).GetDataUsageMetricsExportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataUsageService_GetDataUsageMetricsExportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUsageServiceServer).GetDataUsageMetricsExportStatus(ctx, req.(*GetDataUsageMetricsExportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataUsageService_UpdateDataUsageMetricsExportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataUsageMetricsExportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUsageServiceServer).UpdateDataUsageMetricsExportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataUsageService_UpdateDataUsageMetricsExportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUsageServiceServer).UpdateDataUsageMetricsExportStatus(ctx, req.(*UpdateDataUsageMetricsExportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataUsageService_GetDataUsage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDataUsageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataUsageServiceServer).GetDataUsage(m, &grpc.GenericServerStream[GetDataUsageRequest, GetDataUsageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataUsageService_GetDataUsageServer = grpc.ServerStreamingServer[GetDataUsageResponse]

func _DataUsageService_GetDailyUsageUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyUsageUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUsageServiceServer).GetDailyUsageUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataUsageService_GetDailyUsageUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUsageServiceServer).GetDailyUsageUnits(ctx, req.(*GetDailyUsageUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataUsageService_GetDailyUsageProcessedGbs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyUsageProcessedGbsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUsageServiceServer).GetDailyUsageProcessedGbs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataUsageService_GetDailyUsageProcessedGbs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUsageServiceServer).GetDailyUsageProcessedGbs(ctx, req.(*GetDailyUsageProcessedGbsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataUsageService_GetDailyUsageEvaluationTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyUsageEvaluationTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUsageServiceServer).GetDailyUsageEvaluationTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataUsageService_GetDailyUsageEvaluationTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUsageServiceServer).GetDailyUsageEvaluationTokens(ctx, req.(*GetDailyUsageEvaluationTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataUsageService_ServiceDesc is the grpc.ServiceDesc for DataUsageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataUsageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.datausage.v2.DataUsageService",
	HandlerType: (*DataUsageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataUsageMetricsExportStatus",
			Handler:    _DataUsageService_GetDataUsageMetricsExportStatus_Handler,
		},
		{
			MethodName: "UpdateDataUsageMetricsExportStatus",
			Handler:    _DataUsageService_UpdateDataUsageMetricsExportStatus_Handler,
		},
		{
			MethodName: "GetDailyUsageUnits",
			Handler:    _DataUsageService_GetDailyUsageUnits_Handler,
		},
		{
			MethodName: "GetDailyUsageProcessedGbs",
			Handler:    _DataUsageService_GetDailyUsageProcessedGbs_Handler,
		},
		{
			MethodName: "GetDailyUsageEvaluationTokens",
			Handler:    _DataUsageService_GetDailyUsageEvaluationTokens_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTeamDetailedDataUsage",
			Handler:       _DataUsageService_GetTeamDetailedDataUsage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSpansCount",
			Handler:       _DataUsageService_GetSpansCount_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLogsCount",
			Handler:       _DataUsageService_GetLogsCount_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDataUsage",
			Handler:       _DataUsageService_GetDataUsage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/coralogix/datausage/v2/data_usage_service.proto",
}
