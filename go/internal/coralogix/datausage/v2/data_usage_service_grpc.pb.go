// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: com/coralogix/datausage/v2/data_usage_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DataUsageService_GetTeamDetailedDataUsage_FullMethodName           = "/com.coralogix.datausage.v2.DataUsageService/GetTeamDetailedDataUsage"
	DataUsageService_GetSpansCount_FullMethodName                      = "/com.coralogix.datausage.v2.DataUsageService/GetSpansCount"
	DataUsageService_GetDataUsageMetricsExportStatus_FullMethodName    = "/com.coralogix.datausage.v2.DataUsageService/GetDataUsageMetricsExportStatus"
	DataUsageService_UpdateDataUsageMetricsExportStatus_FullMethodName = "/com.coralogix.datausage.v2.DataUsageService/UpdateDataUsageMetricsExportStatus"
)

// DataUsageServiceClient is the client API for DataUsageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataUsageServiceClient interface {
	GetTeamDetailedDataUsage(ctx context.Context, in *GetTeamDetailedDataUsageRequest, opts ...grpc.CallOption) (DataUsageService_GetTeamDetailedDataUsageClient, error)
	GetSpansCount(ctx context.Context, in *GetSpansCountRequest, opts ...grpc.CallOption) (DataUsageService_GetSpansCountClient, error)
	GetDataUsageMetricsExportStatus(ctx context.Context, in *GetDataUsageMetricsExportStatusRequest, opts ...grpc.CallOption) (*GetDataUsageMetricsExportStatusResponse, error)
	UpdateDataUsageMetricsExportStatus(ctx context.Context, in *UpdateDataUsageMetricsExportStatusRequest, opts ...grpc.CallOption) (*UpdateDataUsageMetricsExportStatusResponse, error)
}

type dataUsageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataUsageServiceClient(cc grpc.ClientConnInterface) DataUsageServiceClient {
	return &dataUsageServiceClient{cc}
}

func (c *dataUsageServiceClient) GetTeamDetailedDataUsage(ctx context.Context, in *GetTeamDetailedDataUsageRequest, opts ...grpc.CallOption) (DataUsageService_GetTeamDetailedDataUsageClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataUsageService_ServiceDesc.Streams[0], DataUsageService_GetTeamDetailedDataUsage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dataUsageServiceGetTeamDetailedDataUsageClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataUsageService_GetTeamDetailedDataUsageClient interface {
	Recv() (*GetTeamDetailedDataUsageResponse, error)
	grpc.ClientStream
}

type dataUsageServiceGetTeamDetailedDataUsageClient struct {
	grpc.ClientStream
}

func (x *dataUsageServiceGetTeamDetailedDataUsageClient) Recv() (*GetTeamDetailedDataUsageResponse, error) {
	m := new(GetTeamDetailedDataUsageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataUsageServiceClient) GetSpansCount(ctx context.Context, in *GetSpansCountRequest, opts ...grpc.CallOption) (DataUsageService_GetSpansCountClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataUsageService_ServiceDesc.Streams[1], DataUsageService_GetSpansCount_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dataUsageServiceGetSpansCountClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataUsageService_GetSpansCountClient interface {
	Recv() (*GetSpansCountResponse, error)
	grpc.ClientStream
}

type dataUsageServiceGetSpansCountClient struct {
	grpc.ClientStream
}

func (x *dataUsageServiceGetSpansCountClient) Recv() (*GetSpansCountResponse, error) {
	m := new(GetSpansCountResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataUsageServiceClient) GetDataUsageMetricsExportStatus(ctx context.Context, in *GetDataUsageMetricsExportStatusRequest, opts ...grpc.CallOption) (*GetDataUsageMetricsExportStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataUsageMetricsExportStatusResponse)
	err := c.cc.Invoke(ctx, DataUsageService_GetDataUsageMetricsExportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataUsageServiceClient) UpdateDataUsageMetricsExportStatus(ctx context.Context, in *UpdateDataUsageMetricsExportStatusRequest, opts ...grpc.CallOption) (*UpdateDataUsageMetricsExportStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDataUsageMetricsExportStatusResponse)
	err := c.cc.Invoke(ctx, DataUsageService_UpdateDataUsageMetricsExportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataUsageServiceServer is the server API for DataUsageService service.
// All implementations must embed UnimplementedDataUsageServiceServer
// for forward compatibility
type DataUsageServiceServer interface {
	GetTeamDetailedDataUsage(*GetTeamDetailedDataUsageRequest, DataUsageService_GetTeamDetailedDataUsageServer) error
	GetSpansCount(*GetSpansCountRequest, DataUsageService_GetSpansCountServer) error
	GetDataUsageMetricsExportStatus(context.Context, *GetDataUsageMetricsExportStatusRequest) (*GetDataUsageMetricsExportStatusResponse, error)
	UpdateDataUsageMetricsExportStatus(context.Context, *UpdateDataUsageMetricsExportStatusRequest) (*UpdateDataUsageMetricsExportStatusResponse, error)
	mustEmbedUnimplementedDataUsageServiceServer()
}

// UnimplementedDataUsageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataUsageServiceServer struct {
}

func (UnimplementedDataUsageServiceServer) GetTeamDetailedDataUsage(*GetTeamDetailedDataUsageRequest, DataUsageService_GetTeamDetailedDataUsageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTeamDetailedDataUsage not implemented")
}
func (UnimplementedDataUsageServiceServer) GetSpansCount(*GetSpansCountRequest, DataUsageService_GetSpansCountServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSpansCount not implemented")
}
func (UnimplementedDataUsageServiceServer) GetDataUsageMetricsExportStatus(context.Context, *GetDataUsageMetricsExportStatusRequest) (*GetDataUsageMetricsExportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataUsageMetricsExportStatus not implemented")
}
func (UnimplementedDataUsageServiceServer) UpdateDataUsageMetricsExportStatus(context.Context, *UpdateDataUsageMetricsExportStatusRequest) (*UpdateDataUsageMetricsExportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataUsageMetricsExportStatus not implemented")
}
func (UnimplementedDataUsageServiceServer) mustEmbedUnimplementedDataUsageServiceServer() {}

// UnsafeDataUsageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataUsageServiceServer will
// result in compilation errors.
type UnsafeDataUsageServiceServer interface {
	mustEmbedUnimplementedDataUsageServiceServer()
}

func RegisterDataUsageServiceServer(s grpc.ServiceRegistrar, srv DataUsageServiceServer) {
	s.RegisterService(&DataUsageService_ServiceDesc, srv)
}

func _DataUsageService_GetTeamDetailedDataUsage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTeamDetailedDataUsageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataUsageServiceServer).GetTeamDetailedDataUsage(m, &dataUsageServiceGetTeamDetailedDataUsageServer{ServerStream: stream})
}

type DataUsageService_GetTeamDetailedDataUsageServer interface {
	Send(*GetTeamDetailedDataUsageResponse) error
	grpc.ServerStream
}

type dataUsageServiceGetTeamDetailedDataUsageServer struct {
	grpc.ServerStream
}

func (x *dataUsageServiceGetTeamDetailedDataUsageServer) Send(m *GetTeamDetailedDataUsageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataUsageService_GetSpansCount_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSpansCountRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataUsageServiceServer).GetSpansCount(m, &dataUsageServiceGetSpansCountServer{ServerStream: stream})
}

type DataUsageService_GetSpansCountServer interface {
	Send(*GetSpansCountResponse) error
	grpc.ServerStream
}

type dataUsageServiceGetSpansCountServer struct {
	grpc.ServerStream
}

func (x *dataUsageServiceGetSpansCountServer) Send(m *GetSpansCountResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataUsageService_GetDataUsageMetricsExportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataUsageMetricsExportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUsageServiceServer).GetDataUsageMetricsExportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataUsageService_GetDataUsageMetricsExportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUsageServiceServer).GetDataUsageMetricsExportStatus(ctx, req.(*GetDataUsageMetricsExportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataUsageService_UpdateDataUsageMetricsExportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataUsageMetricsExportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUsageServiceServer).UpdateDataUsageMetricsExportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataUsageService_UpdateDataUsageMetricsExportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUsageServiceServer).UpdateDataUsageMetricsExportStatus(ctx, req.(*UpdateDataUsageMetricsExportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataUsageService_ServiceDesc is the grpc.ServiceDesc for DataUsageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataUsageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.datausage.v2.DataUsageService",
	HandlerType: (*DataUsageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataUsageMetricsExportStatus",
			Handler:    _DataUsageService_GetDataUsageMetricsExportStatus_Handler,
		},
		{
			MethodName: "UpdateDataUsageMetricsExportStatus",
			Handler:    _DataUsageService_UpdateDataUsageMetricsExportStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTeamDetailedDataUsage",
			Handler:       _DataUsageService_GetTeamDetailedDataUsage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSpansCount",
			Handler:       _DataUsageService_GetSpansCount_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/coralogix/datausage/v2/data_usage_service.proto",
}
