// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.26.1
// source: com/coralogix/datausage/v1/data_usage.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Pillar int32

const (
	Pillar_PILLAR_UNSPECIFIED Pillar = 0
	Pillar_PILLAR_METRICS     Pillar = 1
	Pillar_PILLAR_LOGS        Pillar = 2
	Pillar_PILLAR_SPANS       Pillar = 3
	Pillar_PILLAR_BINARY      Pillar = 4
)

// Enum value maps for Pillar.
var (
	Pillar_name = map[int32]string{
		0: "PILLAR_UNSPECIFIED",
		1: "PILLAR_METRICS",
		2: "PILLAR_LOGS",
		3: "PILLAR_SPANS",
		4: "PILLAR_BINARY",
	}
	Pillar_value = map[string]int32{
		"PILLAR_UNSPECIFIED": 0,
		"PILLAR_METRICS":     1,
		"PILLAR_LOGS":        2,
		"PILLAR_SPANS":       3,
		"PILLAR_BINARY":      4,
	}
)

func (x Pillar) Enum() *Pillar {
	p := new(Pillar)
	*p = x
	return p
}

func (x Pillar) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pillar) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_datausage_v1_data_usage_proto_enumTypes[0].Descriptor()
}

func (Pillar) Type() protoreflect.EnumType {
	return &file_com_coralogix_datausage_v1_data_usage_proto_enumTypes[0]
}

func (x Pillar) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pillar.Descriptor instead.
func (Pillar) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{0}
}

// / Requests data for a group of teams within a set of days
type TeamsAndTimeRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Teams         []*Team                `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
	Range         Range                  `protobuf:"varint,2,opt,name=range,proto3,enum=com.coralogix.datausage.v1.Range" json:"range,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeamsAndTimeRange) Reset() {
	*x = TeamsAndTimeRange{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamsAndTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsAndTimeRange) ProtoMessage() {}

func (x *TeamsAndTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsAndTimeRange.ProtoReflect.Descriptor instead.
func (*TeamsAndTimeRange) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{0}
}

func (x *TeamsAndTimeRange) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *TeamsAndTimeRange) GetRange() Range {
	if x != nil {
		return x.Range
	}
	return Range_RANGE_UNSPECIFIED
}

// / Requests data for a group of teams in a particular moment
type TeamsAndTime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Teams         []*Team                `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeamsAndTime) Reset() {
	*x = TeamsAndTime{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamsAndTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsAndTime) ProtoMessage() {}

func (x *TeamsAndTime) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsAndTime.ProtoReflect.Descriptor instead.
func (*TeamsAndTime) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{1}
}

func (x *TeamsAndTime) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *TeamsAndTime) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type UnitUsage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Low           *Unit                  `protobuf:"bytes,1,opt,name=low,proto3" json:"low,omitempty"`
	Medium        *Unit                  `protobuf:"bytes,2,opt,name=medium,proto3" json:"medium,omitempty"`
	High          *Unit                  `protobuf:"bytes,3,opt,name=high,proto3" json:"high,omitempty"`
	Blocked       *Unit                  `protobuf:"bytes,4,opt,name=blocked,proto3" json:"blocked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnitUsage) Reset() {
	*x = UnitUsage{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnitUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitUsage) ProtoMessage() {}

func (x *UnitUsage) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitUsage.ProtoReflect.Descriptor instead.
func (*UnitUsage) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{2}
}

func (x *UnitUsage) GetLow() *Unit {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *UnitUsage) GetMedium() *Unit {
	if x != nil {
		return x.Medium
	}
	return nil
}

func (x *UnitUsage) GetHigh() *Unit {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *UnitUsage) GetBlocked() *Unit {
	if x != nil {
		return x.Blocked
	}
	return nil
}

type GBUsage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Low           *GB                    `protobuf:"bytes,1,opt,name=low,proto3" json:"low,omitempty"`
	Medium        *GB                    `protobuf:"bytes,2,opt,name=medium,proto3" json:"medium,omitempty"`
	High          *GB                    `protobuf:"bytes,3,opt,name=high,proto3" json:"high,omitempty"`
	Blocked       *GB                    `protobuf:"bytes,4,opt,name=blocked,proto3" json:"blocked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GBUsage) Reset() {
	*x = GBUsage{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GBUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GBUsage) ProtoMessage() {}

func (x *GBUsage) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GBUsage.ProtoReflect.Descriptor instead.
func (*GBUsage) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{3}
}

func (x *GBUsage) GetLow() *GB {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *GBUsage) GetMedium() *GB {
	if x != nil {
		return x.Medium
	}
	return nil
}

func (x *GBUsage) GetHigh() *GB {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *GBUsage) GetBlocked() *GB {
	if x != nil {
		return x.Blocked
	}
	return nil
}

// / Response daily usage
type DailyUsageMetrics struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	DailyAvg              *Unit                  `protobuf:"bytes,1,opt,name=daily_avg,json=dailyAvg,proto3" json:"daily_avg,omitempty"`
	DailyUsage            *Unit                  `protobuf:"bytes,2,opt,name=daily_usage,json=dailyUsage,proto3" json:"daily_usage,omitempty"`
	Date                  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	PayAsYouGoUsage       *Unit                  `protobuf:"bytes,4,opt,name=pay_as_you_go_usage,json=payAsYouGoUsage,proto3,oneof" json:"pay_as_you_go_usage,omitempty"`
	DailyAvgDataSent      *GB                    `protobuf:"bytes,5,opt,name=daily_avg_data_sent,json=dailyAvgDataSent,proto3" json:"daily_avg_data_sent,omitempty"`
	DailyDataSent         *GB                    `protobuf:"bytes,6,opt,name=daily_data_sent,json=dailyDataSent,proto3" json:"daily_data_sent,omitempty"`
	LogsSent              *GBUsage               `protobuf:"bytes,7,opt,name=logs_sent,json=logsSent,proto3" json:"logs_sent,omitempty"`
	MetricsSent           *GBUsage               `protobuf:"bytes,8,opt,name=metrics_sent,json=metricsSent,proto3" json:"metrics_sent,omitempty"`
	TracesSent            *GBUsage               `protobuf:"bytes,9,opt,name=traces_sent,json=tracesSent,proto3" json:"traces_sent,omitempty"`
	LogsQuota             *UnitUsage             `protobuf:"bytes,10,opt,name=logs_quota,json=logsQuota,proto3" json:"logs_quota,omitempty"`
	MetricsQuota          *UnitUsage             `protobuf:"bytes,11,opt,name=metrics_quota,json=metricsQuota,proto3" json:"metrics_quota,omitempty"`
	TracesQuota           *UnitUsage             `protobuf:"bytes,12,opt,name=traces_quota,json=tracesQuota,proto3" json:"traces_quota,omitempty"`
	SessionRecordingSent  *GBUsage               `protobuf:"bytes,13,opt,name=session_recording_sent,json=sessionRecordingSent,proto3" json:"session_recording_sent,omitempty"`
	SessionRecordingQuota *UnitUsage             `protobuf:"bytes,14,opt,name=session_recording_quota,json=sessionRecordingQuota,proto3" json:"session_recording_quota,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *DailyUsageMetrics) Reset() {
	*x = DailyUsageMetrics{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyUsageMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyUsageMetrics) ProtoMessage() {}

func (x *DailyUsageMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyUsageMetrics.ProtoReflect.Descriptor instead.
func (*DailyUsageMetrics) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{4}
}

func (x *DailyUsageMetrics) GetDailyAvg() *Unit {
	if x != nil {
		return x.DailyAvg
	}
	return nil
}

func (x *DailyUsageMetrics) GetDailyUsage() *Unit {
	if x != nil {
		return x.DailyUsage
	}
	return nil
}

func (x *DailyUsageMetrics) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DailyUsageMetrics) GetPayAsYouGoUsage() *Unit {
	if x != nil {
		return x.PayAsYouGoUsage
	}
	return nil
}

func (x *DailyUsageMetrics) GetDailyAvgDataSent() *GB {
	if x != nil {
		return x.DailyAvgDataSent
	}
	return nil
}

func (x *DailyUsageMetrics) GetDailyDataSent() *GB {
	if x != nil {
		return x.DailyDataSent
	}
	return nil
}

func (x *DailyUsageMetrics) GetLogsSent() *GBUsage {
	if x != nil {
		return x.LogsSent
	}
	return nil
}

func (x *DailyUsageMetrics) GetMetricsSent() *GBUsage {
	if x != nil {
		return x.MetricsSent
	}
	return nil
}

func (x *DailyUsageMetrics) GetTracesSent() *GBUsage {
	if x != nil {
		return x.TracesSent
	}
	return nil
}

func (x *DailyUsageMetrics) GetLogsQuota() *UnitUsage {
	if x != nil {
		return x.LogsQuota
	}
	return nil
}

func (x *DailyUsageMetrics) GetMetricsQuota() *UnitUsage {
	if x != nil {
		return x.MetricsQuota
	}
	return nil
}

func (x *DailyUsageMetrics) GetTracesQuota() *UnitUsage {
	if x != nil {
		return x.TracesQuota
	}
	return nil
}

func (x *DailyUsageMetrics) GetSessionRecordingSent() *GBUsage {
	if x != nil {
		return x.SessionRecordingSent
	}
	return nil
}

func (x *DailyUsageMetrics) GetSessionRecordingQuota() *UnitUsage {
	if x != nil {
		return x.SessionRecordingQuota
	}
	return nil
}

type TeamsDailyDataUsage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Team          *Team                  `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	Metrics       []*DailyUsageMetrics   `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeamsDailyDataUsage) Reset() {
	*x = TeamsDailyDataUsage{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamsDailyDataUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsDailyDataUsage) ProtoMessage() {}

func (x *TeamsDailyDataUsage) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsDailyDataUsage.ProtoReflect.Descriptor instead.
func (*TeamsDailyDataUsage) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{5}
}

func (x *TeamsDailyDataUsage) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *TeamsDailyDataUsage) GetMetrics() []*DailyUsageMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// / Response block event
type TeamBlockEvents struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// blocked team
	Team *Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	// List of blocked events
	BlockEvent    []*BlockEvent `protobuf:"bytes,2,rep,name=block_event,json=blockEvent,proto3" json:"block_event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeamBlockEvents) Reset() {
	*x = TeamBlockEvents{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamBlockEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamBlockEvents) ProtoMessage() {}

func (x *TeamBlockEvents) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamBlockEvents.ProtoReflect.Descriptor instead.
func (*TeamBlockEvents) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{6}
}

func (x *TeamBlockEvents) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *TeamBlockEvents) GetBlockEvent() []*BlockEvent {
	if x != nil {
		return x.BlockEvent
	}
	return nil
}

// / Represents the moment a team was blocked
type BlockEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Up to the moment that team get blocked
	DataUnitsIngested *Unit `protobuf:"bytes,1,opt,name=data_units_ingested,json=dataUnitsIngested,proto3" json:"data_units_ingested,omitempty"`
	// Quota at the moment that team get blocked
	Quota *Unit `protobuf:"bytes,2,opt,name=quota,proto3" json:"quota,omitempty"`
	// Timestamp of the event
	BlockedFrom   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=blocked_from,json=blockedFrom,proto3" json:"blocked_from,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockEvent) Reset() {
	*x = BlockEvent{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockEvent) ProtoMessage() {}

func (x *BlockEvent) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockEvent.ProtoReflect.Descriptor instead.
func (*BlockEvent) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{7}
}

func (x *BlockEvent) GetDataUnitsIngested() *Unit {
	if x != nil {
		return x.DataUnitsIngested
	}
	return nil
}

func (x *BlockEvent) GetQuota() *Unit {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *BlockEvent) GetBlockedFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockedFrom
	}
	return nil
}

// / Response quota history
type TeamQuotaHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Team          *Team                  `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	QuotaEntry    []*QuotaHistoryEntry   `protobuf:"bytes,2,rep,name=quota_entry,json=quotaEntry,proto3" json:"quota_entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeamQuotaHistory) Reset() {
	*x = TeamQuotaHistory{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamQuotaHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamQuotaHistory) ProtoMessage() {}

func (x *TeamQuotaHistory) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamQuotaHistory.ProtoReflect.Descriptor instead.
func (*TeamQuotaHistory) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{8}
}

func (x *TeamQuotaHistory) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *TeamQuotaHistory) GetQuotaEntry() []*QuotaHistoryEntry {
	if x != nil {
		return x.QuotaEntry
	}
	return nil
}

type QuotaHistoryEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Quota *Unit                  `protobuf:"bytes,1,opt,name=quota,proto3" json:"quota,omitempty"`
	// timestamp of quota update
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Retention     *Retention             `protobuf:"bytes,3,opt,name=retention,proto3" json:"retention,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuotaHistoryEntry) Reset() {
	*x = QuotaHistoryEntry{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuotaHistoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaHistoryEntry) ProtoMessage() {}

func (x *QuotaHistoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaHistoryEntry.ProtoReflect.Descriptor instead.
func (*QuotaHistoryEntry) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{9}
}

func (x *QuotaHistoryEntry) GetQuota() *Unit {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *QuotaHistoryEntry) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *QuotaHistoryEntry) GetRetention() *Retention {
	if x != nil {
		return x.Retention
	}
	return nil
}

type TeamQuota struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Team          *Team                  `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	Quota         *Unit                  `protobuf:"bytes,2,opt,name=quota,proto3" json:"quota,omitempty"`
	Retention     *Retention             `protobuf:"bytes,3,opt,name=retention,proto3" json:"retention,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeamQuota) Reset() {
	*x = TeamQuota{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamQuota) ProtoMessage() {}

func (x *TeamQuota) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamQuota.ProtoReflect.Descriptor instead.
func (*TeamQuota) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{10}
}

func (x *TeamQuota) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *TeamQuota) GetQuota() *Unit {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *TeamQuota) GetRetention() *Retention {
	if x != nil {
		return x.Retention
	}
	return nil
}

type GenericDimension struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericDimension) Reset() {
	*x = GenericDimension{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericDimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericDimension) ProtoMessage() {}

func (x *GenericDimension) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericDimension.ProtoReflect.Descriptor instead.
func (*GenericDimension) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{11}
}

func (x *GenericDimension) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GenericDimension) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Dimension struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Dimension:
	//
	//	*Dimension_Pillar
	//	*Dimension_GenericDimension
	//	*Dimension_Tier
	//	*Dimension_Severity
	//	*Dimension_Priority
	Dimension     isDimension_Dimension `protobuf_oneof:"dimension"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dimension) Reset() {
	*x = Dimension{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dimension) ProtoMessage() {}

func (x *Dimension) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dimension.ProtoReflect.Descriptor instead.
func (*Dimension) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{12}
}

func (x *Dimension) GetDimension() isDimension_Dimension {
	if x != nil {
		return x.Dimension
	}
	return nil
}

func (x *Dimension) GetPillar() Pillar {
	if x != nil {
		if x, ok := x.Dimension.(*Dimension_Pillar); ok {
			return x.Pillar
		}
	}
	return Pillar_PILLAR_UNSPECIFIED
}

func (x *Dimension) GetGenericDimension() *GenericDimension {
	if x != nil {
		if x, ok := x.Dimension.(*Dimension_GenericDimension); ok {
			return x.GenericDimension
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in com/coralogix/datausage/v1/data_usage.proto.
func (x *Dimension) GetTier() TcoTier {
	if x != nil {
		if x, ok := x.Dimension.(*Dimension_Tier); ok {
			return x.Tier
		}
	}
	return TcoTier_TCO_TIER_UNSPECIFIED
}

func (x *Dimension) GetSeverity() Severity {
	if x != nil {
		if x, ok := x.Dimension.(*Dimension_Severity); ok {
			return x.Severity
		}
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *Dimension) GetPriority() Priority {
	if x != nil {
		if x, ok := x.Dimension.(*Dimension_Priority); ok {
			return x.Priority
		}
	}
	return Priority_PRIORITY_UNSPECIFIED
}

type isDimension_Dimension interface {
	isDimension_Dimension()
}

type Dimension_Pillar struct {
	Pillar Pillar `protobuf:"varint,1,opt,name=pillar,proto3,enum=com.coralogix.datausage.v1.Pillar,oneof"`
}

type Dimension_GenericDimension struct {
	GenericDimension *GenericDimension `protobuf:"bytes,2,opt,name=generic_dimension,json=genericDimension,proto3,oneof"`
}

type Dimension_Tier struct {
	// Deprecated: Marked as deprecated in com/coralogix/datausage/v1/data_usage.proto.
	Tier TcoTier `protobuf:"varint,3,opt,name=tier,proto3,enum=com.coralogix.datausage.v1.TcoTier,oneof"`
}

type Dimension_Severity struct {
	Severity Severity `protobuf:"varint,4,opt,name=severity,proto3,enum=com.coralogix.datausage.v1.Severity,oneof"`
}

type Dimension_Priority struct {
	Priority Priority `protobuf:"varint,5,opt,name=priority,proto3,enum=com.coralogix.datausage.v1.Priority,oneof"`
}

func (*Dimension_Pillar) isDimension_Dimension() {}

func (*Dimension_GenericDimension) isDimension_Dimension() {}

func (*Dimension_Tier) isDimension_Dimension() {}

func (*Dimension_Severity) isDimension_Dimension() {}

func (*Dimension_Priority) isDimension_Dimension() {}

type DataUsage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Usage         []*DataUsage_Usage     `protobuf:"bytes,1,rep,name=usage,proto3" json:"usage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataUsage) Reset() {
	*x = DataUsage{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataUsage) ProtoMessage() {}

func (x *DataUsage) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataUsage.ProtoReflect.Descriptor instead.
func (*DataUsage) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{13}
}

func (x *DataUsage) GetUsage() []*DataUsage_Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type DataUsage_Usage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Size          *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataUsage_Usage) Reset() {
	*x = DataUsage_Usage{}
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataUsage_Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataUsage_Usage) ProtoMessage() {}

func (x *DataUsage_Usage) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataUsage_Usage.ProtoReflect.Descriptor instead.
func (*DataUsage_Usage) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP(), []int{13, 0}
}

func (x *DataUsage_Usage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DataUsage_Usage) GetSize() *wrapperspb.FloatValue {
	if x != nil {
		return x.Size
	}
	return nil
}

var File_com_coralogix_datausage_v1_data_usage_proto protoreflect.FileDescriptor

var file_com_coralogix_datausage_v1_data_usage_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x27, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x41, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x12, 0x37, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x0c, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x03, 0x6c, 0x6f, 0x77, 0x12, 0x38, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x34,
	0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x12, 0x3a, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x22, 0xe1, 0x01, 0x0a, 0x07, 0x47, 0x42, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x03,
	0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x42, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x36,
	0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x42, 0x52, 0x06,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x42, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x42, 0x52, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x22, 0xaf, 0x08, 0x0a, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x08, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x76, 0x67, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x13,
	0x70, 0x61, 0x79, 0x5f, 0x61, 0x73, 0x5f, 0x79, 0x6f, 0x75, 0x5f, 0x67, 0x6f, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x70,
	0x61, 0x79, 0x41, 0x73, 0x59, 0x6f, 0x75, 0x47, 0x6f, 0x55, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x4d, 0x0a, 0x13, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x42, 0x52, 0x10,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x76, 0x67, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x46, 0x0a, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x42, 0x52, 0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x42, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x42,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x42, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x4a,
	0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x42, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x5d, 0x0a, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x73, 0x5f, 0x79, 0x6f, 0x75, 0x5f, 0x67, 0x6f,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x12, 0x47, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x90, 0x01,
	0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x47, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0xd5, 0x01, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x50, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x36, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x61,
	0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a,
	0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x12, 0x4e, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x09, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xbe, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x34,
	0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x12, 0x36, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x09,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x3a, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfa, 0x02,
	0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x70,
	0x69, 0x6c, 0x6c, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x12, 0x5b, 0x0a, 0x11, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x63, 0x6f, 0x54, 0x69, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a,
	0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x72, 0x0a, 0x05, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x2a,
	0x6a, 0x0a, 0x06, 0x50, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x49, 0x4c,
	0x4c, 0x41, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x49, 0x4c, 0x4c, 0x41, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x49, 0x4c, 0x4c, 0x41, 0x52, 0x5f,
	0x4c, 0x4f, 0x47, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x49, 0x4c, 0x4c, 0x41, 0x52,
	0x5f, 0x53, 0x50, 0x41, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x49, 0x4c, 0x4c,
	0x41, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_datausage_v1_data_usage_proto_rawDescOnce sync.Once
	file_com_coralogix_datausage_v1_data_usage_proto_rawDescData = file_com_coralogix_datausage_v1_data_usage_proto_rawDesc
)

func file_com_coralogix_datausage_v1_data_usage_proto_rawDescGZIP() []byte {
	file_com_coralogix_datausage_v1_data_usage_proto_rawDescOnce.Do(func() {
		file_com_coralogix_datausage_v1_data_usage_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_datausage_v1_data_usage_proto_rawDescData)
	})
	return file_com_coralogix_datausage_v1_data_usage_proto_rawDescData
}

var file_com_coralogix_datausage_v1_data_usage_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_coralogix_datausage_v1_data_usage_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_com_coralogix_datausage_v1_data_usage_proto_goTypes = []any{
	(Pillar)(0),                   // 0: com.coralogix.datausage.v1.Pillar
	(*TeamsAndTimeRange)(nil),     // 1: com.coralogix.datausage.v1.TeamsAndTimeRange
	(*TeamsAndTime)(nil),          // 2: com.coralogix.datausage.v1.TeamsAndTime
	(*UnitUsage)(nil),             // 3: com.coralogix.datausage.v1.UnitUsage
	(*GBUsage)(nil),               // 4: com.coralogix.datausage.v1.GBUsage
	(*DailyUsageMetrics)(nil),     // 5: com.coralogix.datausage.v1.DailyUsageMetrics
	(*TeamsDailyDataUsage)(nil),   // 6: com.coralogix.datausage.v1.TeamsDailyDataUsage
	(*TeamBlockEvents)(nil),       // 7: com.coralogix.datausage.v1.TeamBlockEvents
	(*BlockEvent)(nil),            // 8: com.coralogix.datausage.v1.BlockEvent
	(*TeamQuotaHistory)(nil),      // 9: com.coralogix.datausage.v1.TeamQuotaHistory
	(*QuotaHistoryEntry)(nil),     // 10: com.coralogix.datausage.v1.QuotaHistoryEntry
	(*TeamQuota)(nil),             // 11: com.coralogix.datausage.v1.TeamQuota
	(*GenericDimension)(nil),      // 12: com.coralogix.datausage.v1.GenericDimension
	(*Dimension)(nil),             // 13: com.coralogix.datausage.v1.Dimension
	(*DataUsage)(nil),             // 14: com.coralogix.datausage.v1.DataUsage
	(*DataUsage_Usage)(nil),       // 15: com.coralogix.datausage.v1.DataUsage.Usage
	(*Team)(nil),                  // 16: com.coralogix.datausage.v1.Team
	(Range)(0),                    // 17: com.coralogix.datausage.v1.Range
	(*timestamppb.Timestamp)(nil), // 18: google.protobuf.Timestamp
	(*Unit)(nil),                  // 19: com.coralogix.datausage.v1.Unit
	(*GB)(nil),                    // 20: com.coralogix.datausage.v1.GB
	(*Retention)(nil),             // 21: com.coralogix.datausage.v1.Retention
	(TcoTier)(0),                  // 22: com.coralogix.datausage.v1.TcoTier
	(Severity)(0),                 // 23: com.coralogix.datausage.v1.Severity
	(Priority)(0),                 // 24: com.coralogix.datausage.v1.Priority
	(*wrapperspb.FloatValue)(nil), // 25: google.protobuf.FloatValue
}
var file_com_coralogix_datausage_v1_data_usage_proto_depIdxs = []int32{
	16, // 0: com.coralogix.datausage.v1.TeamsAndTimeRange.teams:type_name -> com.coralogix.datausage.v1.Team
	17, // 1: com.coralogix.datausage.v1.TeamsAndTimeRange.range:type_name -> com.coralogix.datausage.v1.Range
	16, // 2: com.coralogix.datausage.v1.TeamsAndTime.teams:type_name -> com.coralogix.datausage.v1.Team
	18, // 3: com.coralogix.datausage.v1.TeamsAndTime.time:type_name -> google.protobuf.Timestamp
	19, // 4: com.coralogix.datausage.v1.UnitUsage.low:type_name -> com.coralogix.datausage.v1.Unit
	19, // 5: com.coralogix.datausage.v1.UnitUsage.medium:type_name -> com.coralogix.datausage.v1.Unit
	19, // 6: com.coralogix.datausage.v1.UnitUsage.high:type_name -> com.coralogix.datausage.v1.Unit
	19, // 7: com.coralogix.datausage.v1.UnitUsage.blocked:type_name -> com.coralogix.datausage.v1.Unit
	20, // 8: com.coralogix.datausage.v1.GBUsage.low:type_name -> com.coralogix.datausage.v1.GB
	20, // 9: com.coralogix.datausage.v1.GBUsage.medium:type_name -> com.coralogix.datausage.v1.GB
	20, // 10: com.coralogix.datausage.v1.GBUsage.high:type_name -> com.coralogix.datausage.v1.GB
	20, // 11: com.coralogix.datausage.v1.GBUsage.blocked:type_name -> com.coralogix.datausage.v1.GB
	19, // 12: com.coralogix.datausage.v1.DailyUsageMetrics.daily_avg:type_name -> com.coralogix.datausage.v1.Unit
	19, // 13: com.coralogix.datausage.v1.DailyUsageMetrics.daily_usage:type_name -> com.coralogix.datausage.v1.Unit
	18, // 14: com.coralogix.datausage.v1.DailyUsageMetrics.date:type_name -> google.protobuf.Timestamp
	19, // 15: com.coralogix.datausage.v1.DailyUsageMetrics.pay_as_you_go_usage:type_name -> com.coralogix.datausage.v1.Unit
	20, // 16: com.coralogix.datausage.v1.DailyUsageMetrics.daily_avg_data_sent:type_name -> com.coralogix.datausage.v1.GB
	20, // 17: com.coralogix.datausage.v1.DailyUsageMetrics.daily_data_sent:type_name -> com.coralogix.datausage.v1.GB
	4,  // 18: com.coralogix.datausage.v1.DailyUsageMetrics.logs_sent:type_name -> com.coralogix.datausage.v1.GBUsage
	4,  // 19: com.coralogix.datausage.v1.DailyUsageMetrics.metrics_sent:type_name -> com.coralogix.datausage.v1.GBUsage
	4,  // 20: com.coralogix.datausage.v1.DailyUsageMetrics.traces_sent:type_name -> com.coralogix.datausage.v1.GBUsage
	3,  // 21: com.coralogix.datausage.v1.DailyUsageMetrics.logs_quota:type_name -> com.coralogix.datausage.v1.UnitUsage
	3,  // 22: com.coralogix.datausage.v1.DailyUsageMetrics.metrics_quota:type_name -> com.coralogix.datausage.v1.UnitUsage
	3,  // 23: com.coralogix.datausage.v1.DailyUsageMetrics.traces_quota:type_name -> com.coralogix.datausage.v1.UnitUsage
	4,  // 24: com.coralogix.datausage.v1.DailyUsageMetrics.session_recording_sent:type_name -> com.coralogix.datausage.v1.GBUsage
	3,  // 25: com.coralogix.datausage.v1.DailyUsageMetrics.session_recording_quota:type_name -> com.coralogix.datausage.v1.UnitUsage
	16, // 26: com.coralogix.datausage.v1.TeamsDailyDataUsage.team:type_name -> com.coralogix.datausage.v1.Team
	5,  // 27: com.coralogix.datausage.v1.TeamsDailyDataUsage.metrics:type_name -> com.coralogix.datausage.v1.DailyUsageMetrics
	16, // 28: com.coralogix.datausage.v1.TeamBlockEvents.team:type_name -> com.coralogix.datausage.v1.Team
	8,  // 29: com.coralogix.datausage.v1.TeamBlockEvents.block_event:type_name -> com.coralogix.datausage.v1.BlockEvent
	19, // 30: com.coralogix.datausage.v1.BlockEvent.data_units_ingested:type_name -> com.coralogix.datausage.v1.Unit
	19, // 31: com.coralogix.datausage.v1.BlockEvent.quota:type_name -> com.coralogix.datausage.v1.Unit
	18, // 32: com.coralogix.datausage.v1.BlockEvent.blocked_from:type_name -> google.protobuf.Timestamp
	16, // 33: com.coralogix.datausage.v1.TeamQuotaHistory.team:type_name -> com.coralogix.datausage.v1.Team
	10, // 34: com.coralogix.datausage.v1.TeamQuotaHistory.quota_entry:type_name -> com.coralogix.datausage.v1.QuotaHistoryEntry
	19, // 35: com.coralogix.datausage.v1.QuotaHistoryEntry.quota:type_name -> com.coralogix.datausage.v1.Unit
	18, // 36: com.coralogix.datausage.v1.QuotaHistoryEntry.timestamp:type_name -> google.protobuf.Timestamp
	21, // 37: com.coralogix.datausage.v1.QuotaHistoryEntry.retention:type_name -> com.coralogix.datausage.v1.Retention
	16, // 38: com.coralogix.datausage.v1.TeamQuota.team:type_name -> com.coralogix.datausage.v1.Team
	19, // 39: com.coralogix.datausage.v1.TeamQuota.quota:type_name -> com.coralogix.datausage.v1.Unit
	21, // 40: com.coralogix.datausage.v1.TeamQuota.retention:type_name -> com.coralogix.datausage.v1.Retention
	0,  // 41: com.coralogix.datausage.v1.Dimension.pillar:type_name -> com.coralogix.datausage.v1.Pillar
	12, // 42: com.coralogix.datausage.v1.Dimension.generic_dimension:type_name -> com.coralogix.datausage.v1.GenericDimension
	22, // 43: com.coralogix.datausage.v1.Dimension.tier:type_name -> com.coralogix.datausage.v1.TcoTier
	23, // 44: com.coralogix.datausage.v1.Dimension.severity:type_name -> com.coralogix.datausage.v1.Severity
	24, // 45: com.coralogix.datausage.v1.Dimension.priority:type_name -> com.coralogix.datausage.v1.Priority
	15, // 46: com.coralogix.datausage.v1.DataUsage.usage:type_name -> com.coralogix.datausage.v1.DataUsage.Usage
	18, // 47: com.coralogix.datausage.v1.DataUsage.Usage.timestamp:type_name -> google.protobuf.Timestamp
	25, // 48: com.coralogix.datausage.v1.DataUsage.Usage.size:type_name -> google.protobuf.FloatValue
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_com_coralogix_datausage_v1_data_usage_proto_init() }
func file_com_coralogix_datausage_v1_data_usage_proto_init() {
	if File_com_coralogix_datausage_v1_data_usage_proto != nil {
		return
	}
	file_com_coralogix_datausage_v1_common_proto_init()
	file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[4].OneofWrappers = []any{}
	file_com_coralogix_datausage_v1_data_usage_proto_msgTypes[12].OneofWrappers = []any{
		(*Dimension_Pillar)(nil),
		(*Dimension_GenericDimension)(nil),
		(*Dimension_Tier)(nil),
		(*Dimension_Severity)(nil),
		(*Dimension_Priority)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_datausage_v1_data_usage_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_datausage_v1_data_usage_proto_goTypes,
		DependencyIndexes: file_com_coralogix_datausage_v1_data_usage_proto_depIdxs,
		EnumInfos:         file_com_coralogix_datausage_v1_data_usage_proto_enumTypes,
		MessageInfos:      file_com_coralogix_datausage_v1_data_usage_proto_msgTypes,
	}.Build()
	File_com_coralogix_datausage_v1_data_usage_proto = out.File
	file_com_coralogix_datausage_v1_data_usage_proto_rawDesc = nil
	file_com_coralogix_datausage_v1_data_usage_proto_goTypes = nil
	file_com_coralogix_datausage_v1_data_usage_proto_depIdxs = nil
}
