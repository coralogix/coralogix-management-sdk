// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.1
// source: com/coralogix/datausage/v1/daily_usage_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DailyUsageService_DailyUsage_FullMethodName        = "/com.coralogix.datausage.v1.DailyUsageService/DailyUsage"
	DailyUsageService_OverageDailyUsage_FullMethodName = "/com.coralogix.datausage.v1.DailyUsageService/OverageDailyUsage"
)

// DailyUsageServiceClient is the client API for DailyUsageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DailyUsageServiceClient interface {
	// /Endpoint to fetch daily usage
	DailyUsage(ctx context.Context, in *DailyUsageRequest, opts ...grpc.CallOption) (*DailyUsageResponse, error)
	// /Endpoint to fetch how many units "pay as you go" customers have went over their plan
	OverageDailyUsage(ctx context.Context, in *OverageDailyUsageRequest, opts ...grpc.CallOption) (*OverageDailyUsageResponse, error)
}

type dailyUsageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDailyUsageServiceClient(cc grpc.ClientConnInterface) DailyUsageServiceClient {
	return &dailyUsageServiceClient{cc}
}

func (c *dailyUsageServiceClient) DailyUsage(ctx context.Context, in *DailyUsageRequest, opts ...grpc.CallOption) (*DailyUsageResponse, error) {
	out := new(DailyUsageResponse)
	err := c.cc.Invoke(ctx, DailyUsageService_DailyUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyUsageServiceClient) OverageDailyUsage(ctx context.Context, in *OverageDailyUsageRequest, opts ...grpc.CallOption) (*OverageDailyUsageResponse, error) {
	out := new(OverageDailyUsageResponse)
	err := c.cc.Invoke(ctx, DailyUsageService_OverageDailyUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DailyUsageServiceServer is the server API for DailyUsageService service.
// All implementations must embed UnimplementedDailyUsageServiceServer
// for forward compatibility
type DailyUsageServiceServer interface {
	// /Endpoint to fetch daily usage
	DailyUsage(context.Context, *DailyUsageRequest) (*DailyUsageResponse, error)
	// /Endpoint to fetch how many units "pay as you go" customers have went over their plan
	OverageDailyUsage(context.Context, *OverageDailyUsageRequest) (*OverageDailyUsageResponse, error)
	mustEmbedUnimplementedDailyUsageServiceServer()
}

// UnimplementedDailyUsageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDailyUsageServiceServer struct {
}

func (UnimplementedDailyUsageServiceServer) DailyUsage(context.Context, *DailyUsageRequest) (*DailyUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailyUsage not implemented")
}
func (UnimplementedDailyUsageServiceServer) OverageDailyUsage(context.Context, *OverageDailyUsageRequest) (*OverageDailyUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverageDailyUsage not implemented")
}
func (UnimplementedDailyUsageServiceServer) mustEmbedUnimplementedDailyUsageServiceServer() {}

// UnsafeDailyUsageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DailyUsageServiceServer will
// result in compilation errors.
type UnsafeDailyUsageServiceServer interface {
	mustEmbedUnimplementedDailyUsageServiceServer()
}

func RegisterDailyUsageServiceServer(s grpc.ServiceRegistrar, srv DailyUsageServiceServer) {
	s.RegisterService(&DailyUsageService_ServiceDesc, srv)
}

func _DailyUsageService_DailyUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyUsageServiceServer).DailyUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DailyUsageService_DailyUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyUsageServiceServer).DailyUsage(ctx, req.(*DailyUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyUsageService_OverageDailyUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverageDailyUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyUsageServiceServer).OverageDailyUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DailyUsageService_OverageDailyUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyUsageServiceServer).OverageDailyUsage(ctx, req.(*OverageDailyUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DailyUsageService_ServiceDesc is the grpc.ServiceDesc for DailyUsageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DailyUsageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.datausage.v1.DailyUsageService",
	HandlerType: (*DailyUsageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DailyUsage",
			Handler:    _DailyUsageService_DailyUsage_Handler,
		},
		{
			MethodName: "OverageDailyUsage",
			Handler:    _DailyUsageService_OverageDailyUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/datausage/v1/daily_usage_service.proto",
}
