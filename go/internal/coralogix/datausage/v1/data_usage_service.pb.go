// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: com/coralogix/datausage/v1/data_usage_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetDataUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamIds    []*Team              `protobuf:"bytes,1,rep,name=team_ids,json=teamIds,proto3" json:"team_ids,omitempty"`
	DateRange  *DateRange           `protobuf:"bytes,2,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	Resolution *durationpb.Duration `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	Dimensions []*Dimension         `protobuf:"bytes,4,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
}

func (x *GetDataUsageRequest) Reset() {
	*x = GetDataUsageRequest{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataUsageRequest) ProtoMessage() {}

func (x *GetDataUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataUsageRequest.ProtoReflect.Descriptor instead.
func (*GetDataUsageRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetDataUsageRequest) GetTeamIds() []*Team {
	if x != nil {
		return x.TeamIds
	}
	return nil
}

func (x *GetDataUsageRequest) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GetDataUsageRequest) GetResolution() *durationpb.Duration {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *GetDataUsageRequest) GetDimensions() []*Dimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

type GetDataUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map for TeamId -> DataUsage
	DataUsage map[uint64]*DataUsage `protobuf:"bytes,1,rep,name=data_usage,json=dataUsage,proto3" json:"data_usage,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetDataUsageResponse) Reset() {
	*x = GetDataUsageResponse{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataUsageResponse) ProtoMessage() {}

func (x *GetDataUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataUsageResponse.ProtoReflect.Descriptor instead.
func (*GetDataUsageResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetDataUsageResponse) GetDataUsage() map[uint64]*DataUsage {
	if x != nil {
		return x.DataUsage
	}
	return nil
}

type GetTeamsBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *TeamsAndTimeRange `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *GetTeamsBlocksRequest) Reset() {
	*x = GetTeamsBlocksRequest{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamsBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsBlocksRequest) ProtoMessage() {}

func (x *GetTeamsBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetTeamsBlocksRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetTeamsBlocksRequest) GetParam() *TeamsAndTimeRange {
	if x != nil {
		return x.Param
	}
	return nil
}

type GetTeamsBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*TeamBlockEvents `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *GetTeamsBlocksResponse) Reset() {
	*x = GetTeamsBlocksResponse{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamsBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsBlocksResponse) ProtoMessage() {}

func (x *GetTeamsBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsBlocksResponse.ProtoReflect.Descriptor instead.
func (*GetTeamsBlocksResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetTeamsBlocksResponse) GetEvents() []*TeamBlockEvents {
	if x != nil {
		return x.Events
	}
	return nil
}

type GetTeamsQuotaHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *TeamsAndTimeRange `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *GetTeamsQuotaHistoryRequest) Reset() {
	*x = GetTeamsQuotaHistoryRequest{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamsQuotaHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsQuotaHistoryRequest) ProtoMessage() {}

func (x *GetTeamsQuotaHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsQuotaHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetTeamsQuotaHistoryRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetTeamsQuotaHistoryRequest) GetParam() *TeamsAndTimeRange {
	if x != nil {
		return x.Param
	}
	return nil
}

type GetTeamsQuotaHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoryEntries []*TeamQuotaHistory `protobuf:"bytes,1,rep,name=history_entries,json=historyEntries,proto3" json:"history_entries,omitempty"`
}

func (x *GetTeamsQuotaHistoryResponse) Reset() {
	*x = GetTeamsQuotaHistoryResponse{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamsQuotaHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsQuotaHistoryResponse) ProtoMessage() {}

func (x *GetTeamsQuotaHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsQuotaHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetTeamsQuotaHistoryResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetTeamsQuotaHistoryResponse) GetHistoryEntries() []*TeamQuotaHistory {
	if x != nil {
		return x.HistoryEntries
	}
	return nil
}

type GetTeamsDailyUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *TeamsAndTimeRange `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *GetTeamsDailyUsageRequest) Reset() {
	*x = GetTeamsDailyUsageRequest{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamsDailyUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsDailyUsageRequest) ProtoMessage() {}

func (x *GetTeamsDailyUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsDailyUsageRequest.ProtoReflect.Descriptor instead.
func (*GetTeamsDailyUsageRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetTeamsDailyUsageRequest) GetParam() *TeamsAndTimeRange {
	if x != nil {
		return x.Param
	}
	return nil
}

type GetTeamsDailyUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamsUsage []*TeamsDailyDataUsage `protobuf:"bytes,1,rep,name=teams_usage,json=teamsUsage,proto3" json:"teams_usage,omitempty"`
}

func (x *GetTeamsDailyUsageResponse) Reset() {
	*x = GetTeamsDailyUsageResponse{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamsDailyUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsDailyUsageResponse) ProtoMessage() {}

func (x *GetTeamsDailyUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsDailyUsageResponse.ProtoReflect.Descriptor instead.
func (*GetTeamsDailyUsageResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetTeamsDailyUsageResponse) GetTeamsUsage() []*TeamsDailyDataUsage {
	if x != nil {
		return x.TeamsUsage
	}
	return nil
}

type GetTeamsQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *TeamsAndTime `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *GetTeamsQuotaRequest) Reset() {
	*x = GetTeamsQuotaRequest{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamsQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsQuotaRequest) ProtoMessage() {}

func (x *GetTeamsQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsQuotaRequest.ProtoReflect.Descriptor instead.
func (*GetTeamsQuotaRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetTeamsQuotaRequest) GetParam() *TeamsAndTime {
	if x != nil {
		return x.Param
	}
	return nil
}

type GetTeamsQuotaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamsQuota []*TeamQuota `protobuf:"bytes,1,rep,name=teams_quota,json=teamsQuota,proto3" json:"teams_quota,omitempty"`
}

func (x *GetTeamsQuotaResponse) Reset() {
	*x = GetTeamsQuotaResponse{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamsQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsQuotaResponse) ProtoMessage() {}

func (x *GetTeamsQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsQuotaResponse.ProtoReflect.Descriptor instead.
func (*GetTeamsQuotaResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetTeamsQuotaResponse) GetTeamsQuota() []*TeamQuota {
	if x != nil {
		return x.TeamsQuota
	}
	return nil
}

type GetTeamsDetailedUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *TeamsAndTimeRange `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *GetTeamsDetailedUsageRequest) Reset() {
	*x = GetTeamsDetailedUsageRequest{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamsDetailedUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsDetailedUsageRequest) ProtoMessage() {}

func (x *GetTeamsDetailedUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsDetailedUsageRequest.ProtoReflect.Descriptor instead.
func (*GetTeamsDetailedUsageRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetTeamsDetailedUsageRequest) GetParam() *TeamsAndTimeRange {
	if x != nil {
		return x.Param
	}
	return nil
}

type GetTeamsDetailedUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*DataUsageReport `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *GetTeamsDetailedUsageResponse) Reset() {
	*x = GetTeamsDetailedUsageResponse{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamsDetailedUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsDetailedUsageResponse) ProtoMessage() {}

func (x *GetTeamsDetailedUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsDetailedUsageResponse.ProtoReflect.Descriptor instead.
func (*GetTeamsDetailedUsageResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetTeamsDetailedUsageResponse) GetReports() []*DataUsageReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

type GetDetailedDataUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId *Team `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// Date request interval
	// It can be a flexible date_range or one of the available ranges, for convenience.
	//
	// Types that are assignable to RequestInterval:
	//
	//	*GetDetailedDataUsageRequest_Range
	//	*GetDetailedDataUsageRequest_DateRange
	RequestInterval isGetDetailedDataUsageRequest_RequestInterval `protobuf_oneof:"request_interval"`
	// Aggregation resolution with minute precision.
	//
	// Do note that to avoid overloading the service we enforce resolution limits
	// that depend on the server configuration. This is configured by the server.
	// i.e. 1 min resolution for an interval of 30 days would explode into too many data points.
	Resolution Resolution `protobuf:"varint,4,opt,name=resolution,proto3,enum=com.coralogix.datausage.v1.Resolution" json:"resolution,omitempty"`
	// Dimensions to filter by
	// i.e. if we filter by Dimension [ {"subsystem", "subsystem1"}]
	//
	//	we only return entries that at least have that dimension i.e. [{"subsystem", "subsystem1"}, {"application", "application1"}]
	Dimensions []*Dimension `protobuf:"bytes,5,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
}

func (x *GetDetailedDataUsageRequest) Reset() {
	*x = GetDetailedDataUsageRequest{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDetailedDataUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailedDataUsageRequest) ProtoMessage() {}

func (x *GetDetailedDataUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailedDataUsageRequest.ProtoReflect.Descriptor instead.
func (*GetDetailedDataUsageRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetDetailedDataUsageRequest) GetTeamId() *Team {
	if x != nil {
		return x.TeamId
	}
	return nil
}

func (m *GetDetailedDataUsageRequest) GetRequestInterval() isGetDetailedDataUsageRequest_RequestInterval {
	if m != nil {
		return m.RequestInterval
	}
	return nil
}

func (x *GetDetailedDataUsageRequest) GetRange() Range {
	if x, ok := x.GetRequestInterval().(*GetDetailedDataUsageRequest_Range); ok {
		return x.Range
	}
	return Range_RANGE_UNSPECIFIED
}

func (x *GetDetailedDataUsageRequest) GetDateRange() *DateRange {
	if x, ok := x.GetRequestInterval().(*GetDetailedDataUsageRequest_DateRange); ok {
		return x.DateRange
	}
	return nil
}

func (x *GetDetailedDataUsageRequest) GetResolution() Resolution {
	if x != nil {
		return x.Resolution
	}
	return Resolution_RESOLUTION_UNSPECIFIED
}

func (x *GetDetailedDataUsageRequest) GetDimensions() []*Dimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

type isGetDetailedDataUsageRequest_RequestInterval interface {
	isGetDetailedDataUsageRequest_RequestInterval()
}

type GetDetailedDataUsageRequest_Range struct {
	Range Range `protobuf:"varint,2,opt,name=range,proto3,enum=com.coralogix.datausage.v1.Range,oneof"`
}

type GetDetailedDataUsageRequest_DateRange struct {
	DateRange *DateRange `protobuf:"bytes,3,opt,name=date_range,json=dateRange,proto3,oneof"`
}

func (*GetDetailedDataUsageRequest_Range) isGetDetailedDataUsageRequest_RequestInterval() {}

func (*GetDetailedDataUsageRequest_DateRange) isGetDetailedDataUsageRequest_RequestInterval() {}

type GetDetailedDataUsageChunkedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId *Team `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// Date request interval
	// It can be a flexible date_range or one of the available ranges, for convenience.
	//
	// Types that are assignable to RequestInterval:
	//
	//	*GetDetailedDataUsageChunkedRequest_Range
	//	*GetDetailedDataUsageChunkedRequest_DateRange
	RequestInterval isGetDetailedDataUsageChunkedRequest_RequestInterval `protobuf_oneof:"request_interval"`
	// Aggregation resolution with minute precision.
	//
	// Do note that to avoid overloading the service we enforce resolution limits
	// that depend on the server configuration. This is configured by the server.
	// i.e. 1 min resolution for an interval of 30 days would explode into too many data points.
	Resolution Resolution `protobuf:"varint,4,opt,name=resolution,proto3,enum=com.coralogix.datausage.v1.Resolution" json:"resolution,omitempty"`
	// Dimensions to filter by
	// i.e. if we filter by Dimension [ {"subsystem", "subsystem1"}]
	//
	//	we only return entries that at least have that dimension i.e. [{"subsystem", "subsystem1"}, {"application", "application1"}]
	Dimensions []*Dimension `protobuf:"bytes,5,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
}

func (x *GetDetailedDataUsageChunkedRequest) Reset() {
	*x = GetDetailedDataUsageChunkedRequest{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDetailedDataUsageChunkedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailedDataUsageChunkedRequest) ProtoMessage() {}

func (x *GetDetailedDataUsageChunkedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailedDataUsageChunkedRequest.ProtoReflect.Descriptor instead.
func (*GetDetailedDataUsageChunkedRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetDetailedDataUsageChunkedRequest) GetTeamId() *Team {
	if x != nil {
		return x.TeamId
	}
	return nil
}

func (m *GetDetailedDataUsageChunkedRequest) GetRequestInterval() isGetDetailedDataUsageChunkedRequest_RequestInterval {
	if m != nil {
		return m.RequestInterval
	}
	return nil
}

func (x *GetDetailedDataUsageChunkedRequest) GetRange() Range {
	if x, ok := x.GetRequestInterval().(*GetDetailedDataUsageChunkedRequest_Range); ok {
		return x.Range
	}
	return Range_RANGE_UNSPECIFIED
}

func (x *GetDetailedDataUsageChunkedRequest) GetDateRange() *DateRange {
	if x, ok := x.GetRequestInterval().(*GetDetailedDataUsageChunkedRequest_DateRange); ok {
		return x.DateRange
	}
	return nil
}

func (x *GetDetailedDataUsageChunkedRequest) GetResolution() Resolution {
	if x != nil {
		return x.Resolution
	}
	return Resolution_RESOLUTION_UNSPECIFIED
}

func (x *GetDetailedDataUsageChunkedRequest) GetDimensions() []*Dimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

type isGetDetailedDataUsageChunkedRequest_RequestInterval interface {
	isGetDetailedDataUsageChunkedRequest_RequestInterval()
}

type GetDetailedDataUsageChunkedRequest_Range struct {
	Range Range `protobuf:"varint,2,opt,name=range,proto3,enum=com.coralogix.datausage.v1.Range,oneof"`
}

type GetDetailedDataUsageChunkedRequest_DateRange struct {
	DateRange *DateRange `protobuf:"bytes,3,opt,name=date_range,json=dateRange,proto3,oneof"`
}

func (*GetDetailedDataUsageChunkedRequest_Range) isGetDetailedDataUsageChunkedRequest_RequestInterval() {
}

func (*GetDetailedDataUsageChunkedRequest_DateRange) isGetDetailedDataUsageChunkedRequest_RequestInterval() {
}

type GetDetailedDataUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Size       *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Quota      *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=quota,proto3" json:"quota,omitempty"`
	Dimensions []*Dimension           `protobuf:"bytes,4,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
}

func (x *GetDetailedDataUsageResponse) Reset() {
	*x = GetDetailedDataUsageResponse{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDetailedDataUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailedDataUsageResponse) ProtoMessage() {}

func (x *GetDetailedDataUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailedDataUsageResponse.ProtoReflect.Descriptor instead.
func (*GetDetailedDataUsageResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetDetailedDataUsageResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GetDetailedDataUsageResponse) GetSize() *wrapperspb.FloatValue {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *GetDetailedDataUsageResponse) GetQuota() *wrapperspb.FloatValue {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *GetDetailedDataUsageResponse) GetDimensions() []*Dimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

type GetDetailedDataUsageChunkedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []*GetDetailedDataUsageResponse `protobuf:"bytes,1,rep,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *GetDetailedDataUsageChunkedResponse) Reset() {
	*x = GetDetailedDataUsageChunkedResponse{}
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDetailedDataUsageChunkedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailedDataUsageChunkedResponse) ProtoMessage() {}

func (x *GetDetailedDataUsageChunkedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailedDataUsageChunkedResponse.ProtoReflect.Descriptor instead.
func (*GetDetailedDataUsageChunkedResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetDetailedDataUsageChunkedResponse) GetChunk() []*GetDetailedDataUsageResponse {
	if x != nil {
		return x.Chunk
	}
	return nil
}

var File_com_coralogix_datausage_v1_data_usage_service_proto protoreflect.FileDescriptor

var file_com_coralogix_datausage_v1_data_usage_service_proto_rawDesc = []byte{
	0x0a, 0x33, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x27, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xdb, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x63, 0x0a, 0x0e, 0x44, 0x61,
	0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x5c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x5d, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x62, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x41, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0x75, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x6e, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0x5f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x22, 0x63, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x66, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22,
	0xfe, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x22, 0x85, 0x03, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x83, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x75,
	0x0a, 0x23, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x32, 0xd5, 0x0d, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xea, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x65, 0xc2, 0xb8, 0x02, 0x32, 0x0a, 0x30, 0x47, 0x65, 0x74, 0x20, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01,
	0x2a, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0xd8, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5f, 0xc2, 0xb8, 0x02, 0x31, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01,
	0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0xe8, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d,
	0xc2, 0xb8, 0x02, 0x28, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x20,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20,
	0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0xcc, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0xc2, 0xb8, 0x02, 0x29, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x20,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x20, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0xe6, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0xc2, 0xb8, 0x02,
	0x4f, 0x0a, 0x4d, 0x47, 0x65, 0x74, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x27, 0x20, 0x6c, 0x6f,
	0x67, 0x73, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x55, 0x73, 0x61, 0x67, 0x65, 0x20, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x74, 0x63, 0x6f,
	0x88, 0x02, 0x01, 0x30, 0x01, 0x12, 0xb0, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0xc2, 0xb8, 0x02, 0x16, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0xc2, 0xb8, 0x02, 0x2f, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x20,
	0x54, 0x65, 0x61, 0x6d, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x55, 0x73, 0x61, 0x67, 0x65, 0x20,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x30, 0x01, 0x12, 0xdf, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x12, 0x3e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0xc2, 0xb8,
	0x02, 0x39, 0x0a, 0x37, 0x47, 0x65, 0x74, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x20, 0x44, 0x61, 0x74,
	0x61, 0x20, 0x55, 0x73, 0x61, 0x67, 0x65, 0x20, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x64,
	0x6f, 0x77, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x28, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x29, 0x30, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescOnce sync.Once
	file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescData = file_com_coralogix_datausage_v1_data_usage_service_proto_rawDesc
)

func file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescGZIP() []byte {
	file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescOnce.Do(func() {
		file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescData)
	})
	return file_com_coralogix_datausage_v1_data_usage_service_proto_rawDescData
}

var file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_com_coralogix_datausage_v1_data_usage_service_proto_goTypes = []any{
	(*GetDataUsageRequest)(nil),                 // 0: com.coralogix.datausage.v1.GetDataUsageRequest
	(*GetDataUsageResponse)(nil),                // 1: com.coralogix.datausage.v1.GetDataUsageResponse
	(*GetTeamsBlocksRequest)(nil),               // 2: com.coralogix.datausage.v1.GetTeamsBlocksRequest
	(*GetTeamsBlocksResponse)(nil),              // 3: com.coralogix.datausage.v1.GetTeamsBlocksResponse
	(*GetTeamsQuotaHistoryRequest)(nil),         // 4: com.coralogix.datausage.v1.GetTeamsQuotaHistoryRequest
	(*GetTeamsQuotaHistoryResponse)(nil),        // 5: com.coralogix.datausage.v1.GetTeamsQuotaHistoryResponse
	(*GetTeamsDailyUsageRequest)(nil),           // 6: com.coralogix.datausage.v1.GetTeamsDailyUsageRequest
	(*GetTeamsDailyUsageResponse)(nil),          // 7: com.coralogix.datausage.v1.GetTeamsDailyUsageResponse
	(*GetTeamsQuotaRequest)(nil),                // 8: com.coralogix.datausage.v1.GetTeamsQuotaRequest
	(*GetTeamsQuotaResponse)(nil),               // 9: com.coralogix.datausage.v1.GetTeamsQuotaResponse
	(*GetTeamsDetailedUsageRequest)(nil),        // 10: com.coralogix.datausage.v1.GetTeamsDetailedUsageRequest
	(*GetTeamsDetailedUsageResponse)(nil),       // 11: com.coralogix.datausage.v1.GetTeamsDetailedUsageResponse
	(*GetDetailedDataUsageRequest)(nil),         // 12: com.coralogix.datausage.v1.GetDetailedDataUsageRequest
	(*GetDetailedDataUsageChunkedRequest)(nil),  // 13: com.coralogix.datausage.v1.GetDetailedDataUsageChunkedRequest
	(*GetDetailedDataUsageResponse)(nil),        // 14: com.coralogix.datausage.v1.GetDetailedDataUsageResponse
	(*GetDetailedDataUsageChunkedResponse)(nil), // 15: com.coralogix.datausage.v1.GetDetailedDataUsageChunkedResponse
	nil,                           // 16: com.coralogix.datausage.v1.GetDataUsageResponse.DataUsageEntry
	(*Team)(nil),                  // 17: com.coralogix.datausage.v1.Team
	(*DateRange)(nil),             // 18: com.coralogix.datausage.v1.DateRange
	(*durationpb.Duration)(nil),   // 19: google.protobuf.Duration
	(*Dimension)(nil),             // 20: com.coralogix.datausage.v1.Dimension
	(*TeamsAndTimeRange)(nil),     // 21: com.coralogix.datausage.v1.TeamsAndTimeRange
	(*TeamBlockEvents)(nil),       // 22: com.coralogix.datausage.v1.TeamBlockEvents
	(*TeamQuotaHistory)(nil),      // 23: com.coralogix.datausage.v1.TeamQuotaHistory
	(*TeamsDailyDataUsage)(nil),   // 24: com.coralogix.datausage.v1.TeamsDailyDataUsage
	(*TeamsAndTime)(nil),          // 25: com.coralogix.datausage.v1.TeamsAndTime
	(*TeamQuota)(nil),             // 26: com.coralogix.datausage.v1.TeamQuota
	(*DataUsageReport)(nil),       // 27: com.coralogix.datausage.v1.DataUsageReport
	(Range)(0),                    // 28: com.coralogix.datausage.v1.Range
	(Resolution)(0),               // 29: com.coralogix.datausage.v1.Resolution
	(*timestamppb.Timestamp)(nil), // 30: google.protobuf.Timestamp
	(*wrapperspb.FloatValue)(nil), // 31: google.protobuf.FloatValue
	(*DataUsage)(nil),             // 32: com.coralogix.datausage.v1.DataUsage
}
var file_com_coralogix_datausage_v1_data_usage_service_proto_depIdxs = []int32{
	17, // 0: com.coralogix.datausage.v1.GetDataUsageRequest.team_ids:type_name -> com.coralogix.datausage.v1.Team
	18, // 1: com.coralogix.datausage.v1.GetDataUsageRequest.date_range:type_name -> com.coralogix.datausage.v1.DateRange
	19, // 2: com.coralogix.datausage.v1.GetDataUsageRequest.resolution:type_name -> google.protobuf.Duration
	20, // 3: com.coralogix.datausage.v1.GetDataUsageRequest.dimensions:type_name -> com.coralogix.datausage.v1.Dimension
	16, // 4: com.coralogix.datausage.v1.GetDataUsageResponse.data_usage:type_name -> com.coralogix.datausage.v1.GetDataUsageResponse.DataUsageEntry
	21, // 5: com.coralogix.datausage.v1.GetTeamsBlocksRequest.param:type_name -> com.coralogix.datausage.v1.TeamsAndTimeRange
	22, // 6: com.coralogix.datausage.v1.GetTeamsBlocksResponse.events:type_name -> com.coralogix.datausage.v1.TeamBlockEvents
	21, // 7: com.coralogix.datausage.v1.GetTeamsQuotaHistoryRequest.param:type_name -> com.coralogix.datausage.v1.TeamsAndTimeRange
	23, // 8: com.coralogix.datausage.v1.GetTeamsQuotaHistoryResponse.history_entries:type_name -> com.coralogix.datausage.v1.TeamQuotaHistory
	21, // 9: com.coralogix.datausage.v1.GetTeamsDailyUsageRequest.param:type_name -> com.coralogix.datausage.v1.TeamsAndTimeRange
	24, // 10: com.coralogix.datausage.v1.GetTeamsDailyUsageResponse.teams_usage:type_name -> com.coralogix.datausage.v1.TeamsDailyDataUsage
	25, // 11: com.coralogix.datausage.v1.GetTeamsQuotaRequest.param:type_name -> com.coralogix.datausage.v1.TeamsAndTime
	26, // 12: com.coralogix.datausage.v1.GetTeamsQuotaResponse.teams_quota:type_name -> com.coralogix.datausage.v1.TeamQuota
	21, // 13: com.coralogix.datausage.v1.GetTeamsDetailedUsageRequest.param:type_name -> com.coralogix.datausage.v1.TeamsAndTimeRange
	27, // 14: com.coralogix.datausage.v1.GetTeamsDetailedUsageResponse.reports:type_name -> com.coralogix.datausage.v1.DataUsageReport
	17, // 15: com.coralogix.datausage.v1.GetDetailedDataUsageRequest.team_id:type_name -> com.coralogix.datausage.v1.Team
	28, // 16: com.coralogix.datausage.v1.GetDetailedDataUsageRequest.range:type_name -> com.coralogix.datausage.v1.Range
	18, // 17: com.coralogix.datausage.v1.GetDetailedDataUsageRequest.date_range:type_name -> com.coralogix.datausage.v1.DateRange
	29, // 18: com.coralogix.datausage.v1.GetDetailedDataUsageRequest.resolution:type_name -> com.coralogix.datausage.v1.Resolution
	20, // 19: com.coralogix.datausage.v1.GetDetailedDataUsageRequest.dimensions:type_name -> com.coralogix.datausage.v1.Dimension
	17, // 20: com.coralogix.datausage.v1.GetDetailedDataUsageChunkedRequest.team_id:type_name -> com.coralogix.datausage.v1.Team
	28, // 21: com.coralogix.datausage.v1.GetDetailedDataUsageChunkedRequest.range:type_name -> com.coralogix.datausage.v1.Range
	18, // 22: com.coralogix.datausage.v1.GetDetailedDataUsageChunkedRequest.date_range:type_name -> com.coralogix.datausage.v1.DateRange
	29, // 23: com.coralogix.datausage.v1.GetDetailedDataUsageChunkedRequest.resolution:type_name -> com.coralogix.datausage.v1.Resolution
	20, // 24: com.coralogix.datausage.v1.GetDetailedDataUsageChunkedRequest.dimensions:type_name -> com.coralogix.datausage.v1.Dimension
	30, // 25: com.coralogix.datausage.v1.GetDetailedDataUsageResponse.timestamp:type_name -> google.protobuf.Timestamp
	31, // 26: com.coralogix.datausage.v1.GetDetailedDataUsageResponse.size:type_name -> google.protobuf.FloatValue
	31, // 27: com.coralogix.datausage.v1.GetDetailedDataUsageResponse.quota:type_name -> google.protobuf.FloatValue
	20, // 28: com.coralogix.datausage.v1.GetDetailedDataUsageResponse.dimensions:type_name -> com.coralogix.datausage.v1.Dimension
	14, // 29: com.coralogix.datausage.v1.GetDetailedDataUsageChunkedResponse.chunk:type_name -> com.coralogix.datausage.v1.GetDetailedDataUsageResponse
	32, // 30: com.coralogix.datausage.v1.GetDataUsageResponse.DataUsageEntry.value:type_name -> com.coralogix.datausage.v1.DataUsage
	6,  // 31: com.coralogix.datausage.v1.DataUsageService.GetTeamsDailyUsage:input_type -> com.coralogix.datausage.v1.GetTeamsDailyUsageRequest
	2,  // 32: com.coralogix.datausage.v1.DataUsageService.GetTeamsBlocks:input_type -> com.coralogix.datausage.v1.GetTeamsBlocksRequest
	4,  // 33: com.coralogix.datausage.v1.DataUsageService.GetTeamsQuotaHistory:input_type -> com.coralogix.datausage.v1.GetTeamsQuotaHistoryRequest
	8,  // 34: com.coralogix.datausage.v1.DataUsageService.GetTeamsQuota:input_type -> com.coralogix.datausage.v1.GetTeamsQuotaRequest
	10, // 35: com.coralogix.datausage.v1.DataUsageService.GetTeamsDetailedUsage:input_type -> com.coralogix.datausage.v1.GetTeamsDetailedUsageRequest
	0,  // 36: com.coralogix.datausage.v1.DataUsageService.GetDataUsage:input_type -> com.coralogix.datausage.v1.GetDataUsageRequest
	12, // 37: com.coralogix.datausage.v1.DataUsageService.GetDetailedDataUsage:input_type -> com.coralogix.datausage.v1.GetDetailedDataUsageRequest
	13, // 38: com.coralogix.datausage.v1.DataUsageService.GetDetailedDataUsageChunked:input_type -> com.coralogix.datausage.v1.GetDetailedDataUsageChunkedRequest
	7,  // 39: com.coralogix.datausage.v1.DataUsageService.GetTeamsDailyUsage:output_type -> com.coralogix.datausage.v1.GetTeamsDailyUsageResponse
	3,  // 40: com.coralogix.datausage.v1.DataUsageService.GetTeamsBlocks:output_type -> com.coralogix.datausage.v1.GetTeamsBlocksResponse
	5,  // 41: com.coralogix.datausage.v1.DataUsageService.GetTeamsQuotaHistory:output_type -> com.coralogix.datausage.v1.GetTeamsQuotaHistoryResponse
	9,  // 42: com.coralogix.datausage.v1.DataUsageService.GetTeamsQuota:output_type -> com.coralogix.datausage.v1.GetTeamsQuotaResponse
	11, // 43: com.coralogix.datausage.v1.DataUsageService.GetTeamsDetailedUsage:output_type -> com.coralogix.datausage.v1.GetTeamsDetailedUsageResponse
	1,  // 44: com.coralogix.datausage.v1.DataUsageService.GetDataUsage:output_type -> com.coralogix.datausage.v1.GetDataUsageResponse
	14, // 45: com.coralogix.datausage.v1.DataUsageService.GetDetailedDataUsage:output_type -> com.coralogix.datausage.v1.GetDetailedDataUsageResponse
	15, // 46: com.coralogix.datausage.v1.DataUsageService.GetDetailedDataUsageChunked:output_type -> com.coralogix.datausage.v1.GetDetailedDataUsageChunkedResponse
	39, // [39:47] is the sub-list for method output_type
	31, // [31:39] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_com_coralogix_datausage_v1_data_usage_service_proto_init() }
func file_com_coralogix_datausage_v1_data_usage_service_proto_init() {
	if File_com_coralogix_datausage_v1_data_usage_service_proto != nil {
		return
	}
	file_com_coralogix_datausage_v1_common_proto_init()
	file_com_coralogix_datausage_v1_audit_log_proto_init()
	file_com_coralogix_datausage_v1_data_usage_proto_init()
	file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[12].OneofWrappers = []any{
		(*GetDetailedDataUsageRequest_Range)(nil),
		(*GetDetailedDataUsageRequest_DateRange)(nil),
	}
	file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes[13].OneofWrappers = []any{
		(*GetDetailedDataUsageChunkedRequest_Range)(nil),
		(*GetDetailedDataUsageChunkedRequest_DateRange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_datausage_v1_data_usage_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogix_datausage_v1_data_usage_service_proto_goTypes,
		DependencyIndexes: file_com_coralogix_datausage_v1_data_usage_service_proto_depIdxs,
		MessageInfos:      file_com_coralogix_datausage_v1_data_usage_service_proto_msgTypes,
	}.Build()
	File_com_coralogix_datausage_v1_data_usage_service_proto = out.File
	file_com_coralogix_datausage_v1_data_usage_service_proto_rawDesc = nil
	file_com_coralogix_datausage_v1_data_usage_service_proto_goTypes = nil
	file_com_coralogix_datausage_v1_data_usage_service_proto_depIdxs = nil
}
