// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: com/coralogix/integrations/v1/external_token_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExternalTokenService_GenerateNewToken_FullMethodName = "/com.coralogix.integrations.v1.ExternalTokenService/GenerateNewToken"
	ExternalTokenService_UpdateToken_FullMethodName      = "/com.coralogix.integrations.v1.ExternalTokenService/UpdateToken"
)

// ExternalTokenServiceClient is the client API for ExternalTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalTokenServiceClient interface {
	GenerateNewToken(ctx context.Context, in *GenerateNewTokenRequest, opts ...grpc.CallOption) (*GenerateNewTokenResponse, error)
	UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*UpdateTokenResponse, error)
}

type externalTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalTokenServiceClient(cc grpc.ClientConnInterface) ExternalTokenServiceClient {
	return &externalTokenServiceClient{cc}
}

func (c *externalTokenServiceClient) GenerateNewToken(ctx context.Context, in *GenerateNewTokenRequest, opts ...grpc.CallOption) (*GenerateNewTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateNewTokenResponse)
	err := c.cc.Invoke(ctx, ExternalTokenService_GenerateNewToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalTokenServiceClient) UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*UpdateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTokenResponse)
	err := c.cc.Invoke(ctx, ExternalTokenService_UpdateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalTokenServiceServer is the server API for ExternalTokenService service.
// All implementations must embed UnimplementedExternalTokenServiceServer
// for forward compatibility.
type ExternalTokenServiceServer interface {
	GenerateNewToken(context.Context, *GenerateNewTokenRequest) (*GenerateNewTokenResponse, error)
	UpdateToken(context.Context, *UpdateTokenRequest) (*UpdateTokenResponse, error)
	mustEmbedUnimplementedExternalTokenServiceServer()
}

// UnimplementedExternalTokenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExternalTokenServiceServer struct{}

func (UnimplementedExternalTokenServiceServer) GenerateNewToken(context.Context, *GenerateNewTokenRequest) (*GenerateNewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNewToken not implemented")
}
func (UnimplementedExternalTokenServiceServer) UpdateToken(context.Context, *UpdateTokenRequest) (*UpdateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedExternalTokenServiceServer) mustEmbedUnimplementedExternalTokenServiceServer() {}
func (UnimplementedExternalTokenServiceServer) testEmbeddedByValue()                              {}

// UnsafeExternalTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalTokenServiceServer will
// result in compilation errors.
type UnsafeExternalTokenServiceServer interface {
	mustEmbedUnimplementedExternalTokenServiceServer()
}

func RegisterExternalTokenServiceServer(s grpc.ServiceRegistrar, srv ExternalTokenServiceServer) {
	// If the following call pancis, it indicates UnimplementedExternalTokenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExternalTokenService_ServiceDesc, srv)
}

func _ExternalTokenService_GenerateNewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateNewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalTokenServiceServer).GenerateNewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalTokenService_GenerateNewToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalTokenServiceServer).GenerateNewToken(ctx, req.(*GenerateNewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalTokenService_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalTokenServiceServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalTokenService_UpdateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalTokenServiceServer).UpdateToken(ctx, req.(*UpdateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalTokenService_ServiceDesc is the grpc.ServiceDesc for ExternalTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.integrations.v1.ExternalTokenService",
	HandlerType: (*ExternalTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateNewToken",
			Handler:    _ExternalTokenService_GenerateNewToken_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _ExternalTokenService_UpdateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/integrations/v1/external_token_service.proto",
}
