// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: com/coralogix/integrations/v1/webhook_integration_service.proto

package v1

import (
	_ "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/common/v1"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateWebhookIntegrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ApiKeyValue *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=api_key_value,json=apiKeyValue,proto3" json:"api_key_value,omitempty"`
	Application *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=application,proto3" json:"application,omitempty"`
	Subsystem   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
	IsPrivate   *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	// Types that are assignable to ContentType:
	//
	//	*CreateWebhookIntegrationRequest_Json
	//	*CreateWebhookIntegrationRequest_Text
	ContentType isCreateWebhookIntegrationRequest_ContentType `protobuf_oneof:"content_type"`
}

func (x *CreateWebhookIntegrationRequest) Reset() {
	*x = CreateWebhookIntegrationRequest{}
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWebhookIntegrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebhookIntegrationRequest) ProtoMessage() {}

func (x *CreateWebhookIntegrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebhookIntegrationRequest.ProtoReflect.Descriptor instead.
func (*CreateWebhookIntegrationRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateWebhookIntegrationRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateWebhookIntegrationRequest) GetApiKeyValue() *wrapperspb.StringValue {
	if x != nil {
		return x.ApiKeyValue
	}
	return nil
}

func (x *CreateWebhookIntegrationRequest) GetApplication() *wrapperspb.StringValue {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *CreateWebhookIntegrationRequest) GetSubsystem() *wrapperspb.StringValue {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

func (x *CreateWebhookIntegrationRequest) GetIsPrivate() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsPrivate
	}
	return nil
}

func (m *CreateWebhookIntegrationRequest) GetContentType() isCreateWebhookIntegrationRequest_ContentType {
	if m != nil {
		return m.ContentType
	}
	return nil
}

func (x *CreateWebhookIntegrationRequest) GetJson() *JsonContentType {
	if x, ok := x.GetContentType().(*CreateWebhookIntegrationRequest_Json); ok {
		return x.Json
	}
	return nil
}

func (x *CreateWebhookIntegrationRequest) GetText() *TextContentType {
	if x, ok := x.GetContentType().(*CreateWebhookIntegrationRequest_Text); ok {
		return x.Text
	}
	return nil
}

type isCreateWebhookIntegrationRequest_ContentType interface {
	isCreateWebhookIntegrationRequest_ContentType()
}

type CreateWebhookIntegrationRequest_Json struct {
	Json *JsonContentType `protobuf:"bytes,10,opt,name=json,proto3,oneof"`
}

type CreateWebhookIntegrationRequest_Text struct {
	Text *TextContentType `protobuf:"bytes,11,opt,name=text,proto3,oneof"`
}

func (*CreateWebhookIntegrationRequest_Json) isCreateWebhookIntegrationRequest_ContentType() {}

func (*CreateWebhookIntegrationRequest_Text) isCreateWebhookIntegrationRequest_ContentType() {}

type CreateWebhookIntegrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WebhookUrl *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=webhook_url,json=webhookUrl,proto3" json:"webhook_url,omitempty"`
}

func (x *CreateWebhookIntegrationResponse) Reset() {
	*x = CreateWebhookIntegrationResponse{}
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWebhookIntegrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebhookIntegrationResponse) ProtoMessage() {}

func (x *CreateWebhookIntegrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebhookIntegrationResponse.ProtoReflect.Descriptor instead.
func (*CreateWebhookIntegrationResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateWebhookIntegrationResponse) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CreateWebhookIntegrationResponse) GetWebhookUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.WebhookUrl
	}
	return nil
}

type ListWebhookIntegrationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListWebhookIntegrationsRequest) Reset() {
	*x = ListWebhookIntegrationsRequest{}
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWebhookIntegrationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebhookIntegrationsRequest) ProtoMessage() {}

func (x *ListWebhookIntegrationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebhookIntegrationsRequest.ProtoReflect.Descriptor instead.
func (*ListWebhookIntegrationsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescGZIP(), []int{2}
}

type ListWebhookIntegrationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Webhooks []*ListWebhookIntegrationsResponse_WebhookIntegration `protobuf:"bytes,1,rep,name=webhooks,proto3" json:"webhooks,omitempty"`
}

func (x *ListWebhookIntegrationsResponse) Reset() {
	*x = ListWebhookIntegrationsResponse{}
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWebhookIntegrationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebhookIntegrationsResponse) ProtoMessage() {}

func (x *ListWebhookIntegrationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebhookIntegrationsResponse.ProtoReflect.Descriptor instead.
func (*ListWebhookIntegrationsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListWebhookIntegrationsResponse) GetWebhooks() []*ListWebhookIntegrationsResponse_WebhookIntegration {
	if x != nil {
		return x.Webhooks
	}
	return nil
}

type DeleteWebhookIntegrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteWebhookIntegrationRequest) Reset() {
	*x = DeleteWebhookIntegrationRequest{}
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWebhookIntegrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebhookIntegrationRequest) ProtoMessage() {}

func (x *DeleteWebhookIntegrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebhookIntegrationRequest.ProtoReflect.Descriptor instead.
func (*DeleteWebhookIntegrationRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteWebhookIntegrationRequest) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeleteWebhookIntegrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteWebhookIntegrationResponse) Reset() {
	*x = DeleteWebhookIntegrationResponse{}
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWebhookIntegrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebhookIntegrationResponse) ProtoMessage() {}

func (x *DeleteWebhookIntegrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebhookIntegrationResponse.ProtoReflect.Descriptor instead.
func (*DeleteWebhookIntegrationResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescGZIP(), []int{5}
}

type ToggleWebhookIntegrationActivationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IsActive *wrapperspb.BoolValue   `protobuf:"bytes,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *ToggleWebhookIntegrationActivationRequest) Reset() {
	*x = ToggleWebhookIntegrationActivationRequest{}
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToggleWebhookIntegrationActivationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleWebhookIntegrationActivationRequest) ProtoMessage() {}

func (x *ToggleWebhookIntegrationActivationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleWebhookIntegrationActivationRequest.ProtoReflect.Descriptor instead.
func (*ToggleWebhookIntegrationActivationRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescGZIP(), []int{6}
}

func (x *ToggleWebhookIntegrationActivationRequest) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ToggleWebhookIntegrationActivationRequest) GetIsActive() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsActive
	}
	return nil
}

type ToggleWebhookIntegrationActivationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ToggleWebhookIntegrationActivationResponse) Reset() {
	*x = ToggleWebhookIntegrationActivationResponse{}
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToggleWebhookIntegrationActivationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleWebhookIntegrationActivationResponse) ProtoMessage() {}

func (x *ToggleWebhookIntegrationActivationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleWebhookIntegrationActivationResponse.ProtoReflect.Descriptor instead.
func (*ToggleWebhookIntegrationActivationResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescGZIP(), []int{7}
}

type CountWebhookIntegrationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountWebhookIntegrationsRequest) Reset() {
	*x = CountWebhookIntegrationsRequest{}
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountWebhookIntegrationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountWebhookIntegrationsRequest) ProtoMessage() {}

func (x *CountWebhookIntegrationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountWebhookIntegrationsRequest.ProtoReflect.Descriptor instead.
func (*CountWebhookIntegrationsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescGZIP(), []int{8}
}

type CountWebhookIntegrationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountWebhookIntegrationsResponse) Reset() {
	*x = CountWebhookIntegrationsResponse{}
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountWebhookIntegrationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountWebhookIntegrationsResponse) ProtoMessage() {}

func (x *CountWebhookIntegrationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountWebhookIntegrationsResponse.ProtoReflect.Descriptor instead.
func (*CountWebhookIntegrationsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescGZIP(), []int{9}
}

func (x *CountWebhookIntegrationsResponse) GetCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type ListWebhookIntegrationsResponse_WebhookIntegration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebhookId   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	CompanyId   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Name        *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Application *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=application,proto3" json:"application,omitempty"`
	Subsystem   *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
	IsPrivate   *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	Url         *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	IsActive    *wrapperspb.BoolValue   `protobuf:"bytes,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedAt   *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp  `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ListWebhookIntegrationsResponse_WebhookIntegration) Reset() {
	*x = ListWebhookIntegrationsResponse_WebhookIntegration{}
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWebhookIntegrationsResponse_WebhookIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebhookIntegrationsResponse_WebhookIntegration) ProtoMessage() {}

func (x *ListWebhookIntegrationsResponse_WebhookIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebhookIntegrationsResponse_WebhookIntegration.ProtoReflect.Descriptor instead.
func (*ListWebhookIntegrationsResponse_WebhookIntegration) Descriptor() ([]byte, []int) {
	return file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ListWebhookIntegrationsResponse_WebhookIntegration) GetWebhookId() *wrapperspb.StringValue {
	if x != nil {
		return x.WebhookId
	}
	return nil
}

func (x *ListWebhookIntegrationsResponse_WebhookIntegration) GetCompanyId() *wrapperspb.StringValue {
	if x != nil {
		return x.CompanyId
	}
	return nil
}

func (x *ListWebhookIntegrationsResponse_WebhookIntegration) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListWebhookIntegrationsResponse_WebhookIntegration) GetApplication() *wrapperspb.StringValue {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *ListWebhookIntegrationsResponse_WebhookIntegration) GetSubsystem() *wrapperspb.StringValue {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

func (x *ListWebhookIntegrationsResponse_WebhookIntegration) GetIsPrivate() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsPrivate
	}
	return nil
}

func (x *ListWebhookIntegrationsResponse_WebhookIntegration) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ListWebhookIntegrationsResponse_WebhookIntegration) GetIsActive() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsActive
	}
	return nil
}

func (x *ListWebhookIntegrationsResponse_WebhookIntegration) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListWebhookIntegrationsResponse_WebhookIntegration) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_com_coralogix_integrations_v1_webhook_integration_service_proto protoreflect.FileDescriptor

var file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x27, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x05, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x43, 0x68, 0x6f,
	0x63, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x76, 0x65, 0x22, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x4a,
	0x26, 0x22, 0x61, 0x70, 0x6e, 0x5f, 0x62, 0x34, 0x38, 0x36, 0x64, 0x31, 0x30, 0x62, 0x35, 0x38,
	0x31, 0x38, 0x34, 0x62, 0x32, 0x35, 0x61, 0x65, 0x30, 0x32, 0x63, 0x33, 0x30, 0x64, 0x63, 0x62,
	0x61, 0x38, 0x37, 0x37, 0x37, 0x35, 0x22, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0x92, 0x41, 0x13,
	0x4a, 0x11, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x44,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09,
	0x92, 0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x3a, 0x8d, 0x01, 0x92, 0x41, 0x89, 0x01, 0x0a, 0x86, 0x01, 0x2a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x1f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0d, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xd2, 0x01, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0xd2, 0x01, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0xd2, 0x01, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xc5, 0x02, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x27, 0x92, 0x41, 0x24, 0x4a, 0x22, 0x22, 0x62, 0x34, 0x38, 0x36, 0x64, 0x31, 0x30, 0x62, 0x35,
	0x38, 0x31, 0x38, 0x34, 0x62, 0x32, 0x35, 0x61, 0x65, 0x30, 0x32, 0x63, 0x33, 0x30, 0x64, 0x63,
	0x62, 0x61, 0x38, 0x37, 0x37, 0x37, 0x35, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0b,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x63, 0x68,
	0x6f, 0x63, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x73, 0x2e, 0x6c, 0x6f, 0x76, 0x65, 0x22,
	0x52, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x3a, 0x6a, 0x92, 0x41,
	0x67, 0x0a, 0x65, 0x2a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x0b, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x67, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x45, 0x92, 0x41, 0x42, 0x0a,
	0x40, 0x2a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x1c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xe5, 0x09, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x73, 0x1a, 0x83, 0x08, 0x0a, 0x12, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0a, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x92,
	0x41, 0x24, 0x4a, 0x22, 0x22, 0x62, 0x34, 0x38, 0x36, 0x64, 0x31, 0x30, 0x62, 0x35, 0x38, 0x31,
	0x38, 0x34, 0x62, 0x32, 0x35, 0x61, 0x65, 0x30, 0x32, 0x63, 0x33, 0x30, 0x64, 0x63, 0x62, 0x61,
	0x38, 0x37, 0x37, 0x37, 0x35, 0x22, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49,
	0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x31, 0x32, 0x33, 0x34, 0x35,
	0x36, 0x37, 0x38, 0x39, 0x22, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x4a, 0x13, 0x22, 0x43, 0x68, 0x6f, 0x63, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x6c, 0x6f, 0x76, 0x65, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x16, 0x92, 0x41, 0x13, 0x4a, 0x11, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x44, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x63, 0x68, 0x6f, 0x63, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x73, 0x2e, 0x6c, 0x6f, 0x76, 0x65, 0x22, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x42, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x92, 0x41,
	0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x55, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x4a, 0x15, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x30,
	0x2d, 0x32, 0x30, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x22, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x55, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x4a, 0x15, 0x22,
	0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x30, 0x2d, 0x32, 0x30, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30,
	0x3a, 0x30, 0x30, 0x22, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a,
	0xb8, 0x01, 0x92, 0x41, 0xb4, 0x01, 0x0a, 0xb1, 0x01, 0x2a, 0x21, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x42, 0x6f, 0x64, 0x79, 0x32, 0x18, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0xd2, 0x01, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0xd2, 0x01, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0xd2, 0x01,
	0x03, 0x75, 0x72, 0x6c, 0xd2, 0x01, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0xd2, 0x01, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0xd2, 0x01, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x3a, 0x4d, 0x92, 0x41, 0x4a, 0x0a,
	0x48, 0x2a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0xd2, 0x01,
	0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x1f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x92, 0x41, 0x24, 0x4a, 0x22, 0x22, 0x62,
	0x34, 0x38, 0x36, 0x64, 0x31, 0x30, 0x62, 0x35, 0x38, 0x31, 0x38, 0x34, 0x62, 0x32, 0x35, 0x61,
	0x65, 0x30, 0x32, 0x63, 0x33, 0x30, 0x64, 0x63, 0x62, 0x61, 0x38, 0x37, 0x37, 0x37, 0x35, 0x22,
	0x52, 0x02, 0x69, 0x64, 0x3a, 0x4b, 0x92, 0x41, 0x48, 0x0a, 0x46, 0x2a, 0x22, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x20, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0xd2, 0x01, 0x02, 0x69,
	0x64, 0x22, 0x7d, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x59, 0x92, 0x41, 0x56, 0x0a, 0x54, 0x2a, 0x23, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x20, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x2d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xaf, 0x02, 0x0a, 0x29, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x92, 0x41, 0x24, 0x4a, 0x22, 0x22,
	0x62, 0x34, 0x38, 0x36, 0x64, 0x31, 0x30, 0x62, 0x35, 0x38, 0x31, 0x38, 0x34, 0x62, 0x32, 0x35,
	0x61, 0x65, 0x30, 0x32, 0x63, 0x33, 0x30, 0x64, 0x63, 0x62, 0x61, 0x38, 0x37, 0x37, 0x37, 0x35,
	0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x67, 0x92, 0x41, 0x64, 0x0a, 0x62,
	0x2a, 0x27, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x26, 0x54, 0x6f, 0x20, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x2a, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x5a, 0x92, 0x41, 0x57, 0x0a, 0x55, 0x2a, 0x27, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x2a, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x69, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x6a, 0x0a,
	0x1f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a, 0x42, 0x2a, 0x21, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x20, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x92, 0x41, 0x04,
	0x4a, 0x02, 0x31, 0x35, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x50, 0x92, 0x41, 0x4d,
	0x0a, 0x4b, 0x2a, 0x22, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xde, 0x09,
	0x0a, 0x19, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe8, 0x01, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0xc2, 0xb8, 0x02, 0x1e, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xe0, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x46, 0xc2, 0xb8, 0x02, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xe6, 0x01, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0xc2, 0xb8, 0x02, 0x1c, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a,
	0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0xa1, 0x02, 0x0a, 0x22, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66,
	0xc2, 0xb8, 0x02, 0x2e, 0x0a, 0x2c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x20, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xe5, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0xc2, 0xb8, 0x02, 0x1c, 0x0a, 0x1a, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x20, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22,
	0x1d, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescOnce sync.Once
	file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescData = file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDesc
)

func file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescGZIP() []byte {
	file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescOnce.Do(func() {
		file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescData)
	})
	return file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDescData
}

var file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_com_coralogix_integrations_v1_webhook_integration_service_proto_goTypes = []any{
	(*CreateWebhookIntegrationRequest)(nil),                    // 0: com.coralogix.integrations.v1.CreateWebhookIntegrationRequest
	(*CreateWebhookIntegrationResponse)(nil),                   // 1: com.coralogix.integrations.v1.CreateWebhookIntegrationResponse
	(*ListWebhookIntegrationsRequest)(nil),                     // 2: com.coralogix.integrations.v1.ListWebhookIntegrationsRequest
	(*ListWebhookIntegrationsResponse)(nil),                    // 3: com.coralogix.integrations.v1.ListWebhookIntegrationsResponse
	(*DeleteWebhookIntegrationRequest)(nil),                    // 4: com.coralogix.integrations.v1.DeleteWebhookIntegrationRequest
	(*DeleteWebhookIntegrationResponse)(nil),                   // 5: com.coralogix.integrations.v1.DeleteWebhookIntegrationResponse
	(*ToggleWebhookIntegrationActivationRequest)(nil),          // 6: com.coralogix.integrations.v1.ToggleWebhookIntegrationActivationRequest
	(*ToggleWebhookIntegrationActivationResponse)(nil),         // 7: com.coralogix.integrations.v1.ToggleWebhookIntegrationActivationResponse
	(*CountWebhookIntegrationsRequest)(nil),                    // 8: com.coralogix.integrations.v1.CountWebhookIntegrationsRequest
	(*CountWebhookIntegrationsResponse)(nil),                   // 9: com.coralogix.integrations.v1.CountWebhookIntegrationsResponse
	(*ListWebhookIntegrationsResponse_WebhookIntegration)(nil), // 10: com.coralogix.integrations.v1.ListWebhookIntegrationsResponse.WebhookIntegration
	(*wrapperspb.StringValue)(nil),                             // 11: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),                               // 12: google.protobuf.BoolValue
	(*JsonContentType)(nil),                                    // 13: com.coralogix.integrations.v1.JsonContentType
	(*TextContentType)(nil),                                    // 14: com.coralogix.integrations.v1.TextContentType
	(*wrapperspb.UInt32Value)(nil),                             // 15: google.protobuf.UInt32Value
	(*timestamppb.Timestamp)(nil),                              // 16: google.protobuf.Timestamp
}
var file_com_coralogix_integrations_v1_webhook_integration_service_proto_depIdxs = []int32{
	11, // 0: com.coralogix.integrations.v1.CreateWebhookIntegrationRequest.name:type_name -> google.protobuf.StringValue
	11, // 1: com.coralogix.integrations.v1.CreateWebhookIntegrationRequest.api_key_value:type_name -> google.protobuf.StringValue
	11, // 2: com.coralogix.integrations.v1.CreateWebhookIntegrationRequest.application:type_name -> google.protobuf.StringValue
	11, // 3: com.coralogix.integrations.v1.CreateWebhookIntegrationRequest.subsystem:type_name -> google.protobuf.StringValue
	12, // 4: com.coralogix.integrations.v1.CreateWebhookIntegrationRequest.is_private:type_name -> google.protobuf.BoolValue
	13, // 5: com.coralogix.integrations.v1.CreateWebhookIntegrationRequest.json:type_name -> com.coralogix.integrations.v1.JsonContentType
	14, // 6: com.coralogix.integrations.v1.CreateWebhookIntegrationRequest.text:type_name -> com.coralogix.integrations.v1.TextContentType
	11, // 7: com.coralogix.integrations.v1.CreateWebhookIntegrationResponse.id:type_name -> google.protobuf.StringValue
	11, // 8: com.coralogix.integrations.v1.CreateWebhookIntegrationResponse.webhook_url:type_name -> google.protobuf.StringValue
	10, // 9: com.coralogix.integrations.v1.ListWebhookIntegrationsResponse.webhooks:type_name -> com.coralogix.integrations.v1.ListWebhookIntegrationsResponse.WebhookIntegration
	11, // 10: com.coralogix.integrations.v1.DeleteWebhookIntegrationRequest.id:type_name -> google.protobuf.StringValue
	11, // 11: com.coralogix.integrations.v1.ToggleWebhookIntegrationActivationRequest.id:type_name -> google.protobuf.StringValue
	12, // 12: com.coralogix.integrations.v1.ToggleWebhookIntegrationActivationRequest.is_active:type_name -> google.protobuf.BoolValue
	15, // 13: com.coralogix.integrations.v1.CountWebhookIntegrationsResponse.count:type_name -> google.protobuf.UInt32Value
	11, // 14: com.coralogix.integrations.v1.ListWebhookIntegrationsResponse.WebhookIntegration.webhook_id:type_name -> google.protobuf.StringValue
	11, // 15: com.coralogix.integrations.v1.ListWebhookIntegrationsResponse.WebhookIntegration.company_id:type_name -> google.protobuf.StringValue
	11, // 16: com.coralogix.integrations.v1.ListWebhookIntegrationsResponse.WebhookIntegration.name:type_name -> google.protobuf.StringValue
	11, // 17: com.coralogix.integrations.v1.ListWebhookIntegrationsResponse.WebhookIntegration.application:type_name -> google.protobuf.StringValue
	11, // 18: com.coralogix.integrations.v1.ListWebhookIntegrationsResponse.WebhookIntegration.subsystem:type_name -> google.protobuf.StringValue
	12, // 19: com.coralogix.integrations.v1.ListWebhookIntegrationsResponse.WebhookIntegration.is_private:type_name -> google.protobuf.BoolValue
	11, // 20: com.coralogix.integrations.v1.ListWebhookIntegrationsResponse.WebhookIntegration.url:type_name -> google.protobuf.StringValue
	12, // 21: com.coralogix.integrations.v1.ListWebhookIntegrationsResponse.WebhookIntegration.is_active:type_name -> google.protobuf.BoolValue
	16, // 22: com.coralogix.integrations.v1.ListWebhookIntegrationsResponse.WebhookIntegration.created_at:type_name -> google.protobuf.Timestamp
	16, // 23: com.coralogix.integrations.v1.ListWebhookIntegrationsResponse.WebhookIntegration.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 24: com.coralogix.integrations.v1.WebhookIntegrationService.CreateWebhookIntegration:input_type -> com.coralogix.integrations.v1.CreateWebhookIntegrationRequest
	2,  // 25: com.coralogix.integrations.v1.WebhookIntegrationService.ListWebhookIntegrations:input_type -> com.coralogix.integrations.v1.ListWebhookIntegrationsRequest
	4,  // 26: com.coralogix.integrations.v1.WebhookIntegrationService.DeleteWebhookIntegration:input_type -> com.coralogix.integrations.v1.DeleteWebhookIntegrationRequest
	6,  // 27: com.coralogix.integrations.v1.WebhookIntegrationService.ToggleWebhookIntegrationActivation:input_type -> com.coralogix.integrations.v1.ToggleWebhookIntegrationActivationRequest
	8,  // 28: com.coralogix.integrations.v1.WebhookIntegrationService.CountWebhookIntegrations:input_type -> com.coralogix.integrations.v1.CountWebhookIntegrationsRequest
	1,  // 29: com.coralogix.integrations.v1.WebhookIntegrationService.CreateWebhookIntegration:output_type -> com.coralogix.integrations.v1.CreateWebhookIntegrationResponse
	3,  // 30: com.coralogix.integrations.v1.WebhookIntegrationService.ListWebhookIntegrations:output_type -> com.coralogix.integrations.v1.ListWebhookIntegrationsResponse
	5,  // 31: com.coralogix.integrations.v1.WebhookIntegrationService.DeleteWebhookIntegration:output_type -> com.coralogix.integrations.v1.DeleteWebhookIntegrationResponse
	7,  // 32: com.coralogix.integrations.v1.WebhookIntegrationService.ToggleWebhookIntegrationActivation:output_type -> com.coralogix.integrations.v1.ToggleWebhookIntegrationActivationResponse
	9,  // 33: com.coralogix.integrations.v1.WebhookIntegrationService.CountWebhookIntegrations:output_type -> com.coralogix.integrations.v1.CountWebhookIntegrationsResponse
	29, // [29:34] is the sub-list for method output_type
	24, // [24:29] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_com_coralogix_integrations_v1_webhook_integration_service_proto_init() }
func file_com_coralogix_integrations_v1_webhook_integration_service_proto_init() {
	if File_com_coralogix_integrations_v1_webhook_integration_service_proto != nil {
		return
	}
	file_com_coralogix_integrations_v1_webhook_proto_init()
	file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes[0].OneofWrappers = []any{
		(*CreateWebhookIntegrationRequest_Json)(nil),
		(*CreateWebhookIntegrationRequest_Text)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogix_integrations_v1_webhook_integration_service_proto_goTypes,
		DependencyIndexes: file_com_coralogix_integrations_v1_webhook_integration_service_proto_depIdxs,
		MessageInfos:      file_com_coralogix_integrations_v1_webhook_integration_service_proto_msgTypes,
	}.Build()
	File_com_coralogix_integrations_v1_webhook_integration_service_proto = out.File
	file_com_coralogix_integrations_v1_webhook_integration_service_proto_rawDesc = nil
	file_com_coralogix_integrations_v1_webhook_integration_service_proto_goTypes = nil
	file_com_coralogix_integrations_v1_webhook_integration_service_proto_depIdxs = nil
}
