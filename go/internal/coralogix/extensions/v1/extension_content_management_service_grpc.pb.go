// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: com/coralogix/extensions/v1/extension_content_management_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExtensionContentManagementService_ImportAndReleaseExtensions_FullMethodName = "/com.coralogix.extensions.v1.ExtensionContentManagementService/ImportAndReleaseExtensions"
	ExtensionContentManagementService_ValidateExtensionItems_FullMethodName     = "/com.coralogix.extensions.v1.ExtensionContentManagementService/ValidateExtensionItems"
)

// ExtensionContentManagementServiceClient is the client API for ExtensionContentManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtensionContentManagementServiceClient interface {
	ImportAndReleaseExtensions(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ExtensionData, ImportAndReleaseExtensionsResponse], error)
	ValidateExtensionItems(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ExtensionData, ValidateExtensionItemsResponse], error)
}

type extensionContentManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExtensionContentManagementServiceClient(cc grpc.ClientConnInterface) ExtensionContentManagementServiceClient {
	return &extensionContentManagementServiceClient{cc}
}

func (c *extensionContentManagementServiceClient) ImportAndReleaseExtensions(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ExtensionData, ImportAndReleaseExtensionsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExtensionContentManagementService_ServiceDesc.Streams[0], ExtensionContentManagementService_ImportAndReleaseExtensions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExtensionData, ImportAndReleaseExtensionsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExtensionContentManagementService_ImportAndReleaseExtensionsClient = grpc.ClientStreamingClient[ExtensionData, ImportAndReleaseExtensionsResponse]

func (c *extensionContentManagementServiceClient) ValidateExtensionItems(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ExtensionData, ValidateExtensionItemsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExtensionContentManagementService_ServiceDesc.Streams[1], ExtensionContentManagementService_ValidateExtensionItems_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExtensionData, ValidateExtensionItemsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExtensionContentManagementService_ValidateExtensionItemsClient = grpc.ClientStreamingClient[ExtensionData, ValidateExtensionItemsResponse]

// ExtensionContentManagementServiceServer is the server API for ExtensionContentManagementService service.
// All implementations must embed UnimplementedExtensionContentManagementServiceServer
// for forward compatibility.
type ExtensionContentManagementServiceServer interface {
	ImportAndReleaseExtensions(grpc.ClientStreamingServer[ExtensionData, ImportAndReleaseExtensionsResponse]) error
	ValidateExtensionItems(grpc.ClientStreamingServer[ExtensionData, ValidateExtensionItemsResponse]) error
	mustEmbedUnimplementedExtensionContentManagementServiceServer()
}

// UnimplementedExtensionContentManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExtensionContentManagementServiceServer struct{}

func (UnimplementedExtensionContentManagementServiceServer) ImportAndReleaseExtensions(grpc.ClientStreamingServer[ExtensionData, ImportAndReleaseExtensionsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ImportAndReleaseExtensions not implemented")
}
func (UnimplementedExtensionContentManagementServiceServer) ValidateExtensionItems(grpc.ClientStreamingServer[ExtensionData, ValidateExtensionItemsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ValidateExtensionItems not implemented")
}
func (UnimplementedExtensionContentManagementServiceServer) mustEmbedUnimplementedExtensionContentManagementServiceServer() {
}
func (UnimplementedExtensionContentManagementServiceServer) testEmbeddedByValue() {}

// UnsafeExtensionContentManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtensionContentManagementServiceServer will
// result in compilation errors.
type UnsafeExtensionContentManagementServiceServer interface {
	mustEmbedUnimplementedExtensionContentManagementServiceServer()
}

func RegisterExtensionContentManagementServiceServer(s grpc.ServiceRegistrar, srv ExtensionContentManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedExtensionContentManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExtensionContentManagementService_ServiceDesc, srv)
}

func _ExtensionContentManagementService_ImportAndReleaseExtensions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExtensionContentManagementServiceServer).ImportAndReleaseExtensions(&grpc.GenericServerStream[ExtensionData, ImportAndReleaseExtensionsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExtensionContentManagementService_ImportAndReleaseExtensionsServer = grpc.ClientStreamingServer[ExtensionData, ImportAndReleaseExtensionsResponse]

func _ExtensionContentManagementService_ValidateExtensionItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExtensionContentManagementServiceServer).ValidateExtensionItems(&grpc.GenericServerStream[ExtensionData, ValidateExtensionItemsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExtensionContentManagementService_ValidateExtensionItemsServer = grpc.ClientStreamingServer[ExtensionData, ValidateExtensionItemsResponse]

// ExtensionContentManagementService_ServiceDesc is the grpc.ServiceDesc for ExtensionContentManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtensionContentManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.extensions.v1.ExtensionContentManagementService",
	HandlerType: (*ExtensionContentManagementServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImportAndReleaseExtensions",
			Handler:       _ExtensionContentManagementService_ImportAndReleaseExtensions_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ValidateExtensionItems",
			Handler:       _ExtensionContentManagementService_ValidateExtensionItems_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "com/coralogix/extensions/v1/extension_content_management_service.proto",
}
