// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.1
// source: com/coralogix/extensions/v1/extension_deployment_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExtensionDeploymentService_GetDeployedExtensions_FullMethodName = "/com.coralogix.extensions.v1.ExtensionDeploymentService/GetDeployedExtensions"
	ExtensionDeploymentService_DeployExtension_FullMethodName       = "/com.coralogix.extensions.v1.ExtensionDeploymentService/DeployExtension"
	ExtensionDeploymentService_UpdateExtension_FullMethodName       = "/com.coralogix.extensions.v1.ExtensionDeploymentService/UpdateExtension"
	ExtensionDeploymentService_UndeployExtension_FullMethodName     = "/com.coralogix.extensions.v1.ExtensionDeploymentService/UndeployExtension"
)

// ExtensionDeploymentServiceClient is the client API for ExtensionDeploymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtensionDeploymentServiceClient interface {
	GetDeployedExtensions(ctx context.Context, in *GetDeployedExtensionsRequest, opts ...grpc.CallOption) (*GetDeployedExtensionsResponse, error)
	DeployExtension(ctx context.Context, in *DeployExtensionRequest, opts ...grpc.CallOption) (*DeployExtensionResponse, error)
	UpdateExtension(ctx context.Context, in *UpdateExtensionRequest, opts ...grpc.CallOption) (*UpdateExtensionResponse, error)
	UndeployExtension(ctx context.Context, in *UndeployExtensionRequest, opts ...grpc.CallOption) (*UndeployExtensionResponse, error)
}

type extensionDeploymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExtensionDeploymentServiceClient(cc grpc.ClientConnInterface) ExtensionDeploymentServiceClient {
	return &extensionDeploymentServiceClient{cc}
}

func (c *extensionDeploymentServiceClient) GetDeployedExtensions(ctx context.Context, in *GetDeployedExtensionsRequest, opts ...grpc.CallOption) (*GetDeployedExtensionsResponse, error) {
	out := new(GetDeployedExtensionsResponse)
	err := c.cc.Invoke(ctx, ExtensionDeploymentService_GetDeployedExtensions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionDeploymentServiceClient) DeployExtension(ctx context.Context, in *DeployExtensionRequest, opts ...grpc.CallOption) (*DeployExtensionResponse, error) {
	out := new(DeployExtensionResponse)
	err := c.cc.Invoke(ctx, ExtensionDeploymentService_DeployExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionDeploymentServiceClient) UpdateExtension(ctx context.Context, in *UpdateExtensionRequest, opts ...grpc.CallOption) (*UpdateExtensionResponse, error) {
	out := new(UpdateExtensionResponse)
	err := c.cc.Invoke(ctx, ExtensionDeploymentService_UpdateExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionDeploymentServiceClient) UndeployExtension(ctx context.Context, in *UndeployExtensionRequest, opts ...grpc.CallOption) (*UndeployExtensionResponse, error) {
	out := new(UndeployExtensionResponse)
	err := c.cc.Invoke(ctx, ExtensionDeploymentService_UndeployExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtensionDeploymentServiceServer is the server API for ExtensionDeploymentService service.
// All implementations must embed UnimplementedExtensionDeploymentServiceServer
// for forward compatibility
type ExtensionDeploymentServiceServer interface {
	GetDeployedExtensions(context.Context, *GetDeployedExtensionsRequest) (*GetDeployedExtensionsResponse, error)
	DeployExtension(context.Context, *DeployExtensionRequest) (*DeployExtensionResponse, error)
	UpdateExtension(context.Context, *UpdateExtensionRequest) (*UpdateExtensionResponse, error)
	UndeployExtension(context.Context, *UndeployExtensionRequest) (*UndeployExtensionResponse, error)
	mustEmbedUnimplementedExtensionDeploymentServiceServer()
}

// UnimplementedExtensionDeploymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExtensionDeploymentServiceServer struct {
}

func (UnimplementedExtensionDeploymentServiceServer) GetDeployedExtensions(context.Context, *GetDeployedExtensionsRequest) (*GetDeployedExtensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployedExtensions not implemented")
}
func (UnimplementedExtensionDeploymentServiceServer) DeployExtension(context.Context, *DeployExtensionRequest) (*DeployExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployExtension not implemented")
}
func (UnimplementedExtensionDeploymentServiceServer) UpdateExtension(context.Context, *UpdateExtensionRequest) (*UpdateExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtension not implemented")
}
func (UnimplementedExtensionDeploymentServiceServer) UndeployExtension(context.Context, *UndeployExtensionRequest) (*UndeployExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployExtension not implemented")
}
func (UnimplementedExtensionDeploymentServiceServer) mustEmbedUnimplementedExtensionDeploymentServiceServer() {
}

// UnsafeExtensionDeploymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtensionDeploymentServiceServer will
// result in compilation errors.
type UnsafeExtensionDeploymentServiceServer interface {
	mustEmbedUnimplementedExtensionDeploymentServiceServer()
}

func RegisterExtensionDeploymentServiceServer(s grpc.ServiceRegistrar, srv ExtensionDeploymentServiceServer) {
	s.RegisterService(&ExtensionDeploymentService_ServiceDesc, srv)
}

func _ExtensionDeploymentService_GetDeployedExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeployedExtensionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionDeploymentServiceServer).GetDeployedExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionDeploymentService_GetDeployedExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionDeploymentServiceServer).GetDeployedExtensions(ctx, req.(*GetDeployedExtensionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionDeploymentService_DeployExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionDeploymentServiceServer).DeployExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionDeploymentService_DeployExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionDeploymentServiceServer).DeployExtension(ctx, req.(*DeployExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionDeploymentService_UpdateExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionDeploymentServiceServer).UpdateExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionDeploymentService_UpdateExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionDeploymentServiceServer).UpdateExtension(ctx, req.(*UpdateExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionDeploymentService_UndeployExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionDeploymentServiceServer).UndeployExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionDeploymentService_UndeployExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionDeploymentServiceServer).UndeployExtension(ctx, req.(*UndeployExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtensionDeploymentService_ServiceDesc is the grpc.ServiceDesc for ExtensionDeploymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtensionDeploymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.extensions.v1.ExtensionDeploymentService",
	HandlerType: (*ExtensionDeploymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeployedExtensions",
			Handler:    _ExtensionDeploymentService_GetDeployedExtensions_Handler,
		},
		{
			MethodName: "DeployExtension",
			Handler:    _ExtensionDeploymentService_DeployExtension_Handler,
		},
		{
			MethodName: "UpdateExtension",
			Handler:    _ExtensionDeploymentService_UpdateExtension_Handler,
		},
		{
			MethodName: "UndeployExtension",
			Handler:    _ExtensionDeploymentService_UndeployExtension_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/extensions/v1/extension_deployment_service.proto",
}
