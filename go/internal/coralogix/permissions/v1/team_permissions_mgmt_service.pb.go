// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.26.1
// source: com/coralogix/permissions/v1/team_permissions_mgmt_service.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// / Get team group request
type GetTeamGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team group id
	GroupId       *TeamGroupId `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTeamGroupRequest) Reset() {
	*x = GetTeamGroupRequest{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamGroupRequest) ProtoMessage() {}

func (x *GetTeamGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamGroupRequest.ProtoReflect.Descriptor instead.
func (*GetTeamGroupRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetTeamGroupRequest) GetGroupId() *TeamGroupId {
	if x != nil {
		return x.GroupId
	}
	return nil
}

// / Get team group response
type GetTeamGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team group
	Group         *TeamGroup `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTeamGroupResponse) Reset() {
	*x = GetTeamGroupResponse{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamGroupResponse) ProtoMessage() {}

func (x *GetTeamGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamGroupResponse.ProtoReflect.Descriptor instead.
func (*GetTeamGroupResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetTeamGroupResponse) GetGroup() *TeamGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type GetTeamGroupByNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTeamGroupByNameRequest) Reset() {
	*x = GetTeamGroupByNameRequest{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamGroupByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamGroupByNameRequest) ProtoMessage() {}

func (x *GetTeamGroupByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamGroupByNameRequest.ProtoReflect.Descriptor instead.
func (*GetTeamGroupByNameRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetTeamGroupByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetTeamGroupByNameResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         *TeamGroup             `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTeamGroupByNameResponse) Reset() {
	*x = GetTeamGroupByNameResponse{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamGroupByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamGroupByNameResponse) ProtoMessage() {}

func (x *GetTeamGroupByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamGroupByNameResponse.ProtoReflect.Descriptor instead.
func (*GetTeamGroupByNameResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetTeamGroupByNameResponse) GetGroup() *TeamGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// / Get all team groups request
type GetTeamGroupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team to fetch team groups for. If not set, fetches groups associated with logged in team
	// / Bear in mind that an user can only fetch groups for logged in team. Unless you want to express this as a
	// / validation of what the logged in team should be, this field can remain empty.
	TeamId        *TeamId `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3,oneof" json:"team_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTeamGroupsRequest) Reset() {
	*x = GetTeamGroupsRequest{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamGroupsRequest) ProtoMessage() {}

func (x *GetTeamGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetTeamGroupsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetTeamGroupsRequest) GetTeamId() *TeamId {
	if x != nil {
		return x.TeamId
	}
	return nil
}

// / Get all team groups response
type GetTeamGroupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Groups associated with team
	Groups        []*TeamGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTeamGroupsResponse) Reset() {
	*x = GetTeamGroupsResponse{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamGroupsResponse) ProtoMessage() {}

func (x *GetTeamGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetTeamGroupsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetTeamGroupsResponse) GetGroups() []*TeamGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

// / Create team group request
type CreateTeamGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team group name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// / Team which the group will be associated with. If not set, creates group and associates it with logged in team
	// / Bear in mind that an user can only create team for logged in team. Unless you want to express this as a
	// / validation of what the logged in team should be, this field can remain empty.
	TeamId *TeamId `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3,oneof" json:"team_id,omitempty"`
	// / Team group description
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// / Team group external_id. Applies if team is externally defined.
	ExternalId *string `protobuf:"bytes,4,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"`
	// / Roles to associate with team group
	RoleIds []*RoleId `protobuf:"bytes,5,rep,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
	// / Users to associate with team group
	UserIds []*UserId `protobuf:"bytes,6,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// / Optionally set team group scope filters
	ScopeFilters   *ScopeFilters `protobuf:"bytes,7,opt,name=scope_filters,json=scopeFilters,proto3,oneof" json:"scope_filters,omitempty"`
	NextGenScopeId *string       `protobuf:"bytes,8,opt,name=next_gen_scope_id,json=nextGenScopeId,proto3,oneof" json:"next_gen_scope_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateTeamGroupRequest) Reset() {
	*x = CreateTeamGroupRequest{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTeamGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamGroupRequest) ProtoMessage() {}

func (x *CreateTeamGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateTeamGroupRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTeamGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTeamGroupRequest) GetTeamId() *TeamId {
	if x != nil {
		return x.TeamId
	}
	return nil
}

func (x *CreateTeamGroupRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateTeamGroupRequest) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *CreateTeamGroupRequest) GetRoleIds() []*RoleId {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

func (x *CreateTeamGroupRequest) GetUserIds() []*UserId {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *CreateTeamGroupRequest) GetScopeFilters() *ScopeFilters {
	if x != nil {
		return x.ScopeFilters
	}
	return nil
}

func (x *CreateTeamGroupRequest) GetNextGenScopeId() string {
	if x != nil && x.NextGenScopeId != nil {
		return *x.NextGenScopeId
	}
	return ""
}

// / Create team group response
type CreateTeamGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team group id
	GroupId       *TeamGroupId `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTeamGroupResponse) Reset() {
	*x = CreateTeamGroupResponse{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTeamGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamGroupResponse) ProtoMessage() {}

func (x *CreateTeamGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateTeamGroupResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTeamGroupResponse) GetGroupId() *TeamGroupId {
	if x != nil {
		return x.GroupId
	}
	return nil
}

// / Update team group request
type UpdateTeamGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team group to be updated
	GroupId *TeamGroupId `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// / Updated team group name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// / Updated team group description
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// / Updated team group external_id
	ExternalId *string `protobuf:"bytes,4,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"`
	// / If set, new roles to associate with team group
	RoleUpdates *UpdateTeamGroupRequest_RoleUpdates `protobuf:"bytes,5,opt,name=role_updates,json=roleUpdates,proto3,oneof" json:"role_updates,omitempty"`
	// / If set, new users to associate with team group
	UserUpdates *UpdateTeamGroupRequest_UserUpdates `protobuf:"bytes,6,opt,name=user_updates,json=userUpdates,proto3,oneof" json:"user_updates,omitempty"`
	// / If set, updates new team group scope filters
	ScopeFilters *ScopeFilters `protobuf:"bytes,7,opt,name=scope_filters,json=scopeFilters,proto3,oneof" json:"scope_filters,omitempty"`
	// / If set, updates new team group next gen scope
	NextGenScopeId *string `protobuf:"bytes,8,opt,name=next_gen_scope_id,json=nextGenScopeId,proto3,oneof" json:"next_gen_scope_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateTeamGroupRequest) Reset() {
	*x = UpdateTeamGroupRequest{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTeamGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamGroupRequest) ProtoMessage() {}

func (x *UpdateTeamGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateTeamGroupRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTeamGroupRequest) GetGroupId() *TeamGroupId {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *UpdateTeamGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTeamGroupRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateTeamGroupRequest) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *UpdateTeamGroupRequest) GetRoleUpdates() *UpdateTeamGroupRequest_RoleUpdates {
	if x != nil {
		return x.RoleUpdates
	}
	return nil
}

func (x *UpdateTeamGroupRequest) GetUserUpdates() *UpdateTeamGroupRequest_UserUpdates {
	if x != nil {
		return x.UserUpdates
	}
	return nil
}

func (x *UpdateTeamGroupRequest) GetScopeFilters() *ScopeFilters {
	if x != nil {
		return x.ScopeFilters
	}
	return nil
}

func (x *UpdateTeamGroupRequest) GetNextGenScopeId() string {
	if x != nil && x.NextGenScopeId != nil {
		return *x.NextGenScopeId
	}
	return ""
}

// / Update team group response
type UpdateTeamGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTeamGroupResponse) Reset() {
	*x = UpdateTeamGroupResponse{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTeamGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamGroupResponse) ProtoMessage() {}

func (x *UpdateTeamGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateTeamGroupResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{9}
}

// / Delete team group request
type DeleteTeamGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team group id
	GroupId       *TeamGroupId `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTeamGroupRequest) Reset() {
	*x = DeleteTeamGroupRequest{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTeamGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamGroupRequest) ProtoMessage() {}

func (x *DeleteTeamGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteTeamGroupRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteTeamGroupRequest) GetGroupId() *TeamGroupId {
	if x != nil {
		return x.GroupId
	}
	return nil
}

// / Delete team group response
type DeleteTeamGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTeamGroupResponse) Reset() {
	*x = DeleteTeamGroupResponse{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTeamGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamGroupResponse) ProtoMessage() {}

func (x *DeleteTeamGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteTeamGroupResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{11}
}

// / Fetches all users linked with given team group
type GetGroupUsersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team group id
	GroupId *TeamGroupId `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// / Pagination size. Defaults to 100 if empty
	PageSize *uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// / Optional pagination continuation token
	// / Contains an encoded cursor
	PageToken     *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupUsersRequest) Reset() {
	*x = GetGroupUsersRequest{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupUsersRequest) ProtoMessage() {}

func (x *GetGroupUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupUsersRequest.ProtoReflect.Descriptor instead.
func (*GetGroupUsersRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetGroupUsersRequest) GetGroupId() *TeamGroupId {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *GetGroupUsersRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *GetGroupUsersRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type GetGroupUsersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Users []*User                `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	// Types that are valid to be assigned to NextPage:
	//
	//	*GetGroupUsersResponse_NoMorePages_
	//	*GetGroupUsersResponse_Token
	NextPage      isGetGroupUsersResponse_NextPage `protobuf_oneof:"next_page"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupUsersResponse) Reset() {
	*x = GetGroupUsersResponse{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupUsersResponse) ProtoMessage() {}

func (x *GetGroupUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupUsersResponse.ProtoReflect.Descriptor instead.
func (*GetGroupUsersResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetGroupUsersResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetGroupUsersResponse) GetNextPage() isGetGroupUsersResponse_NextPage {
	if x != nil {
		return x.NextPage
	}
	return nil
}

func (x *GetGroupUsersResponse) GetNoMorePages() *GetGroupUsersResponse_NoMorePages {
	if x != nil {
		if x, ok := x.NextPage.(*GetGroupUsersResponse_NoMorePages_); ok {
			return x.NoMorePages
		}
	}
	return nil
}

func (x *GetGroupUsersResponse) GetToken() *GetGroupUsersResponse_NextPageToken {
	if x != nil {
		if x, ok := x.NextPage.(*GetGroupUsersResponse_Token); ok {
			return x.Token
		}
	}
	return nil
}

type isGetGroupUsersResponse_NextPage interface {
	isGetGroupUsersResponse_NextPage()
}

type GetGroupUsersResponse_NoMorePages_ struct {
	NoMorePages *GetGroupUsersResponse_NoMorePages `protobuf:"bytes,2,opt,name=no_more_pages,json=noMorePages,proto3,oneof"`
}

type GetGroupUsersResponse_Token struct {
	Token *GetGroupUsersResponse_NextPageToken `protobuf:"bytes,3,opt,name=token,proto3,oneof"`
}

func (*GetGroupUsersResponse_NoMorePages_) isGetGroupUsersResponse_NextPage() {}

func (*GetGroupUsersResponse_Token) isGetGroupUsersResponse_NextPage() {}

// / Add users to an existing team group
type AddUsersToTeamGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team group id to add users to
	GroupId *TeamGroupId `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// / Users to add to group
	UserIds       []*UserId `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUsersToTeamGroupRequest) Reset() {
	*x = AddUsersToTeamGroupRequest{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUsersToTeamGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUsersToTeamGroupRequest) ProtoMessage() {}

func (x *AddUsersToTeamGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUsersToTeamGroupRequest.ProtoReflect.Descriptor instead.
func (*AddUsersToTeamGroupRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{14}
}

func (x *AddUsersToTeamGroupRequest) GetGroupId() *TeamGroupId {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *AddUsersToTeamGroupRequest) GetUserIds() []*UserId {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// / Add users to an existing team group response
type AddUsersToTeamGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team id to which given team group belongs
	TeamId        *TeamId `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUsersToTeamGroupResponse) Reset() {
	*x = AddUsersToTeamGroupResponse{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUsersToTeamGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUsersToTeamGroupResponse) ProtoMessage() {}

func (x *AddUsersToTeamGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUsersToTeamGroupResponse.ProtoReflect.Descriptor instead.
func (*AddUsersToTeamGroupResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{15}
}

func (x *AddUsersToTeamGroupResponse) GetTeamId() *TeamId {
	if x != nil {
		return x.TeamId
	}
	return nil
}

// / Associate new users with groups in a team
// / Allows to associate any number of users with any number of groups belonging to a team
type AddUsersToTeamGroupsRequest struct {
	state           protoimpl.MessageState                             `protogen:"open.v1"`
	TeamId          *TeamId                                            `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	AddUsersToGroup []*AddUsersToTeamGroupsRequest_AddUsersToTeamGroup `protobuf:"bytes,2,rep,name=add_users_to_group,json=addUsersToGroup,proto3" json:"add_users_to_group,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddUsersToTeamGroupsRequest) Reset() {
	*x = AddUsersToTeamGroupsRequest{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUsersToTeamGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUsersToTeamGroupsRequest) ProtoMessage() {}

func (x *AddUsersToTeamGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUsersToTeamGroupsRequest.ProtoReflect.Descriptor instead.
func (*AddUsersToTeamGroupsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{16}
}

func (x *AddUsersToTeamGroupsRequest) GetTeamId() *TeamId {
	if x != nil {
		return x.TeamId
	}
	return nil
}

func (x *AddUsersToTeamGroupsRequest) GetAddUsersToGroup() []*AddUsersToTeamGroupsRequest_AddUsersToTeamGroup {
	if x != nil {
		return x.AddUsersToGroup
	}
	return nil
}

type AddUsersToTeamGroupsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUsersToTeamGroupsResponse) Reset() {
	*x = AddUsersToTeamGroupsResponse{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUsersToTeamGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUsersToTeamGroupsResponse) ProtoMessage() {}

func (x *AddUsersToTeamGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUsersToTeamGroupsResponse.ProtoReflect.Descriptor instead.
func (*AddUsersToTeamGroupsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{17}
}

// / Remove users from an existing team group
type RemoveUsersFromTeamGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team group id to remove users from
	GroupId *TeamGroupId `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// / Users to remove to group
	UserIds       []*UserId `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUsersFromTeamGroupRequest) Reset() {
	*x = RemoveUsersFromTeamGroupRequest{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUsersFromTeamGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUsersFromTeamGroupRequest) ProtoMessage() {}

func (x *RemoveUsersFromTeamGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUsersFromTeamGroupRequest.ProtoReflect.Descriptor instead.
func (*RemoveUsersFromTeamGroupRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveUsersFromTeamGroupRequest) GetGroupId() *TeamGroupId {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *RemoveUsersFromTeamGroupRequest) GetUserIds() []*UserId {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type RemoveUsersFromTeamGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUsersFromTeamGroupResponse) Reset() {
	*x = RemoveUsersFromTeamGroupResponse{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUsersFromTeamGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUsersFromTeamGroupResponse) ProtoMessage() {}

func (x *RemoveUsersFromTeamGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUsersFromTeamGroupResponse.ProtoReflect.Descriptor instead.
func (*RemoveUsersFromTeamGroupResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{19}
}

// / Remove users from groups in a team
// / Allows the removal of any number of users and any number of groups belonging to a team
type RemoveUsersFromTeamGroupsRequest struct {
	state                protoimpl.MessageState                                       `protogen:"open.v1"`
	TeamId               *TeamId                                                      `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	RemoveUsersFromGroup []*RemoveUsersFromTeamGroupsRequest_RemoveUsersFromTeamGroup `protobuf:"bytes,2,rep,name=remove_users_from_group,json=removeUsersFromGroup,proto3" json:"remove_users_from_group,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RemoveUsersFromTeamGroupsRequest) Reset() {
	*x = RemoveUsersFromTeamGroupsRequest{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUsersFromTeamGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUsersFromTeamGroupsRequest) ProtoMessage() {}

func (x *RemoveUsersFromTeamGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUsersFromTeamGroupsRequest.ProtoReflect.Descriptor instead.
func (*RemoveUsersFromTeamGroupsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{20}
}

func (x *RemoveUsersFromTeamGroupsRequest) GetTeamId() *TeamId {
	if x != nil {
		return x.TeamId
	}
	return nil
}

func (x *RemoveUsersFromTeamGroupsRequest) GetRemoveUsersFromGroup() []*RemoveUsersFromTeamGroupsRequest_RemoveUsersFromTeamGroup {
	if x != nil {
		return x.RemoveUsersFromGroup
	}
	return nil
}

// / Remove users from existing groups
type RemoveUsersFromTeamGroupsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUsersFromTeamGroupsResponse) Reset() {
	*x = RemoveUsersFromTeamGroupsResponse{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUsersFromTeamGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUsersFromTeamGroupsResponse) ProtoMessage() {}

func (x *RemoveUsersFromTeamGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUsersFromTeamGroupsResponse.ProtoReflect.Descriptor instead.
func (*RemoveUsersFromTeamGroupsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{21}
}

// / Set team group scope request
type SetTeamGroupScopeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team group to set scope to
	GroupId *TeamGroupId `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// / team group scope filters
	ScopeFilters  *ScopeFilters `protobuf:"bytes,2,opt,name=scope_filters,json=scopeFilters,proto3" json:"scope_filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTeamGroupScopeRequest) Reset() {
	*x = SetTeamGroupScopeRequest{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTeamGroupScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeamGroupScopeRequest) ProtoMessage() {}

func (x *SetTeamGroupScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTeamGroupScopeRequest.ProtoReflect.Descriptor instead.
func (*SetTeamGroupScopeRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{22}
}

func (x *SetTeamGroupScopeRequest) GetGroupId() *TeamGroupId {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *SetTeamGroupScopeRequest) GetScopeFilters() *ScopeFilters {
	if x != nil {
		return x.ScopeFilters
	}
	return nil
}

// / Set team group scope response
type SetTeamGroupScopeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Created scope_id or 0 if already exists and was replaced.
	ScopeId       *ScopeId `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTeamGroupScopeResponse) Reset() {
	*x = SetTeamGroupScopeResponse{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTeamGroupScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeamGroupScopeResponse) ProtoMessage() {}

func (x *SetTeamGroupScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTeamGroupScopeResponse.ProtoReflect.Descriptor instead.
func (*SetTeamGroupScopeResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{23}
}

func (x *SetTeamGroupScopeResponse) GetScopeId() *ScopeId {
	if x != nil {
		return x.ScopeId
	}
	return nil
}

// / Get team group scope request
type GetTeamGroupScopeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team group to set scope to
	GroupId       *TeamGroupId `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTeamGroupScopeRequest) Reset() {
	*x = GetTeamGroupScopeRequest{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamGroupScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamGroupScopeRequest) ProtoMessage() {}

func (x *GetTeamGroupScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamGroupScopeRequest.ProtoReflect.Descriptor instead.
func (*GetTeamGroupScopeRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{24}
}

func (x *GetTeamGroupScopeRequest) GetGroupId() *TeamGroupId {
	if x != nil {
		return x.GroupId
	}
	return nil
}

// / Set team group scope response
type GetTeamGroupScopeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Scope if group has one set
	Scope         *Scope `protobuf:"bytes,1,opt,name=scope,proto3,oneof" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTeamGroupScopeResponse) Reset() {
	*x = GetTeamGroupScopeResponse{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamGroupScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamGroupScopeResponse) ProtoMessage() {}

func (x *GetTeamGroupScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamGroupScopeResponse.ProtoReflect.Descriptor instead.
func (*GetTeamGroupScopeResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{25}
}

func (x *GetTeamGroupScopeResponse) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

// / Specifies new roles to assign to a group removing previous ones
type UpdateTeamGroupRequest_RoleUpdates struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Roles to associate with a team group
	RoleIds       []*RoleId `protobuf:"bytes,1,rep,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTeamGroupRequest_RoleUpdates) Reset() {
	*x = UpdateTeamGroupRequest_RoleUpdates{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTeamGroupRequest_RoleUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamGroupRequest_RoleUpdates) ProtoMessage() {}

func (x *UpdateTeamGroupRequest_RoleUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamGroupRequest_RoleUpdates.ProtoReflect.Descriptor instead.
func (*UpdateTeamGroupRequest_RoleUpdates) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UpdateTeamGroupRequest_RoleUpdates) GetRoleIds() []*RoleId {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

// / Specifies new users to assign to a group removing previous ones
type UpdateTeamGroupRequest_UserUpdates struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Users to associate with a team group
	UserIds       []*UserId `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTeamGroupRequest_UserUpdates) Reset() {
	*x = UpdateTeamGroupRequest_UserUpdates{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTeamGroupRequest_UserUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamGroupRequest_UserUpdates) ProtoMessage() {}

func (x *UpdateTeamGroupRequest_UserUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamGroupRequest_UserUpdates.ProtoReflect.Descriptor instead.
func (*UpdateTeamGroupRequest_UserUpdates) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{8, 1}
}

func (x *UpdateTeamGroupRequest_UserUpdates) GetUserIds() []*UserId {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type GetGroupUsersResponse_NoMorePages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupUsersResponse_NoMorePages) Reset() {
	*x = GetGroupUsersResponse_NoMorePages{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupUsersResponse_NoMorePages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupUsersResponse_NoMorePages) ProtoMessage() {}

func (x *GetGroupUsersResponse_NoMorePages) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupUsersResponse_NoMorePages.ProtoReflect.Descriptor instead.
func (*GetGroupUsersResponse_NoMorePages) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{13, 0}
}

type GetGroupUsersResponse_NextPageToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NextPageToken string                 `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupUsersResponse_NextPageToken) Reset() {
	*x = GetGroupUsersResponse_NextPageToken{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupUsersResponse_NextPageToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupUsersResponse_NextPageToken) ProtoMessage() {}

func (x *GetGroupUsersResponse_NextPageToken) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupUsersResponse_NextPageToken.ProtoReflect.Descriptor instead.
func (*GetGroupUsersResponse_NextPageToken) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{13, 1}
}

func (x *GetGroupUsersResponse_NextPageToken) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type AddUsersToTeamGroupsRequest_AddUsersToTeamGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team group id to add users to
	GroupId *TeamGroupId `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// / Users to add to group
	UserIds       []*UserId `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddUsersToTeamGroupsRequest_AddUsersToTeamGroup) Reset() {
	*x = AddUsersToTeamGroupsRequest_AddUsersToTeamGroup{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddUsersToTeamGroupsRequest_AddUsersToTeamGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUsersToTeamGroupsRequest_AddUsersToTeamGroup) ProtoMessage() {}

func (x *AddUsersToTeamGroupsRequest_AddUsersToTeamGroup) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUsersToTeamGroupsRequest_AddUsersToTeamGroup.ProtoReflect.Descriptor instead.
func (*AddUsersToTeamGroupsRequest_AddUsersToTeamGroup) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{16, 0}
}

func (x *AddUsersToTeamGroupsRequest_AddUsersToTeamGroup) GetGroupId() *TeamGroupId {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *AddUsersToTeamGroupsRequest_AddUsersToTeamGroup) GetUserIds() []*UserId {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type RemoveUsersFromTeamGroupsRequest_RemoveUsersFromTeamGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// / Team group id to remove users from
	GroupId *TeamGroupId `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// / Users to remove to group
	UserIds       []*UserId `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUsersFromTeamGroupsRequest_RemoveUsersFromTeamGroup) Reset() {
	*x = RemoveUsersFromTeamGroupsRequest_RemoveUsersFromTeamGroup{}
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUsersFromTeamGroupsRequest_RemoveUsersFromTeamGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUsersFromTeamGroupsRequest_RemoveUsersFromTeamGroup) ProtoMessage() {}

func (x *RemoveUsersFromTeamGroupsRequest_RemoveUsersFromTeamGroup) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUsersFromTeamGroupsRequest_RemoveUsersFromTeamGroup.ProtoReflect.Descriptor instead.
func (*RemoveUsersFromTeamGroupsRequest_RemoveUsersFromTeamGroup) Descriptor() ([]byte, []int) {
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP(), []int{20, 0}
}

func (x *RemoveUsersFromTeamGroupsRequest_RemoveUsersFromTeamGroup) GetGroupId() *TeamGroupId {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *RemoveUsersFromTeamGroupsRequest_RemoveUsersFromTeamGroup) GetUserIds() []*UserId {
	if x != nil {
		return x.UserIds
	}
	return nil
}

var File_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto protoreflect.FileDescriptor

var file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDesc = []byte{
	0x0a, 0x40, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c,
	0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x3a, 0xbe, 0x02, 0x92,
	0x41, 0xba, 0x02, 0x0a, 0xa4, 0x01, 0x2a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x8c, 0x01, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x74, 0x65, 0x61,
	0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x62, 0x79, 0x20, 0x69, 0x74, 0x73, 0x20, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x20, 0x55, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x20,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2c, 0x20,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46,
	0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22, 0x8e, 0x03,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0xb6, 0x02, 0x92, 0x41, 0xb2, 0x02, 0x0a, 0x9c, 0x01, 0x2a,
	0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x83, 0x01, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74, 0x73, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2c, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a,
	0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65,
	0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22, 0xde,
	0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x3a, 0xac, 0x02, 0x92, 0x41, 0xa8, 0x02, 0x0a, 0x92, 0x01, 0x2a, 0x19, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74,
	0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x74, 0x65, 0x61,
	0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74,
	0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x65, 0x61, 0x6d, 0x27, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x20,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x2e, 0x2a, 0x90, 0x01, 0x0a,
	0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22,
	0xa2, 0x03, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0xc4, 0x02,
	0x92, 0x41, 0xc0, 0x02, 0x0a, 0xaa, 0x01, 0x2a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x8b, 0x01, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74, 0x73, 0x20, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2c, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d,
	0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e,
	0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x22, 0xa2, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x48, 0x00, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x3a, 0xb9, 0x02, 0x92, 0x41, 0xb5, 0x02, 0x0a, 0x9f, 0x01, 0x2a, 0x14, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x86, 0x01, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x20, 0x69,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2c, 0x20,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46,
	0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x22, 0x8b, 0x03, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x3a, 0xb0, 0x02, 0x92, 0x41, 0xac, 0x02, 0x0a, 0x96, 0x01, 0x2a, 0x15,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x7d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2c,
	0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2c, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75,
	0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22, 0x81, 0x07, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x52,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x48, 0x03, 0x52, 0x0c,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x6e, 0x65,
	0x78, 0x74, 0x47, 0x65, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x3a,
	0xe5, 0x02, 0x92, 0x41, 0xe1, 0x02, 0x0a, 0xcb, 0x01, 0x2a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0xb0, 0x01, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x74, 0x65, 0x61, 0x6d,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2c, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x20, 0x43, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75,
	0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x67,
	0x65, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xe0, 0x02, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x3a, 0xfe, 0x01,
	0x92, 0x41, 0xfa, 0x01, 0x0a, 0x65, 0x2a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x4a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a,
	0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65,
	0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22, 0xbc,
	0x0c, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x68, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x48, 0x02, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x48, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x48, 0x04, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x47, 0x65, 0x6e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0xc3, 0x02, 0x0a, 0x0b, 0x52,
	0x6f, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x3a, 0xf2, 0x01, 0x92, 0x41,
	0xee, 0x01, 0x0a, 0x59, 0x2a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x32, 0x4a, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x2a, 0x90, 0x01,
	0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x1a, 0xc3, 0x02, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x3a, 0xf2, 0x01, 0x92, 0x41, 0xee, 0x01, 0x0a, 0x59, 0x2a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x32, 0x4a, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0x6b,
	0x65, 0x79, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74,
	0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d,
	0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x3a, 0xaa, 0x02, 0x92, 0x41, 0xa6, 0x02, 0x0a, 0x90, 0x01,
	0x2a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x20, 0x61, 0x6e, 0x20, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x27, 0x73, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2c, 0x20, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x2c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f,
	0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64,
	0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x9a, 0x02,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0xfe, 0x01, 0x92, 0x41, 0xfa, 0x01,
	0x0a, 0x65, 0x2a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x4a, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74, 0x65, 0x61, 0x6d,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x27, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f,
	0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76,
	0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22, 0x81, 0x03, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x3a, 0xa0, 0x02, 0x92, 0x41,
	0x9c, 0x02, 0x0a, 0x86, 0x01, 0x2a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x20, 0x61, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x69, 0x74, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74, 0x73, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a,
	0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65,
	0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22, 0xae,
	0x02, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x92, 0x02, 0x92, 0x41, 0x8e,
	0x02, 0x0a, 0x79, 0x2a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x5e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74,
	0x65, 0x61, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x74,
	0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x2a, 0x90, 0x01, 0x0a,
	0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22,
	0xcf, 0x03, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x3a, 0x8d, 0x02, 0x92, 0x41, 0x89, 0x02, 0x0a, 0x74, 0x2a, 0x14, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x5c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x69, 0x74, 0x73, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44,
	0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d,
	0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e,
	0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xe4, 0x08, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6d, 0x6f, 0x72, 0x65,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4e, 0x6f, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x6e, 0x6f, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x82, 0x02, 0x0a, 0x0b, 0x4e, 0x6f, 0x4d, 0x6f,
	0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x3a, 0xf2, 0x01, 0x92, 0x41, 0xee, 0x01, 0x0a, 0x59,
	0x2a, 0x0b, 0x4e, 0x6f, 0x4d, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x32, 0x4a, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e,
	0x20, 0x41, 0x50, 0x49, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69,
	0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x1a, 0xae, 0x02, 0x0a,
	0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0xf4, 0x01, 0x92, 0x41, 0xf0, 0x01, 0x0a, 0x5b, 0x2a,
	0x0d, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x4a,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61,
	0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46,
	0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x3a, 0x8b, 0x02,
	0x92, 0x41, 0x87, 0x02, 0x0a, 0x72, 0x2a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x59, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x65, 0x61,
	0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e,
	0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d,
	0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x42, 0x0b, 0x0a, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x22, 0xd2, 0x03, 0x0a, 0x1a, 0x41, 0x64, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x3a, 0xac,
	0x02, 0x92, 0x41, 0xa8, 0x02, 0x0a, 0x92, 0x01, 0x2a, 0x1a, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x20, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2c, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x27, 0x73, 0x20, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46,
	0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22, 0xe8, 0x02,
	0x0a, 0x1b, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x3a, 0x89, 0x02, 0x92,
	0x41, 0x85, 0x02, 0x0a, 0x70, 0x2a, 0x1b, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54,
	0x6f, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x51, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f,
	0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22, 0xa5, 0x07, 0x0a, 0x1b, 0x41, 0x64, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x7a, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x1a, 0x99, 0x03, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x44, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x3a, 0xfa, 0x01, 0x92, 0x41, 0xf6, 0x01, 0x0a, 0x61, 0x2a, 0x13, 0x41, 0x64, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x32, 0x4a, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x61, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x2a, 0x90, 0x01, 0x0a,
	0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x3a,
	0xae, 0x02, 0x92, 0x41, 0xaa, 0x02, 0x0a, 0x94, 0x01, 0x2a, 0x1b, 0x41, 0x64, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x75, 0x42, 0x75, 0x6c, 0x6b, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x73, 0x69, 0x6d,
	0x75, 0x6c, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x2c, 0x20, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x20, 0x61, 0x74, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2e, 0x2a, 0x90, 0x01,
	0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x22, 0xac, 0x02, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54,
	0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x8b, 0x02, 0x92, 0x41, 0x87, 0x02, 0x0a, 0x72, 0x2a, 0x1c, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x62, 0x75, 0x6c,
	0x6b, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20,
	0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x2a, 0x90, 0x01, 0x0a,
	0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22,
	0xde, 0x03, 0x0a, 0x1f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x3a, 0xb3, 0x02, 0x92, 0x41, 0xaf,
	0x02, 0x0a, 0x99, 0x01, 0x2a, 0x1f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74,
	0x6f, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20,
	0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2c, 0x20, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x27, 0x73,
	0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x2a, 0x90, 0x01,
	0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x22, 0xb4, 0x02, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x8f, 0x02, 0x92, 0x41, 0x8b, 0x02, 0x0a, 0x76, 0x2a, 0x20,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75,
	0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22, 0xdc, 0x07, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x8e, 0x01, 0x0a, 0x17,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xa3, 0x03, 0x0a,
	0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x44, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x3a, 0xff, 0x01, 0x92, 0x41, 0xfb, 0x01, 0x0a, 0x66, 0x2a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x32, 0x4a, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x2a,
	0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72,
	0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x3a, 0xc1, 0x02, 0x92, 0x41, 0xbd, 0x02, 0x0a, 0xa7, 0x01, 0x2a, 0x20, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x82,
	0x01, 0x42, 0x75, 0x6c, 0x6b, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x74, 0x61, 0x6e,
	0x65, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x2c, 0x20, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x6c, 0x79, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x72, 0x65,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x74, 0x20, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x2e, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74,
	0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d,
	0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22, 0xb7, 0x02, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x91, 0x02, 0x92,
	0x41, 0x8d, 0x02, 0x0a, 0x78, 0x2a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x62, 0x75, 0x6c,
	0x6b, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x2a, 0x90, 0x01,
	0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x22, 0xe0, 0x03, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x3a, 0xac, 0x02, 0x92, 0x41, 0xa8, 0x02, 0x0a, 0x92, 0x01, 0x2a, 0x18,
	0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x20, 0x28, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x29, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x6f,
	0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61, 0x6e, 0x64,
	0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x22, 0xef, 0x02, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x3a, 0x8f, 0x02, 0x92, 0x41, 0x8b, 0x02, 0x0a, 0x76, 0x2a, 0x19, 0x53, 0x65,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x59, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x6f, 0x72, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20,
	0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2d, 0x61,
	0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22, 0xf0, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x3a, 0x8d, 0x02, 0x92, 0x41, 0x89, 0x02, 0x0a,
	0x74, 0x2a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x58, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f,
	0x75, 0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x22, 0x96, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x88, 0x01, 0x01, 0x3a, 0xae, 0x02, 0x92, 0x41, 0xaa, 0x02, 0x0a, 0x94, 0x01,
	0x2a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x29, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2a, 0x90, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x75,
	0x74, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x72, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2d, 0x76, 0x69, 0x61, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x32, 0xef, 0x11, 0x0a, 0x1a, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x67, 0x6d, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x69, 0x64, 0x7d,
	0x12, 0xa1, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x9b,
	0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x9b, 0x01, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x2e,
	0x69, 0x64, 0x7d, 0x12, 0xa6, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xbb, 0x01, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65,
	0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xc7, 0x01,
	0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x2a, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x69, 0x64,
	0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x36, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0xb2,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescOnce sync.Once
	file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescData = file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDesc
)

func file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescGZIP() []byte {
	file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescOnce.Do(func() {
		file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescData)
	})
	return file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDescData
}

var file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_goTypes = []any{
	(*GetTeamGroupRequest)(nil),                                       // 0: com.coralogix.permissions.v1.GetTeamGroupRequest
	(*GetTeamGroupResponse)(nil),                                      // 1: com.coralogix.permissions.v1.GetTeamGroupResponse
	(*GetTeamGroupByNameRequest)(nil),                                 // 2: com.coralogix.permissions.v1.GetTeamGroupByNameRequest
	(*GetTeamGroupByNameResponse)(nil),                                // 3: com.coralogix.permissions.v1.GetTeamGroupByNameResponse
	(*GetTeamGroupsRequest)(nil),                                      // 4: com.coralogix.permissions.v1.GetTeamGroupsRequest
	(*GetTeamGroupsResponse)(nil),                                     // 5: com.coralogix.permissions.v1.GetTeamGroupsResponse
	(*CreateTeamGroupRequest)(nil),                                    // 6: com.coralogix.permissions.v1.CreateTeamGroupRequest
	(*CreateTeamGroupResponse)(nil),                                   // 7: com.coralogix.permissions.v1.CreateTeamGroupResponse
	(*UpdateTeamGroupRequest)(nil),                                    // 8: com.coralogix.permissions.v1.UpdateTeamGroupRequest
	(*UpdateTeamGroupResponse)(nil),                                   // 9: com.coralogix.permissions.v1.UpdateTeamGroupResponse
	(*DeleteTeamGroupRequest)(nil),                                    // 10: com.coralogix.permissions.v1.DeleteTeamGroupRequest
	(*DeleteTeamGroupResponse)(nil),                                   // 11: com.coralogix.permissions.v1.DeleteTeamGroupResponse
	(*GetGroupUsersRequest)(nil),                                      // 12: com.coralogix.permissions.v1.GetGroupUsersRequest
	(*GetGroupUsersResponse)(nil),                                     // 13: com.coralogix.permissions.v1.GetGroupUsersResponse
	(*AddUsersToTeamGroupRequest)(nil),                                // 14: com.coralogix.permissions.v1.AddUsersToTeamGroupRequest
	(*AddUsersToTeamGroupResponse)(nil),                               // 15: com.coralogix.permissions.v1.AddUsersToTeamGroupResponse
	(*AddUsersToTeamGroupsRequest)(nil),                               // 16: com.coralogix.permissions.v1.AddUsersToTeamGroupsRequest
	(*AddUsersToTeamGroupsResponse)(nil),                              // 17: com.coralogix.permissions.v1.AddUsersToTeamGroupsResponse
	(*RemoveUsersFromTeamGroupRequest)(nil),                           // 18: com.coralogix.permissions.v1.RemoveUsersFromTeamGroupRequest
	(*RemoveUsersFromTeamGroupResponse)(nil),                          // 19: com.coralogix.permissions.v1.RemoveUsersFromTeamGroupResponse
	(*RemoveUsersFromTeamGroupsRequest)(nil),                          // 20: com.coralogix.permissions.v1.RemoveUsersFromTeamGroupsRequest
	(*RemoveUsersFromTeamGroupsResponse)(nil),                         // 21: com.coralogix.permissions.v1.RemoveUsersFromTeamGroupsResponse
	(*SetTeamGroupScopeRequest)(nil),                                  // 22: com.coralogix.permissions.v1.SetTeamGroupScopeRequest
	(*SetTeamGroupScopeResponse)(nil),                                 // 23: com.coralogix.permissions.v1.SetTeamGroupScopeResponse
	(*GetTeamGroupScopeRequest)(nil),                                  // 24: com.coralogix.permissions.v1.GetTeamGroupScopeRequest
	(*GetTeamGroupScopeResponse)(nil),                                 // 25: com.coralogix.permissions.v1.GetTeamGroupScopeResponse
	(*UpdateTeamGroupRequest_RoleUpdates)(nil),                        // 26: com.coralogix.permissions.v1.UpdateTeamGroupRequest.RoleUpdates
	(*UpdateTeamGroupRequest_UserUpdates)(nil),                        // 27: com.coralogix.permissions.v1.UpdateTeamGroupRequest.UserUpdates
	(*GetGroupUsersResponse_NoMorePages)(nil),                         // 28: com.coralogix.permissions.v1.GetGroupUsersResponse.NoMorePages
	(*GetGroupUsersResponse_NextPageToken)(nil),                       // 29: com.coralogix.permissions.v1.GetGroupUsersResponse.NextPageToken
	(*AddUsersToTeamGroupsRequest_AddUsersToTeamGroup)(nil),           // 30: com.coralogix.permissions.v1.AddUsersToTeamGroupsRequest.AddUsersToTeamGroup
	(*RemoveUsersFromTeamGroupsRequest_RemoveUsersFromTeamGroup)(nil), // 31: com.coralogix.permissions.v1.RemoveUsersFromTeamGroupsRequest.RemoveUsersFromTeamGroup
	(*TeamGroupId)(nil),                                               // 32: com.coralogix.permissions.v1.TeamGroupId
	(*TeamGroup)(nil),                                                 // 33: com.coralogix.permissions.v1.TeamGroup
	(*TeamId)(nil),                                                    // 34: com.coralogix.permissions.v1.TeamId
	(*RoleId)(nil),                                                    // 35: com.coralogix.permissions.v1.RoleId
	(*UserId)(nil),                                                    // 36: com.coralogix.permissions.v1.UserId
	(*ScopeFilters)(nil),                                              // 37: com.coralogix.permissions.v1.ScopeFilters
	(*User)(nil),                                                      // 38: com.coralogix.permissions.v1.User
	(*ScopeId)(nil),                                                   // 39: com.coralogix.permissions.v1.ScopeId
	(*Scope)(nil),                                                     // 40: com.coralogix.permissions.v1.Scope
}
var file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_depIdxs = []int32{
	32, // 0: com.coralogix.permissions.v1.GetTeamGroupRequest.group_id:type_name -> com.coralogix.permissions.v1.TeamGroupId
	33, // 1: com.coralogix.permissions.v1.GetTeamGroupResponse.group:type_name -> com.coralogix.permissions.v1.TeamGroup
	33, // 2: com.coralogix.permissions.v1.GetTeamGroupByNameResponse.group:type_name -> com.coralogix.permissions.v1.TeamGroup
	34, // 3: com.coralogix.permissions.v1.GetTeamGroupsRequest.team_id:type_name -> com.coralogix.permissions.v1.TeamId
	33, // 4: com.coralogix.permissions.v1.GetTeamGroupsResponse.groups:type_name -> com.coralogix.permissions.v1.TeamGroup
	34, // 5: com.coralogix.permissions.v1.CreateTeamGroupRequest.team_id:type_name -> com.coralogix.permissions.v1.TeamId
	35, // 6: com.coralogix.permissions.v1.CreateTeamGroupRequest.role_ids:type_name -> com.coralogix.permissions.v1.RoleId
	36, // 7: com.coralogix.permissions.v1.CreateTeamGroupRequest.user_ids:type_name -> com.coralogix.permissions.v1.UserId
	37, // 8: com.coralogix.permissions.v1.CreateTeamGroupRequest.scope_filters:type_name -> com.coralogix.permissions.v1.ScopeFilters
	32, // 9: com.coralogix.permissions.v1.CreateTeamGroupResponse.group_id:type_name -> com.coralogix.permissions.v1.TeamGroupId
	32, // 10: com.coralogix.permissions.v1.UpdateTeamGroupRequest.group_id:type_name -> com.coralogix.permissions.v1.TeamGroupId
	26, // 11: com.coralogix.permissions.v1.UpdateTeamGroupRequest.role_updates:type_name -> com.coralogix.permissions.v1.UpdateTeamGroupRequest.RoleUpdates
	27, // 12: com.coralogix.permissions.v1.UpdateTeamGroupRequest.user_updates:type_name -> com.coralogix.permissions.v1.UpdateTeamGroupRequest.UserUpdates
	37, // 13: com.coralogix.permissions.v1.UpdateTeamGroupRequest.scope_filters:type_name -> com.coralogix.permissions.v1.ScopeFilters
	32, // 14: com.coralogix.permissions.v1.DeleteTeamGroupRequest.group_id:type_name -> com.coralogix.permissions.v1.TeamGroupId
	32, // 15: com.coralogix.permissions.v1.GetGroupUsersRequest.group_id:type_name -> com.coralogix.permissions.v1.TeamGroupId
	38, // 16: com.coralogix.permissions.v1.GetGroupUsersResponse.users:type_name -> com.coralogix.permissions.v1.User
	28, // 17: com.coralogix.permissions.v1.GetGroupUsersResponse.no_more_pages:type_name -> com.coralogix.permissions.v1.GetGroupUsersResponse.NoMorePages
	29, // 18: com.coralogix.permissions.v1.GetGroupUsersResponse.token:type_name -> com.coralogix.permissions.v1.GetGroupUsersResponse.NextPageToken
	32, // 19: com.coralogix.permissions.v1.AddUsersToTeamGroupRequest.group_id:type_name -> com.coralogix.permissions.v1.TeamGroupId
	36, // 20: com.coralogix.permissions.v1.AddUsersToTeamGroupRequest.user_ids:type_name -> com.coralogix.permissions.v1.UserId
	34, // 21: com.coralogix.permissions.v1.AddUsersToTeamGroupResponse.team_id:type_name -> com.coralogix.permissions.v1.TeamId
	34, // 22: com.coralogix.permissions.v1.AddUsersToTeamGroupsRequest.team_id:type_name -> com.coralogix.permissions.v1.TeamId
	30, // 23: com.coralogix.permissions.v1.AddUsersToTeamGroupsRequest.add_users_to_group:type_name -> com.coralogix.permissions.v1.AddUsersToTeamGroupsRequest.AddUsersToTeamGroup
	32, // 24: com.coralogix.permissions.v1.RemoveUsersFromTeamGroupRequest.group_id:type_name -> com.coralogix.permissions.v1.TeamGroupId
	36, // 25: com.coralogix.permissions.v1.RemoveUsersFromTeamGroupRequest.user_ids:type_name -> com.coralogix.permissions.v1.UserId
	34, // 26: com.coralogix.permissions.v1.RemoveUsersFromTeamGroupsRequest.team_id:type_name -> com.coralogix.permissions.v1.TeamId
	31, // 27: com.coralogix.permissions.v1.RemoveUsersFromTeamGroupsRequest.remove_users_from_group:type_name -> com.coralogix.permissions.v1.RemoveUsersFromTeamGroupsRequest.RemoveUsersFromTeamGroup
	32, // 28: com.coralogix.permissions.v1.SetTeamGroupScopeRequest.group_id:type_name -> com.coralogix.permissions.v1.TeamGroupId
	37, // 29: com.coralogix.permissions.v1.SetTeamGroupScopeRequest.scope_filters:type_name -> com.coralogix.permissions.v1.ScopeFilters
	39, // 30: com.coralogix.permissions.v1.SetTeamGroupScopeResponse.scope_id:type_name -> com.coralogix.permissions.v1.ScopeId
	32, // 31: com.coralogix.permissions.v1.GetTeamGroupScopeRequest.group_id:type_name -> com.coralogix.permissions.v1.TeamGroupId
	40, // 32: com.coralogix.permissions.v1.GetTeamGroupScopeResponse.scope:type_name -> com.coralogix.permissions.v1.Scope
	35, // 33: com.coralogix.permissions.v1.UpdateTeamGroupRequest.RoleUpdates.role_ids:type_name -> com.coralogix.permissions.v1.RoleId
	36, // 34: com.coralogix.permissions.v1.UpdateTeamGroupRequest.UserUpdates.user_ids:type_name -> com.coralogix.permissions.v1.UserId
	32, // 35: com.coralogix.permissions.v1.AddUsersToTeamGroupsRequest.AddUsersToTeamGroup.group_id:type_name -> com.coralogix.permissions.v1.TeamGroupId
	36, // 36: com.coralogix.permissions.v1.AddUsersToTeamGroupsRequest.AddUsersToTeamGroup.user_ids:type_name -> com.coralogix.permissions.v1.UserId
	32, // 37: com.coralogix.permissions.v1.RemoveUsersFromTeamGroupsRequest.RemoveUsersFromTeamGroup.group_id:type_name -> com.coralogix.permissions.v1.TeamGroupId
	36, // 38: com.coralogix.permissions.v1.RemoveUsersFromTeamGroupsRequest.RemoveUsersFromTeamGroup.user_ids:type_name -> com.coralogix.permissions.v1.UserId
	0,  // 39: com.coralogix.permissions.v1.TeamPermissionsMgmtService.GetTeamGroup:input_type -> com.coralogix.permissions.v1.GetTeamGroupRequest
	2,  // 40: com.coralogix.permissions.v1.TeamPermissionsMgmtService.GetTeamGroupByName:input_type -> com.coralogix.permissions.v1.GetTeamGroupByNameRequest
	4,  // 41: com.coralogix.permissions.v1.TeamPermissionsMgmtService.GetTeamGroups:input_type -> com.coralogix.permissions.v1.GetTeamGroupsRequest
	6,  // 42: com.coralogix.permissions.v1.TeamPermissionsMgmtService.CreateTeamGroup:input_type -> com.coralogix.permissions.v1.CreateTeamGroupRequest
	8,  // 43: com.coralogix.permissions.v1.TeamPermissionsMgmtService.UpdateTeamGroup:input_type -> com.coralogix.permissions.v1.UpdateTeamGroupRequest
	10, // 44: com.coralogix.permissions.v1.TeamPermissionsMgmtService.DeleteTeamGroup:input_type -> com.coralogix.permissions.v1.DeleteTeamGroupRequest
	12, // 45: com.coralogix.permissions.v1.TeamPermissionsMgmtService.GetGroupUsers:input_type -> com.coralogix.permissions.v1.GetGroupUsersRequest
	14, // 46: com.coralogix.permissions.v1.TeamPermissionsMgmtService.AddUsersToTeamGroup:input_type -> com.coralogix.permissions.v1.AddUsersToTeamGroupRequest
	16, // 47: com.coralogix.permissions.v1.TeamPermissionsMgmtService.AddUsersToTeamGroups:input_type -> com.coralogix.permissions.v1.AddUsersToTeamGroupsRequest
	18, // 48: com.coralogix.permissions.v1.TeamPermissionsMgmtService.RemoveUsersFromTeamGroup:input_type -> com.coralogix.permissions.v1.RemoveUsersFromTeamGroupRequest
	20, // 49: com.coralogix.permissions.v1.TeamPermissionsMgmtService.RemoveUsersFromTeamGroups:input_type -> com.coralogix.permissions.v1.RemoveUsersFromTeamGroupsRequest
	22, // 50: com.coralogix.permissions.v1.TeamPermissionsMgmtService.SetTeamGroupScope:input_type -> com.coralogix.permissions.v1.SetTeamGroupScopeRequest
	24, // 51: com.coralogix.permissions.v1.TeamPermissionsMgmtService.GetTeamGroupScope:input_type -> com.coralogix.permissions.v1.GetTeamGroupScopeRequest
	1,  // 52: com.coralogix.permissions.v1.TeamPermissionsMgmtService.GetTeamGroup:output_type -> com.coralogix.permissions.v1.GetTeamGroupResponse
	3,  // 53: com.coralogix.permissions.v1.TeamPermissionsMgmtService.GetTeamGroupByName:output_type -> com.coralogix.permissions.v1.GetTeamGroupByNameResponse
	5,  // 54: com.coralogix.permissions.v1.TeamPermissionsMgmtService.GetTeamGroups:output_type -> com.coralogix.permissions.v1.GetTeamGroupsResponse
	7,  // 55: com.coralogix.permissions.v1.TeamPermissionsMgmtService.CreateTeamGroup:output_type -> com.coralogix.permissions.v1.CreateTeamGroupResponse
	9,  // 56: com.coralogix.permissions.v1.TeamPermissionsMgmtService.UpdateTeamGroup:output_type -> com.coralogix.permissions.v1.UpdateTeamGroupResponse
	11, // 57: com.coralogix.permissions.v1.TeamPermissionsMgmtService.DeleteTeamGroup:output_type -> com.coralogix.permissions.v1.DeleteTeamGroupResponse
	13, // 58: com.coralogix.permissions.v1.TeamPermissionsMgmtService.GetGroupUsers:output_type -> com.coralogix.permissions.v1.GetGroupUsersResponse
	15, // 59: com.coralogix.permissions.v1.TeamPermissionsMgmtService.AddUsersToTeamGroup:output_type -> com.coralogix.permissions.v1.AddUsersToTeamGroupResponse
	17, // 60: com.coralogix.permissions.v1.TeamPermissionsMgmtService.AddUsersToTeamGroups:output_type -> com.coralogix.permissions.v1.AddUsersToTeamGroupsResponse
	19, // 61: com.coralogix.permissions.v1.TeamPermissionsMgmtService.RemoveUsersFromTeamGroup:output_type -> com.coralogix.permissions.v1.RemoveUsersFromTeamGroupResponse
	21, // 62: com.coralogix.permissions.v1.TeamPermissionsMgmtService.RemoveUsersFromTeamGroups:output_type -> com.coralogix.permissions.v1.RemoveUsersFromTeamGroupsResponse
	23, // 63: com.coralogix.permissions.v1.TeamPermissionsMgmtService.SetTeamGroupScope:output_type -> com.coralogix.permissions.v1.SetTeamGroupScopeResponse
	25, // 64: com.coralogix.permissions.v1.TeamPermissionsMgmtService.GetTeamGroupScope:output_type -> com.coralogix.permissions.v1.GetTeamGroupScopeResponse
	52, // [52:65] is the sub-list for method output_type
	39, // [39:52] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_init() }
func file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_init() {
	if File_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto != nil {
		return
	}
	file_com_coralogix_permissions_v1_common_proto_init()
	file_com_coralogix_permissions_v1_permissions_mgmt_proto_init()
	file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[12].OneofWrappers = []any{}
	file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[13].OneofWrappers = []any{
		(*GetGroupUsersResponse_NoMorePages_)(nil),
		(*GetGroupUsersResponse_Token)(nil),
	}
	file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes[25].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_goTypes,
		DependencyIndexes: file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_depIdxs,
		MessageInfos:      file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_msgTypes,
	}.Build()
	File_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto = out.File
	file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_rawDesc = nil
	file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_goTypes = nil
	file_com_coralogix_permissions_v1_team_permissions_mgmt_service_proto_depIdxs = nil
}
