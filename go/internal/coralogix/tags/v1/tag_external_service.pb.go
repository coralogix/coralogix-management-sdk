// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.26.1
// source: com/coralogix/tags/v1/tag_external_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateExternalTagRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Name          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key           *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Application   []*wrapperspb.StringValue `protobuf:"bytes,3,rep,name=application,proto3" json:"application,omitempty"`
	Subsystem     []*wrapperspb.StringValue `protobuf:"bytes,4,rep,name=subsystem,proto3" json:"subsystem,omitempty"`
	IconUrl       *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Timestamp     *timestamppb.Timestamp    `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type          Type                      `protobuf:"varint,7,opt,name=type,proto3,enum=com.coralogix.tags.v1.Type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateExternalTagRequest) Reset() {
	*x = CreateExternalTagRequest{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExternalTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExternalTagRequest) ProtoMessage() {}

func (x *CreateExternalTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExternalTagRequest.ProtoReflect.Descriptor instead.
func (*CreateExternalTagRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateExternalTagRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateExternalTagRequest) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CreateExternalTagRequest) GetApplication() []*wrapperspb.StringValue {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *CreateExternalTagRequest) GetSubsystem() []*wrapperspb.StringValue {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

func (x *CreateExternalTagRequest) GetIconUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IconUrl
	}
	return nil
}

func (x *CreateExternalTagRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CreateExternalTagRequest) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

type AddExternalTagRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Name          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key           *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Application   []*wrapperspb.StringValue `protobuf:"bytes,3,rep,name=application,proto3" json:"application,omitempty"`
	Subsystem     []*wrapperspb.StringValue `protobuf:"bytes,4,rep,name=subsystem,proto3" json:"subsystem,omitempty"`
	IconUrl       *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Timestamp     *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type          Type                      `protobuf:"varint,7,opt,name=type,proto3,enum=com.coralogix.tags.v1.Type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddExternalTagRequest) Reset() {
	*x = AddExternalTagRequest{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddExternalTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExternalTagRequest) ProtoMessage() {}

func (x *AddExternalTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExternalTagRequest.ProtoReflect.Descriptor instead.
func (*AddExternalTagRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{1}
}

func (x *AddExternalTagRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AddExternalTagRequest) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AddExternalTagRequest) GetApplication() []*wrapperspb.StringValue {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *AddExternalTagRequest) GetSubsystem() []*wrapperspb.StringValue {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

func (x *AddExternalTagRequest) GetIconUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IconUrl
	}
	return nil
}

func (x *AddExternalTagRequest) GetTimestamp() *wrapperspb.StringValue {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AddExternalTagRequest) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

type CreateBitbucketTagRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Name          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Application   []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=application,proto3" json:"application,omitempty"`
	Subsystem     []*wrapperspb.StringValue `protobuf:"bytes,3,rep,name=subsystem,proto3" json:"subsystem,omitempty"`
	Body          *structpb.Struct          `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBitbucketTagRequest) Reset() {
	*x = CreateBitbucketTagRequest{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBitbucketTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBitbucketTagRequest) ProtoMessage() {}

func (x *CreateBitbucketTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBitbucketTagRequest.ProtoReflect.Descriptor instead.
func (*CreateBitbucketTagRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBitbucketTagRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateBitbucketTagRequest) GetApplication() []*wrapperspb.StringValue {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *CreateBitbucketTagRequest) GetSubsystem() []*wrapperspb.StringValue {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

func (x *CreateBitbucketTagRequest) GetBody() *structpb.Struct {
	if x != nil {
		return x.Body
	}
	return nil
}

type CreateTfsTagRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Name          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Application   []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=application,proto3" json:"application,omitempty"`
	Subsystem     []*wrapperspb.StringValue `protobuf:"bytes,3,rep,name=subsystem,proto3" json:"subsystem,omitempty"`
	Body          *structpb.Struct          `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTfsTagRequest) Reset() {
	*x = CreateTfsTagRequest{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTfsTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTfsTagRequest) ProtoMessage() {}

func (x *CreateTfsTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTfsTagRequest.ProtoReflect.Descriptor instead.
func (*CreateTfsTagRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTfsTagRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateTfsTagRequest) GetApplication() []*wrapperspb.StringValue {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *CreateTfsTagRequest) GetSubsystem() []*wrapperspb.StringValue {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

func (x *CreateTfsTagRequest) GetBody() *structpb.Struct {
	if x != nil {
		return x.Body
	}
	return nil
}

type CreateGitlabTagRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Name          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Application   []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=application,proto3" json:"application,omitempty"`
	Subsystem     []*wrapperspb.StringValue `protobuf:"bytes,3,rep,name=subsystem,proto3" json:"subsystem,omitempty"`
	Body          *structpb.Struct          `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateGitlabTagRequest) Reset() {
	*x = CreateGitlabTagRequest{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGitlabTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGitlabTagRequest) ProtoMessage() {}

func (x *CreateGitlabTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGitlabTagRequest.ProtoReflect.Descriptor instead.
func (*CreateGitlabTagRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateGitlabTagRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateGitlabTagRequest) GetApplication() []*wrapperspb.StringValue {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *CreateGitlabTagRequest) GetSubsystem() []*wrapperspb.StringValue {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

func (x *CreateGitlabTagRequest) GetBody() *structpb.Struct {
	if x != nil {
		return x.Body
	}
	return nil
}

type CreateExternalTagResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           *Tag                   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateExternalTagResponse) Reset() {
	*x = CreateExternalTagResponse{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExternalTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExternalTagResponse) ProtoMessage() {}

func (x *CreateExternalTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExternalTagResponse.ProtoReflect.Descriptor instead.
func (*CreateExternalTagResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateExternalTagResponse) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type AddExternalTagResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           *Tag                   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddExternalTagResponse) Reset() {
	*x = AddExternalTagResponse{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddExternalTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExternalTagResponse) ProtoMessage() {}

func (x *AddExternalTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExternalTagResponse.ProtoReflect.Descriptor instead.
func (*AddExternalTagResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{6}
}

func (x *AddExternalTagResponse) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type CreateGitlabTagResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Response      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateGitlabTagResponse) Reset() {
	*x = CreateGitlabTagResponse{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGitlabTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGitlabTagResponse) ProtoMessage() {}

func (x *CreateGitlabTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGitlabTagResponse.ProtoReflect.Descriptor instead.
func (*CreateGitlabTagResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{7}
}

func (x *CreateGitlabTagResponse) GetResponse() *wrapperspb.StringValue {
	if x != nil {
		return x.Response
	}
	return nil
}

type CreateTfsTagResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Response      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTfsTagResponse) Reset() {
	*x = CreateTfsTagResponse{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTfsTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTfsTagResponse) ProtoMessage() {}

func (x *CreateTfsTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTfsTagResponse.ProtoReflect.Descriptor instead.
func (*CreateTfsTagResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTfsTagResponse) GetResponse() *wrapperspb.StringValue {
	if x != nil {
		return x.Response
	}
	return nil
}

type CreateBitbucketTagResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Response      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBitbucketTagResponse) Reset() {
	*x = CreateBitbucketTagResponse{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBitbucketTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBitbucketTagResponse) ProtoMessage() {}

func (x *CreateBitbucketTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBitbucketTagResponse.ProtoReflect.Descriptor instead.
func (*CreateBitbucketTagResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateBitbucketTagResponse) GetResponse() *wrapperspb.StringValue {
	if x != nil {
		return x.Response
	}
	return nil
}

type CreateBitbucketTagRequest_BitbucketBody struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	CommitStatus  *CreateBitbucketTagRequest_BitbucketBody_CommitStatus `protobuf:"bytes,1,opt,name=commit_status,json=commitStatus,proto3" json:"commit_status,omitempty"`
	Repository    *CreateBitbucketTagRequest_BitbucketBody_Repository   `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBitbucketTagRequest_BitbucketBody) Reset() {
	*x = CreateBitbucketTagRequest_BitbucketBody{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBitbucketTagRequest_BitbucketBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBitbucketTagRequest_BitbucketBody) ProtoMessage() {}

func (x *CreateBitbucketTagRequest_BitbucketBody) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBitbucketTagRequest_BitbucketBody.ProtoReflect.Descriptor instead.
func (*CreateBitbucketTagRequest_BitbucketBody) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CreateBitbucketTagRequest_BitbucketBody) GetCommitStatus() *CreateBitbucketTagRequest_BitbucketBody_CommitStatus {
	if x != nil {
		return x.CommitStatus
	}
	return nil
}

func (x *CreateBitbucketTagRequest_BitbucketBody) GetRepository() *CreateBitbucketTagRequest_BitbucketBody_Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

type CreateBitbucketTagRequest_BitbucketBody_CommitStatus struct {
	state         protoimpl.MessageState                                           `protogen:"open.v1"`
	State         *wrapperspb.StringValue                                          `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	UpdatedOn     *timestamppb.Timestamp                                           `protobuf:"bytes,2,opt,name=updated_on,json=updatedOn,proto3" json:"updated_on,omitempty"`
	Repository    *CreateBitbucketTagRequest_BitbucketBody_CommitStatus_Repository `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	Url           *wrapperspb.StringValue                                          `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBitbucketTagRequest_BitbucketBody_CommitStatus) Reset() {
	*x = CreateBitbucketTagRequest_BitbucketBody_CommitStatus{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBitbucketTagRequest_BitbucketBody_CommitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBitbucketTagRequest_BitbucketBody_CommitStatus) ProtoMessage() {}

func (x *CreateBitbucketTagRequest_BitbucketBody_CommitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBitbucketTagRequest_BitbucketBody_CommitStatus.ProtoReflect.Descriptor instead.
func (*CreateBitbucketTagRequest_BitbucketBody_CommitStatus) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *CreateBitbucketTagRequest_BitbucketBody_CommitStatus) GetState() *wrapperspb.StringValue {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *CreateBitbucketTagRequest_BitbucketBody_CommitStatus) GetUpdatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedOn
	}
	return nil
}

func (x *CreateBitbucketTagRequest_BitbucketBody_CommitStatus) GetRepository() *CreateBitbucketTagRequest_BitbucketBody_CommitStatus_Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *CreateBitbucketTagRequest_BitbucketBody_CommitStatus) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

type CreateBitbucketTagRequest_BitbucketBody_Repository struct {
	state         protoimpl.MessageState                                    `protogen:"open.v1"`
	Links         *CreateBitbucketTagRequest_BitbucketBody_Repository_Links `protobuf:"bytes,1,opt,name=links,proto3" json:"links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBitbucketTagRequest_BitbucketBody_Repository) Reset() {
	*x = CreateBitbucketTagRequest_BitbucketBody_Repository{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBitbucketTagRequest_BitbucketBody_Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBitbucketTagRequest_BitbucketBody_Repository) ProtoMessage() {}

func (x *CreateBitbucketTagRequest_BitbucketBody_Repository) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBitbucketTagRequest_BitbucketBody_Repository.ProtoReflect.Descriptor instead.
func (*CreateBitbucketTagRequest_BitbucketBody_Repository) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{2, 0, 1}
}

func (x *CreateBitbucketTagRequest_BitbucketBody_Repository) GetLinks() *CreateBitbucketTagRequest_BitbucketBody_Repository_Links {
	if x != nil {
		return x.Links
	}
	return nil
}

type CreateBitbucketTagRequest_BitbucketBody_CommitStatus_Repository struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	FullName      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBitbucketTagRequest_BitbucketBody_CommitStatus_Repository) Reset() {
	*x = CreateBitbucketTagRequest_BitbucketBody_CommitStatus_Repository{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBitbucketTagRequest_BitbucketBody_CommitStatus_Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBitbucketTagRequest_BitbucketBody_CommitStatus_Repository) ProtoMessage() {}

func (x *CreateBitbucketTagRequest_BitbucketBody_CommitStatus_Repository) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBitbucketTagRequest_BitbucketBody_CommitStatus_Repository.ProtoReflect.Descriptor instead.
func (*CreateBitbucketTagRequest_BitbucketBody_CommitStatus_Repository) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{2, 0, 0, 0}
}

func (x *CreateBitbucketTagRequest_BitbucketBody_CommitStatus_Repository) GetFullName() *wrapperspb.StringValue {
	if x != nil {
		return x.FullName
	}
	return nil
}

type CreateBitbucketTagRequest_BitbucketBody_Repository_Links struct {
	state         protoimpl.MessageState                                           `protogen:"open.v1"`
	Avatar        *CreateBitbucketTagRequest_BitbucketBody_Repository_Links_Avatar `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBitbucketTagRequest_BitbucketBody_Repository_Links) Reset() {
	*x = CreateBitbucketTagRequest_BitbucketBody_Repository_Links{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBitbucketTagRequest_BitbucketBody_Repository_Links) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBitbucketTagRequest_BitbucketBody_Repository_Links) ProtoMessage() {}

func (x *CreateBitbucketTagRequest_BitbucketBody_Repository_Links) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBitbucketTagRequest_BitbucketBody_Repository_Links.ProtoReflect.Descriptor instead.
func (*CreateBitbucketTagRequest_BitbucketBody_Repository_Links) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{2, 0, 1, 0}
}

func (x *CreateBitbucketTagRequest_BitbucketBody_Repository_Links) GetAvatar() *CreateBitbucketTagRequest_BitbucketBody_Repository_Links_Avatar {
	if x != nil {
		return x.Avatar
	}
	return nil
}

type CreateBitbucketTagRequest_BitbucketBody_Repository_Links_Avatar struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Href          *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBitbucketTagRequest_BitbucketBody_Repository_Links_Avatar) Reset() {
	*x = CreateBitbucketTagRequest_BitbucketBody_Repository_Links_Avatar{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBitbucketTagRequest_BitbucketBody_Repository_Links_Avatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBitbucketTagRequest_BitbucketBody_Repository_Links_Avatar) ProtoMessage() {}

func (x *CreateBitbucketTagRequest_BitbucketBody_Repository_Links_Avatar) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBitbucketTagRequest_BitbucketBody_Repository_Links_Avatar.ProtoReflect.Descriptor instead.
func (*CreateBitbucketTagRequest_BitbucketBody_Repository_Links_Avatar) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{2, 0, 1, 0, 0}
}

func (x *CreateBitbucketTagRequest_BitbucketBody_Repository_Links_Avatar) GetHref() *wrapperspb.StringValue {
	if x != nil {
		return x.Href
	}
	return nil
}

type CreateTfsTagRequest_TfsBody struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Resource      *CreateTfsTagRequest_TfsBody_Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	CreatedDate   *timestamppb.Timestamp                `protobuf:"bytes,2,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTfsTagRequest_TfsBody) Reset() {
	*x = CreateTfsTagRequest_TfsBody{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTfsTagRequest_TfsBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTfsTagRequest_TfsBody) ProtoMessage() {}

func (x *CreateTfsTagRequest_TfsBody) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTfsTagRequest_TfsBody.ProtoReflect.Descriptor instead.
func (*CreateTfsTagRequest_TfsBody) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CreateTfsTagRequest_TfsBody) GetResource() *CreateTfsTagRequest_TfsBody_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *CreateTfsTagRequest_TfsBody) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

type CreateTfsTagRequest_TfsBody_Resource struct {
	state         protoimpl.MessageState                            `protogen:"open.v1"`
	Status        *wrapperspb.StringValue                           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Environment   *CreateTfsTagRequest_TfsBody_Resource_Environment `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	FinishTime    *timestamppb.Timestamp                            `protobuf:"bytes,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	SourceBranch  *wrapperspb.StringValue                           `protobuf:"bytes,4,opt,name=source_branch,json=sourceBranch,proto3" json:"source_branch,omitempty"`
	Definition    *CreateTfsTagRequest_TfsBody_Resource_Definition  `protobuf:"bytes,5,opt,name=definition,proto3" json:"definition,omitempty"`
	Deployment    *CreateTfsTagRequest_TfsBody_Resource_Deployment  `protobuf:"bytes,6,opt,name=deployment,proto3" json:"deployment,omitempty"`
	Project       *CreateTfsTagRequest_TfsBody_Resource_Project     `protobuf:"bytes,7,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTfsTagRequest_TfsBody_Resource) Reset() {
	*x = CreateTfsTagRequest_TfsBody_Resource{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTfsTagRequest_TfsBody_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTfsTagRequest_TfsBody_Resource) ProtoMessage() {}

func (x *CreateTfsTagRequest_TfsBody_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTfsTagRequest_TfsBody_Resource.ProtoReflect.Descriptor instead.
func (*CreateTfsTagRequest_TfsBody_Resource) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *CreateTfsTagRequest_TfsBody_Resource) GetStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateTfsTagRequest_TfsBody_Resource) GetEnvironment() *CreateTfsTagRequest_TfsBody_Resource_Environment {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *CreateTfsTagRequest_TfsBody_Resource) GetFinishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishTime
	}
	return nil
}

func (x *CreateTfsTagRequest_TfsBody_Resource) GetSourceBranch() *wrapperspb.StringValue {
	if x != nil {
		return x.SourceBranch
	}
	return nil
}

func (x *CreateTfsTagRequest_TfsBody_Resource) GetDefinition() *CreateTfsTagRequest_TfsBody_Resource_Definition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *CreateTfsTagRequest_TfsBody_Resource) GetDeployment() *CreateTfsTagRequest_TfsBody_Resource_Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *CreateTfsTagRequest_TfsBody_Resource) GetProject() *CreateTfsTagRequest_TfsBody_Resource_Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type CreateTfsTagRequest_TfsBody_Resource_Project struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Name          *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Project) Reset() {
	*x = CreateTfsTagRequest_TfsBody_Resource_Project{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTfsTagRequest_TfsBody_Resource_Project) ProtoMessage() {}

func (x *CreateTfsTagRequest_TfsBody_Resource_Project) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTfsTagRequest_TfsBody_Resource_Project.ProtoReflect.Descriptor instead.
func (*CreateTfsTagRequest_TfsBody_Resource_Project) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{3, 0, 0, 0}
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Project) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type CreateTfsTagRequest_TfsBody_Resource_Environment struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Status        *wrapperspb.StringValue                       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	SourceBranch  *wrapperspb.StringValue                       `protobuf:"bytes,2,opt,name=source_branch,json=sourceBranch,proto3" json:"source_branch,omitempty"`
	Project       *CreateTfsTagRequest_TfsBody_Resource_Project `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Environment) Reset() {
	*x = CreateTfsTagRequest_TfsBody_Resource_Environment{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTfsTagRequest_TfsBody_Resource_Environment) ProtoMessage() {}

func (x *CreateTfsTagRequest_TfsBody_Resource_Environment) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTfsTagRequest_TfsBody_Resource_Environment.ProtoReflect.Descriptor instead.
func (*CreateTfsTagRequest_TfsBody_Resource_Environment) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{3, 0, 0, 1}
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Environment) GetStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Environment) GetSourceBranch() *wrapperspb.StringValue {
	if x != nil {
		return x.SourceBranch
	}
	return nil
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Environment) GetProject() *CreateTfsTagRequest_TfsBody_Resource_Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type CreateTfsTagRequest_TfsBody_Resource_Definition struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Url           *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Definition) Reset() {
	*x = CreateTfsTagRequest_TfsBody_Resource_Definition{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Definition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTfsTagRequest_TfsBody_Resource_Definition) ProtoMessage() {}

func (x *CreateTfsTagRequest_TfsBody_Resource_Definition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTfsTagRequest_TfsBody_Resource_Definition.ProtoReflect.Descriptor instead.
func (*CreateTfsTagRequest_TfsBody_Resource_Definition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{3, 0, 0, 2}
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Definition) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

type CreateTfsTagRequest_TfsBody_Resource_Deployment struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Links         *CreateTfsTagRequest_TfsBody_Resource_Deployment_Links `protobuf:"bytes,1,opt,name=links,proto3" json:"links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Deployment) Reset() {
	*x = CreateTfsTagRequest_TfsBody_Resource_Deployment{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTfsTagRequest_TfsBody_Resource_Deployment) ProtoMessage() {}

func (x *CreateTfsTagRequest_TfsBody_Resource_Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTfsTagRequest_TfsBody_Resource_Deployment.ProtoReflect.Descriptor instead.
func (*CreateTfsTagRequest_TfsBody_Resource_Deployment) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{3, 0, 0, 3}
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Deployment) GetLinks() *CreateTfsTagRequest_TfsBody_Resource_Deployment_Links {
	if x != nil {
		return x.Links
	}
	return nil
}

type CreateTfsTagRequest_TfsBody_Resource_Deployment_Links struct {
	state         protoimpl.MessageState                                     `protogen:"open.v1"`
	Web           *CreateTfsTagRequest_TfsBody_Resource_Deployment_Links_Web `protobuf:"bytes,1,opt,name=web,proto3" json:"web,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Deployment_Links) Reset() {
	*x = CreateTfsTagRequest_TfsBody_Resource_Deployment_Links{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Deployment_Links) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTfsTagRequest_TfsBody_Resource_Deployment_Links) ProtoMessage() {}

func (x *CreateTfsTagRequest_TfsBody_Resource_Deployment_Links) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTfsTagRequest_TfsBody_Resource_Deployment_Links.ProtoReflect.Descriptor instead.
func (*CreateTfsTagRequest_TfsBody_Resource_Deployment_Links) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{3, 0, 0, 3, 0}
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Deployment_Links) GetWeb() *CreateTfsTagRequest_TfsBody_Resource_Deployment_Links_Web {
	if x != nil {
		return x.Web
	}
	return nil
}

type CreateTfsTagRequest_TfsBody_Resource_Deployment_Links_Web struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Href          *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Deployment_Links_Web) Reset() {
	*x = CreateTfsTagRequest_TfsBody_Resource_Deployment_Links_Web{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Deployment_Links_Web) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTfsTagRequest_TfsBody_Resource_Deployment_Links_Web) ProtoMessage() {}

func (x *CreateTfsTagRequest_TfsBody_Resource_Deployment_Links_Web) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTfsTagRequest_TfsBody_Resource_Deployment_Links_Web.ProtoReflect.Descriptor instead.
func (*CreateTfsTagRequest_TfsBody_Resource_Deployment_Links_Web) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{3, 0, 0, 3, 0, 0}
}

func (x *CreateTfsTagRequest_TfsBody_Resource_Deployment_Links_Web) GetHref() *wrapperspb.StringValue {
	if x != nil {
		return x.Href
	}
	return nil
}

type CreateGitlabTagRequest_GitlabBody struct {
	state            protoimpl.MessageState                              `protogen:"open.v1"`
	ObjectAttributes *CreateGitlabTagRequest_GitlabBody_ObjectAttributes `protobuf:"bytes,1,opt,name=object_attributes,json=objectAttributes,proto3" json:"object_attributes,omitempty"`
	Project          *CreateGitlabTagRequest_GitlabBody_Project          `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateGitlabTagRequest_GitlabBody) Reset() {
	*x = CreateGitlabTagRequest_GitlabBody{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGitlabTagRequest_GitlabBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGitlabTagRequest_GitlabBody) ProtoMessage() {}

func (x *CreateGitlabTagRequest_GitlabBody) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGitlabTagRequest_GitlabBody.ProtoReflect.Descriptor instead.
func (*CreateGitlabTagRequest_GitlabBody) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CreateGitlabTagRequest_GitlabBody) GetObjectAttributes() *CreateGitlabTagRequest_GitlabBody_ObjectAttributes {
	if x != nil {
		return x.ObjectAttributes
	}
	return nil
}

func (x *CreateGitlabTagRequest_GitlabBody) GetProject() *CreateGitlabTagRequest_GitlabBody_Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type CreateGitlabTagRequest_GitlabBody_ObjectAttributes struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Status        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	FinishedAt    *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	Ref           *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateGitlabTagRequest_GitlabBody_ObjectAttributes) Reset() {
	*x = CreateGitlabTagRequest_GitlabBody_ObjectAttributes{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGitlabTagRequest_GitlabBody_ObjectAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGitlabTagRequest_GitlabBody_ObjectAttributes) ProtoMessage() {}

func (x *CreateGitlabTagRequest_GitlabBody_ObjectAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGitlabTagRequest_GitlabBody_ObjectAttributes.ProtoReflect.Descriptor instead.
func (*CreateGitlabTagRequest_GitlabBody_ObjectAttributes) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *CreateGitlabTagRequest_GitlabBody_ObjectAttributes) GetStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateGitlabTagRequest_GitlabBody_ObjectAttributes) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *CreateGitlabTagRequest_GitlabBody_ObjectAttributes) GetRef() *wrapperspb.StringValue {
	if x != nil {
		return x.Ref
	}
	return nil
}

type CreateGitlabTagRequest_GitlabBody_Project struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Name          *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GitHttpUrl    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=git_http_url,json=gitHttpUrl,proto3" json:"git_http_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateGitlabTagRequest_GitlabBody_Project) Reset() {
	*x = CreateGitlabTagRequest_GitlabBody_Project{}
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGitlabTagRequest_GitlabBody_Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGitlabTagRequest_GitlabBody_Project) ProtoMessage() {}

func (x *CreateGitlabTagRequest_GitlabBody_Project) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGitlabTagRequest_GitlabBody_Project.ProtoReflect.Descriptor instead.
func (*CreateGitlabTagRequest_GitlabBody_Project) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP(), []int{4, 0, 1}
}

func (x *CreateGitlabTagRequest_GitlabBody_Project) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateGitlabTagRequest_GitlabBody_Project) GetGitHttpUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.GitHttpUrl
	}
	return nil
}

var File_com_coralogix_tags_v1_tag_external_service_proto protoreflect.FileDescriptor

var file_com_coralogix_tags_v1_tag_external_service_proto_rawDesc = []byte{
	0x0a, 0x30, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x74, 0x61, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x25, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x74, 0x61, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x03, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x37, 0x0a,
	0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x69,
	0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x82, 0x09, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69,
	0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x2b, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x89, 0x07, 0x0a,
	0x0d, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x70,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x69, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0xee, 0x02, 0x0a, 0x0c,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x76, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x56, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69,
	0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x1a, 0x47, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xa9, 0x02, 0x0a,
	0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x65, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x74,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x1a, 0xb3, 0x01, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x6e, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x74, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42,
	0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x1a, 0x3a, 0x0a, 0x06,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x22, 0xee, 0x0c, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x66, 0x73, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2b,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0xfb, 0x0a, 0x0a, 0x07,
	0x54, 0x66, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x57, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x66, 0x73, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x66, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x1a,
	0xd7, 0x09, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x69, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x66, 0x73, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x66, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x66, 0x0a,
	0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x66, 0x73, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x66,
	0x73, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x66, 0x73, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x66, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74,
	0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x66, 0x73,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x66, 0x73, 0x42, 0x6f,
	0x64, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x3b, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xe5, 0x01, 0x0a, 0x0b, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x5d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x66, 0x73, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x66, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x1a, 0x3c, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a,
	0x97, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x62,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61,
	0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x66, 0x73, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x66, 0x73, 0x42, 0x6f, 0x64,
	0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x1a, 0xa4, 0x01, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x62, 0x0a, 0x03,
	0x77, 0x65, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x66, 0x73, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x66, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x03, 0x77, 0x65, 0x62,
	0x1a, 0x37, 0x0a, 0x03, 0x57, 0x65, 0x62, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x22, 0x8b, 0x06, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a,
	0x95, 0x04, 0x0a, 0x0a, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x76,
	0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x42,
	0x6f, 0x64, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x42, 0x6f, 0x64,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x1a, 0xb5, 0x01, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x72, 0x65,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x1a, 0x7b, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x67, 0x69, 0x74,
	0x48, 0x74, 0x74, 0x70, 0x55, 0x72, 0x6c, 0x22, 0x49, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x22, 0x46, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x53, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x50, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x66, 0x73, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x56, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x74, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xaa, 0x08, 0x0a, 0x13, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xb2, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0xc2, 0xb8, 0x02, 0x15,
	0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x20, 0x74, 0x61, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x12, 0xe0, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0xc2, 0xb8, 0x02, 0x1b, 0x0a, 0x19, 0x61, 0x64,
	0x64, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x74, 0x61, 0x67, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x67, 0x65, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x5a, 0x15, 0x62,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64,
	0x64, 0x54, 0x61, 0x67, 0x5a, 0x18, 0x3a, 0x01, 0x2a, 0x62, 0x03, 0x74, 0x61, 0x67, 0x22, 0x0e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x54, 0x61, 0x67, 0x12, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x12, 0x81, 0x02, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x12, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x01, 0xc2, 0xb8, 0x02, 0x1f, 0x0a, 0x1d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x62, 0x69,
	0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x74, 0x61, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x5c, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x5a, 0x2e, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x62,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x62, 0x69, 0x74, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x2a, 0x62, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0xb2, 0x01,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x66, 0x73, 0x54, 0x61, 0x67, 0x12, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74,
	0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x66, 0x73,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x66, 0x73, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0xc2, 0xb8, 0x02, 0x19, 0x0a, 0x17, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x74,
	0x66, 0x73, 0x20, 0x74, 0x61, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x62, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74,
	0x66, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x54, 0x61, 0x67, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0xc2, 0xb8, 0x02, 0x1c, 0x0a, 0x1a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x20, 0x74, 0x61, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x62, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_tags_v1_tag_external_service_proto_rawDescOnce sync.Once
	file_com_coralogix_tags_v1_tag_external_service_proto_rawDescData = file_com_coralogix_tags_v1_tag_external_service_proto_rawDesc
)

func file_com_coralogix_tags_v1_tag_external_service_proto_rawDescGZIP() []byte {
	file_com_coralogix_tags_v1_tag_external_service_proto_rawDescOnce.Do(func() {
		file_com_coralogix_tags_v1_tag_external_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_tags_v1_tag_external_service_proto_rawDescData)
	})
	return file_com_coralogix_tags_v1_tag_external_service_proto_rawDescData
}

var file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_com_coralogix_tags_v1_tag_external_service_proto_goTypes = []any{
	(*CreateExternalTagRequest)(nil),                                        // 0: com.coralogix.tags.v1.CreateExternalTagRequest
	(*AddExternalTagRequest)(nil),                                           // 1: com.coralogix.tags.v1.AddExternalTagRequest
	(*CreateBitbucketTagRequest)(nil),                                       // 2: com.coralogix.tags.v1.CreateBitbucketTagRequest
	(*CreateTfsTagRequest)(nil),                                             // 3: com.coralogix.tags.v1.CreateTfsTagRequest
	(*CreateGitlabTagRequest)(nil),                                          // 4: com.coralogix.tags.v1.CreateGitlabTagRequest
	(*CreateExternalTagResponse)(nil),                                       // 5: com.coralogix.tags.v1.CreateExternalTagResponse
	(*AddExternalTagResponse)(nil),                                          // 6: com.coralogix.tags.v1.AddExternalTagResponse
	(*CreateGitlabTagResponse)(nil),                                         // 7: com.coralogix.tags.v1.CreateGitlabTagResponse
	(*CreateTfsTagResponse)(nil),                                            // 8: com.coralogix.tags.v1.CreateTfsTagResponse
	(*CreateBitbucketTagResponse)(nil),                                      // 9: com.coralogix.tags.v1.CreateBitbucketTagResponse
	(*CreateBitbucketTagRequest_BitbucketBody)(nil),                         // 10: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody
	(*CreateBitbucketTagRequest_BitbucketBody_CommitStatus)(nil),            // 11: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.CommitStatus
	(*CreateBitbucketTagRequest_BitbucketBody_Repository)(nil),              // 12: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.Repository
	(*CreateBitbucketTagRequest_BitbucketBody_CommitStatus_Repository)(nil), // 13: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.CommitStatus.Repository
	(*CreateBitbucketTagRequest_BitbucketBody_Repository_Links)(nil),        // 14: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.Repository.Links
	(*CreateBitbucketTagRequest_BitbucketBody_Repository_Links_Avatar)(nil), // 15: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.Repository.Links.Avatar
	(*CreateTfsTagRequest_TfsBody)(nil),                                     // 16: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody
	(*CreateTfsTagRequest_TfsBody_Resource)(nil),                            // 17: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource
	(*CreateTfsTagRequest_TfsBody_Resource_Project)(nil),                    // 18: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Project
	(*CreateTfsTagRequest_TfsBody_Resource_Environment)(nil),                // 19: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Environment
	(*CreateTfsTagRequest_TfsBody_Resource_Definition)(nil),                 // 20: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Definition
	(*CreateTfsTagRequest_TfsBody_Resource_Deployment)(nil),                 // 21: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Deployment
	(*CreateTfsTagRequest_TfsBody_Resource_Deployment_Links)(nil),           // 22: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Deployment.Links
	(*CreateTfsTagRequest_TfsBody_Resource_Deployment_Links_Web)(nil),       // 23: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Deployment.Links.Web
	(*CreateGitlabTagRequest_GitlabBody)(nil),                               // 24: com.coralogix.tags.v1.CreateGitlabTagRequest.GitlabBody
	(*CreateGitlabTagRequest_GitlabBody_ObjectAttributes)(nil),              // 25: com.coralogix.tags.v1.CreateGitlabTagRequest.GitlabBody.ObjectAttributes
	(*CreateGitlabTagRequest_GitlabBody_Project)(nil),                       // 26: com.coralogix.tags.v1.CreateGitlabTagRequest.GitlabBody.Project
	(*wrapperspb.StringValue)(nil),                                          // 27: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),                                           // 28: google.protobuf.Timestamp
	(Type)(0),                                                               // 29: com.coralogix.tags.v1.Type
	(*structpb.Struct)(nil),                                                 // 30: google.protobuf.Struct
	(*Tag)(nil),                                                             // 31: com.coralogix.tags.v1.Tag
}
var file_com_coralogix_tags_v1_tag_external_service_proto_depIdxs = []int32{
	27, // 0: com.coralogix.tags.v1.CreateExternalTagRequest.name:type_name -> google.protobuf.StringValue
	27, // 1: com.coralogix.tags.v1.CreateExternalTagRequest.key:type_name -> google.protobuf.StringValue
	27, // 2: com.coralogix.tags.v1.CreateExternalTagRequest.application:type_name -> google.protobuf.StringValue
	27, // 3: com.coralogix.tags.v1.CreateExternalTagRequest.subsystem:type_name -> google.protobuf.StringValue
	27, // 4: com.coralogix.tags.v1.CreateExternalTagRequest.icon_url:type_name -> google.protobuf.StringValue
	28, // 5: com.coralogix.tags.v1.CreateExternalTagRequest.timestamp:type_name -> google.protobuf.Timestamp
	29, // 6: com.coralogix.tags.v1.CreateExternalTagRequest.type:type_name -> com.coralogix.tags.v1.Type
	27, // 7: com.coralogix.tags.v1.AddExternalTagRequest.name:type_name -> google.protobuf.StringValue
	27, // 8: com.coralogix.tags.v1.AddExternalTagRequest.key:type_name -> google.protobuf.StringValue
	27, // 9: com.coralogix.tags.v1.AddExternalTagRequest.application:type_name -> google.protobuf.StringValue
	27, // 10: com.coralogix.tags.v1.AddExternalTagRequest.subsystem:type_name -> google.protobuf.StringValue
	27, // 11: com.coralogix.tags.v1.AddExternalTagRequest.icon_url:type_name -> google.protobuf.StringValue
	27, // 12: com.coralogix.tags.v1.AddExternalTagRequest.timestamp:type_name -> google.protobuf.StringValue
	29, // 13: com.coralogix.tags.v1.AddExternalTagRequest.type:type_name -> com.coralogix.tags.v1.Type
	27, // 14: com.coralogix.tags.v1.CreateBitbucketTagRequest.name:type_name -> google.protobuf.StringValue
	27, // 15: com.coralogix.tags.v1.CreateBitbucketTagRequest.application:type_name -> google.protobuf.StringValue
	27, // 16: com.coralogix.tags.v1.CreateBitbucketTagRequest.subsystem:type_name -> google.protobuf.StringValue
	30, // 17: com.coralogix.tags.v1.CreateBitbucketTagRequest.body:type_name -> google.protobuf.Struct
	27, // 18: com.coralogix.tags.v1.CreateTfsTagRequest.name:type_name -> google.protobuf.StringValue
	27, // 19: com.coralogix.tags.v1.CreateTfsTagRequest.application:type_name -> google.protobuf.StringValue
	27, // 20: com.coralogix.tags.v1.CreateTfsTagRequest.subsystem:type_name -> google.protobuf.StringValue
	30, // 21: com.coralogix.tags.v1.CreateTfsTagRequest.body:type_name -> google.protobuf.Struct
	27, // 22: com.coralogix.tags.v1.CreateGitlabTagRequest.name:type_name -> google.protobuf.StringValue
	27, // 23: com.coralogix.tags.v1.CreateGitlabTagRequest.application:type_name -> google.protobuf.StringValue
	27, // 24: com.coralogix.tags.v1.CreateGitlabTagRequest.subsystem:type_name -> google.protobuf.StringValue
	30, // 25: com.coralogix.tags.v1.CreateGitlabTagRequest.body:type_name -> google.protobuf.Struct
	31, // 26: com.coralogix.tags.v1.CreateExternalTagResponse.tag:type_name -> com.coralogix.tags.v1.Tag
	31, // 27: com.coralogix.tags.v1.AddExternalTagResponse.tag:type_name -> com.coralogix.tags.v1.Tag
	27, // 28: com.coralogix.tags.v1.CreateGitlabTagResponse.response:type_name -> google.protobuf.StringValue
	27, // 29: com.coralogix.tags.v1.CreateTfsTagResponse.response:type_name -> google.protobuf.StringValue
	27, // 30: com.coralogix.tags.v1.CreateBitbucketTagResponse.response:type_name -> google.protobuf.StringValue
	11, // 31: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.commit_status:type_name -> com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.CommitStatus
	12, // 32: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.repository:type_name -> com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.Repository
	27, // 33: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.CommitStatus.state:type_name -> google.protobuf.StringValue
	28, // 34: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.CommitStatus.updated_on:type_name -> google.protobuf.Timestamp
	13, // 35: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.CommitStatus.repository:type_name -> com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.CommitStatus.Repository
	27, // 36: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.CommitStatus.url:type_name -> google.protobuf.StringValue
	14, // 37: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.Repository.links:type_name -> com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.Repository.Links
	27, // 38: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.CommitStatus.Repository.full_name:type_name -> google.protobuf.StringValue
	15, // 39: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.Repository.Links.avatar:type_name -> com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.Repository.Links.Avatar
	27, // 40: com.coralogix.tags.v1.CreateBitbucketTagRequest.BitbucketBody.Repository.Links.Avatar.href:type_name -> google.protobuf.StringValue
	17, // 41: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.resource:type_name -> com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource
	28, // 42: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.created_date:type_name -> google.protobuf.Timestamp
	27, // 43: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.status:type_name -> google.protobuf.StringValue
	19, // 44: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.environment:type_name -> com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Environment
	28, // 45: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.finish_time:type_name -> google.protobuf.Timestamp
	27, // 46: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.source_branch:type_name -> google.protobuf.StringValue
	20, // 47: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.definition:type_name -> com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Definition
	21, // 48: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.deployment:type_name -> com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Deployment
	18, // 49: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.project:type_name -> com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Project
	27, // 50: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Project.name:type_name -> google.protobuf.StringValue
	27, // 51: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Environment.status:type_name -> google.protobuf.StringValue
	27, // 52: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Environment.source_branch:type_name -> google.protobuf.StringValue
	18, // 53: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Environment.project:type_name -> com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Project
	27, // 54: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Definition.url:type_name -> google.protobuf.StringValue
	22, // 55: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Deployment.links:type_name -> com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Deployment.Links
	23, // 56: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Deployment.Links.web:type_name -> com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Deployment.Links.Web
	27, // 57: com.coralogix.tags.v1.CreateTfsTagRequest.TfsBody.Resource.Deployment.Links.Web.href:type_name -> google.protobuf.StringValue
	25, // 58: com.coralogix.tags.v1.CreateGitlabTagRequest.GitlabBody.object_attributes:type_name -> com.coralogix.tags.v1.CreateGitlabTagRequest.GitlabBody.ObjectAttributes
	26, // 59: com.coralogix.tags.v1.CreateGitlabTagRequest.GitlabBody.project:type_name -> com.coralogix.tags.v1.CreateGitlabTagRequest.GitlabBody.Project
	27, // 60: com.coralogix.tags.v1.CreateGitlabTagRequest.GitlabBody.ObjectAttributes.status:type_name -> google.protobuf.StringValue
	28, // 61: com.coralogix.tags.v1.CreateGitlabTagRequest.GitlabBody.ObjectAttributes.finished_at:type_name -> google.protobuf.Timestamp
	27, // 62: com.coralogix.tags.v1.CreateGitlabTagRequest.GitlabBody.ObjectAttributes.ref:type_name -> google.protobuf.StringValue
	27, // 63: com.coralogix.tags.v1.CreateGitlabTagRequest.GitlabBody.Project.name:type_name -> google.protobuf.StringValue
	27, // 64: com.coralogix.tags.v1.CreateGitlabTagRequest.GitlabBody.Project.git_http_url:type_name -> google.protobuf.StringValue
	0,  // 65: com.coralogix.tags.v1.TagsExternalService.CreateExternalTag:input_type -> com.coralogix.tags.v1.CreateExternalTagRequest
	1,  // 66: com.coralogix.tags.v1.TagsExternalService.AddExternalTag:input_type -> com.coralogix.tags.v1.AddExternalTagRequest
	2,  // 67: com.coralogix.tags.v1.TagsExternalService.CreateBitbucketTag:input_type -> com.coralogix.tags.v1.CreateBitbucketTagRequest
	3,  // 68: com.coralogix.tags.v1.TagsExternalService.CreateTfsTag:input_type -> com.coralogix.tags.v1.CreateTfsTagRequest
	4,  // 69: com.coralogix.tags.v1.TagsExternalService.CreateGitlabTag:input_type -> com.coralogix.tags.v1.CreateGitlabTagRequest
	5,  // 70: com.coralogix.tags.v1.TagsExternalService.CreateExternalTag:output_type -> com.coralogix.tags.v1.CreateExternalTagResponse
	6,  // 71: com.coralogix.tags.v1.TagsExternalService.AddExternalTag:output_type -> com.coralogix.tags.v1.AddExternalTagResponse
	9,  // 72: com.coralogix.tags.v1.TagsExternalService.CreateBitbucketTag:output_type -> com.coralogix.tags.v1.CreateBitbucketTagResponse
	8,  // 73: com.coralogix.tags.v1.TagsExternalService.CreateTfsTag:output_type -> com.coralogix.tags.v1.CreateTfsTagResponse
	7,  // 74: com.coralogix.tags.v1.TagsExternalService.CreateGitlabTag:output_type -> com.coralogix.tags.v1.CreateGitlabTagResponse
	70, // [70:75] is the sub-list for method output_type
	65, // [65:70] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_com_coralogix_tags_v1_tag_external_service_proto_init() }
func file_com_coralogix_tags_v1_tag_external_service_proto_init() {
	if File_com_coralogix_tags_v1_tag_external_service_proto != nil {
		return
	}
	file_com_coralogix_tags_v1_tag_proto_init()
	file_com_coralogix_tags_v1_tag_type_proto_init()
	file_com_coralogix_tags_v1_audit_log_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_tags_v1_tag_external_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogix_tags_v1_tag_external_service_proto_goTypes,
		DependencyIndexes: file_com_coralogix_tags_v1_tag_external_service_proto_depIdxs,
		MessageInfos:      file_com_coralogix_tags_v1_tag_external_service_proto_msgTypes,
	}.Build()
	File_com_coralogix_tags_v1_tag_external_service_proto = out.File
	file_com_coralogix_tags_v1_tag_external_service_proto_rawDesc = nil
	file_com_coralogix_tags_v1_tag_external_service_proto_goTypes = nil
	file_com_coralogix_tags_v1_tag_external_service_proto_depIdxs = nil
}
