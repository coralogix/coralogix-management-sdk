// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: com/coralogix/tags/v1/tag_service.proto

package v1

import (
	_ "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateTagRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Key           *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name          *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CompanyId     *wrapperspb.UInt32Value   `protobuf:"bytes,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	IconUrl       *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Timestamp     *timestamppb.Timestamp    `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Application   []*wrapperspb.StringValue `protobuf:"bytes,8,rep,name=application,proto3" json:"application,omitempty"`
	Subsystem     []*wrapperspb.StringValue `protobuf:"bytes,9,rep,name=subsystem,proto3" json:"subsystem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTagRequest) Reset() {
	*x = CreateTagRequest{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagRequest) ProtoMessage() {}

func (x *CreateTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagRequest.ProtoReflect.Descriptor instead.
func (*CreateTagRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTagRequest) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CreateTagRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateTagRequest) GetCompanyId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.CompanyId
	}
	return nil
}

func (x *CreateTagRequest) GetIconUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.IconUrl
	}
	return nil
}

func (x *CreateTagRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CreateTagRequest) GetApplication() []*wrapperspb.StringValue {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *CreateTagRequest) GetSubsystem() []*wrapperspb.StringValue {
	if x != nil {
		return x.Subsystem
	}
	return nil
}

type GetTagsRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	QueryDef      *GetTagsRequest_QueryDef `protobuf:"bytes,1,opt,name=query_def,json=queryDef,proto3" json:"query_def,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagsRequest) Reset() {
	*x = GetTagsRequest{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagsRequest) ProtoMessage() {}

func (x *GetTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagsRequest.ProtoReflect.Descriptor instead.
func (*GetTagsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetTagsRequest) GetQueryDef() *GetTagsRequest_QueryDef {
	if x != nil {
		return x.QueryDef
	}
	return nil
}

type UpdateTagRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           *Tag                   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTagRequest) Reset() {
	*x = UpdateTagRequest{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagRequest) ProtoMessage() {}

func (x *UpdateTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagRequest.ProtoReflect.Descriptor instead.
func (*UpdateTagRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateTagRequest) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type Query struct {
	state           protoimpl.MessageState    `protogen:"open.v1"`
	ApplicationName []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	EndTime         *timestamppb.Timestamp    `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	StartTime       *timestamppb.Timestamp    `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	SubsystemName   []*wrapperspb.StringValue `protobuf:"bytes,4,rep,name=subsystem_name,json=subsystemName,proto3" json:"subsystem_name,omitempty"`
	Step            *wrapperspb.Int64Value    `protobuf:"bytes,5,opt,name=step,proto3" json:"step,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{3}
}

func (x *Query) GetApplicationName() []*wrapperspb.StringValue {
	if x != nil {
		return x.ApplicationName
	}
	return nil
}

func (x *Query) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Query) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Query) GetSubsystemName() []*wrapperspb.StringValue {
	if x != nil {
		return x.SubsystemName
	}
	return nil
}

func (x *Query) GetStep() *wrapperspb.Int64Value {
	if x != nil {
		return x.Step
	}
	return nil
}

type DeleteTagRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Id            *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTagRequest) Reset() {
	*x = DeleteTagRequest{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagRequest) ProtoMessage() {}

func (x *DeleteTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagRequest.ProtoReflect.Descriptor instead.
func (*DeleteTagRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteTagRequest) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetTagSummaryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CompareTag    *Query                 `protobuf:"bytes,1,opt,name=compare_tag,json=compareTag,proto3" json:"compare_tag,omitempty"`
	Tag           *Query                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagSummaryRequest) Reset() {
	*x = GetTagSummaryRequest{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagSummaryRequest) ProtoMessage() {}

func (x *GetTagSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetTagSummaryRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetTagSummaryRequest) GetCompareTag() *Query {
	if x != nil {
		return x.CompareTag
	}
	return nil
}

func (x *GetTagSummaryRequest) GetTag() *Query {
	if x != nil {
		return x.Tag
	}
	return nil
}

type GetTagAlertsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CompareTag    *Query                 `protobuf:"bytes,1,opt,name=compare_tag,json=compareTag,proto3" json:"compare_tag,omitempty"`
	Tag           *Query                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagAlertsRequest) Reset() {
	*x = GetTagAlertsRequest{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagAlertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagAlertsRequest) ProtoMessage() {}

func (x *GetTagAlertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagAlertsRequest.ProtoReflect.Descriptor instead.
func (*GetTagAlertsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetTagAlertsRequest) GetCompareTag() *Query {
	if x != nil {
		return x.CompareTag
	}
	return nil
}

func (x *GetTagAlertsRequest) GetTag() *Query {
	if x != nil {
		return x.Tag
	}
	return nil
}

type GetTagErrorVolumeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CompareTag    *Query                 `protobuf:"bytes,1,opt,name=compare_tag,json=compareTag,proto3" json:"compare_tag,omitempty"`
	Tag           *Query                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagErrorVolumeRequest) Reset() {
	*x = GetTagErrorVolumeRequest{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagErrorVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagErrorVolumeRequest) ProtoMessage() {}

func (x *GetTagErrorVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagErrorVolumeRequest.ProtoReflect.Descriptor instead.
func (*GetTagErrorVolumeRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetTagErrorVolumeRequest) GetCompareTag() *Query {
	if x != nil {
		return x.CompareTag
	}
	return nil
}

func (x *GetTagErrorVolumeRequest) GetTag() *Query {
	if x != nil {
		return x.Tag
	}
	return nil
}

type CreateTagResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           *Tag                   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTagResponse) Reset() {
	*x = CreateTagResponse{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagResponse) ProtoMessage() {}

func (x *CreateTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagResponse.ProtoReflect.Descriptor instead.
func (*CreateTagResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTagResponse) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type GetTagsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*Tag                 `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagsResponse) Reset() {
	*x = GetTagsResponse{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagsResponse) ProtoMessage() {}

func (x *GetTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagsResponse.ProtoReflect.Descriptor instead.
func (*GetTagsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetTagsResponse) GetData() []*Tag {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateTagResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           *Tag                   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTagResponse) Reset() {
	*x = UpdateTagResponse{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagResponse) ProtoMessage() {}

func (x *UpdateTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagResponse.ProtoReflect.Descriptor instead.
func (*UpdateTagResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateTagResponse) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type DeleteTagResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Response      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTagResponse) Reset() {
	*x = DeleteTagResponse{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagResponse) ProtoMessage() {}

func (x *DeleteTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagResponse.ProtoReflect.Descriptor instead.
func (*DeleteTagResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteTagResponse) GetResponse() *wrapperspb.StringValue {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetTagSummaryResponse struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Data          []*GetTagSummaryResponse_Summary `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagSummaryResponse) Reset() {
	*x = GetTagSummaryResponse{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagSummaryResponse) ProtoMessage() {}

func (x *GetTagSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetTagSummaryResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetTagSummaryResponse) GetData() []*GetTagSummaryResponse_Summary {
	if x != nil {
		return x.Data
	}
	return nil
}

type GraphPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value         *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphPoint) Reset() {
	*x = GraphPoint{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphPoint) ProtoMessage() {}

func (x *GraphPoint) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphPoint.ProtoReflect.Descriptor instead.
func (*GraphPoint) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{13}
}

func (x *GraphPoint) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GraphPoint) GetValue() *wrapperspb.Int32Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type GetTagAlertsResponse struct {
	state              protoimpl.MessageState                   `protogen:"open.v1"`
	AlertsListInfo     []*GetTagAlertsResponse_AlertInfo        `protobuf:"bytes,1,rep,name=alerts_list_info,json=alertsListInfo,proto3" json:"alerts_list_info,omitempty"`
	SeverityInfo       []*GetTagAlertsResponse_SeverityInfo     `protobuf:"bytes,2,rep,name=severity_info,json=severityInfo,proto3" json:"severity_info,omitempty"`
	VolumeCompareGraph *GetTagAlertsResponse_VolumeCompareGraph `protobuf:"bytes,3,opt,name=volume_compare_graph,json=volumeCompareGraph,proto3" json:"volume_compare_graph,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetTagAlertsResponse) Reset() {
	*x = GetTagAlertsResponse{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagAlertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagAlertsResponse) ProtoMessage() {}

func (x *GetTagAlertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagAlertsResponse.ProtoReflect.Descriptor instead.
func (*GetTagAlertsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetTagAlertsResponse) GetAlertsListInfo() []*GetTagAlertsResponse_AlertInfo {
	if x != nil {
		return x.AlertsListInfo
	}
	return nil
}

func (x *GetTagAlertsResponse) GetSeverityInfo() []*GetTagAlertsResponse_SeverityInfo {
	if x != nil {
		return x.SeverityInfo
	}
	return nil
}

func (x *GetTagAlertsResponse) GetVolumeCompareGraph() *GetTagAlertsResponse_VolumeCompareGraph {
	if x != nil {
		return x.VolumeCompareGraph
	}
	return nil
}

type GetTagErrorVolumeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CompareTag    []*GraphPoint          `protobuf:"bytes,1,rep,name=compare_tag,json=compareTag,proto3" json:"compare_tag,omitempty"`
	Tag           []*GraphPoint          `protobuf:"bytes,2,rep,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagErrorVolumeResponse) Reset() {
	*x = GetTagErrorVolumeResponse{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagErrorVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagErrorVolumeResponse) ProtoMessage() {}

func (x *GetTagErrorVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagErrorVolumeResponse.ProtoReflect.Descriptor instead.
func (*GetTagErrorVolumeResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetTagErrorVolumeResponse) GetCompareTag() []*GraphPoint {
	if x != nil {
		return x.CompareTag
	}
	return nil
}

func (x *GetTagErrorVolumeResponse) GetTag() []*GraphPoint {
	if x != nil {
		return x.Tag
	}
	return nil
}

type GetTagsRequest_QueryDef struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	StartDate     *timestamppb.Timestamp               `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       *timestamppb.Timestamp               `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	PageIndex     *wrapperspb.UInt32Value              `protobuf:"bytes,3,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	PageSize      *wrapperspb.UInt32Value              `protobuf:"bytes,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	QueryParams   *GetTagsRequest_QueryDef_QueryParams `protobuf:"bytes,6,opt,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagsRequest_QueryDef) Reset() {
	*x = GetTagsRequest_QueryDef{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagsRequest_QueryDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagsRequest_QueryDef) ProtoMessage() {}

func (x *GetTagsRequest_QueryDef) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagsRequest_QueryDef.ProtoReflect.Descriptor instead.
func (*GetTagsRequest_QueryDef) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetTagsRequest_QueryDef) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GetTagsRequest_QueryDef) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *GetTagsRequest_QueryDef) GetPageIndex() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PageIndex
	}
	return nil
}

func (x *GetTagsRequest_QueryDef) GetPageSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PageSize
	}
	return nil
}

func (x *GetTagsRequest_QueryDef) GetQueryParams() *GetTagsRequest_QueryDef_QueryParams {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

type GetTagsRequest_QueryDef_QueryParams struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Metadata      *GetTagsRequest_QueryDef_QueryParams_Metadata    `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SortModel     []*GetTagsRequest_QueryDef_QueryParams_SortModel `protobuf:"bytes,2,rep,name=sort_model,json=sortModel,proto3" json:"sort_model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagsRequest_QueryDef_QueryParams) Reset() {
	*x = GetTagsRequest_QueryDef_QueryParams{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagsRequest_QueryDef_QueryParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagsRequest_QueryDef_QueryParams) ProtoMessage() {}

func (x *GetTagsRequest_QueryDef_QueryParams) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagsRequest_QueryDef_QueryParams.ProtoReflect.Descriptor instead.
func (*GetTagsRequest_QueryDef_QueryParams) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *GetTagsRequest_QueryDef_QueryParams) GetMetadata() *GetTagsRequest_QueryDef_QueryParams_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetTagsRequest_QueryDef_QueryParams) GetSortModel() []*GetTagsRequest_QueryDef_QueryParams_SortModel {
	if x != nil {
		return x.SortModel
	}
	return nil
}

type GetTagsRequest_QueryDef_QueryParams_Metadata struct {
	state           protoimpl.MessageState    `protogen:"open.v1"`
	ApplicationName []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	SubsystemName   []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=subsystem_name,json=subsystemName,proto3" json:"subsystem_name,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetTagsRequest_QueryDef_QueryParams_Metadata) Reset() {
	*x = GetTagsRequest_QueryDef_QueryParams_Metadata{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagsRequest_QueryDef_QueryParams_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagsRequest_QueryDef_QueryParams_Metadata) ProtoMessage() {}

func (x *GetTagsRequest_QueryDef_QueryParams_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagsRequest_QueryDef_QueryParams_Metadata.ProtoReflect.Descriptor instead.
func (*GetTagsRequest_QueryDef_QueryParams_Metadata) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{1, 0, 0, 0}
}

func (x *GetTagsRequest_QueryDef_QueryParams_Metadata) GetApplicationName() []*wrapperspb.StringValue {
	if x != nil {
		return x.ApplicationName
	}
	return nil
}

func (x *GetTagsRequest_QueryDef_QueryParams_Metadata) GetSubsystemName() []*wrapperspb.StringValue {
	if x != nil {
		return x.SubsystemName
	}
	return nil
}

type GetTagsRequest_QueryDef_QueryParams_SortModel struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Field         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Ordering      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=ordering,proto3" json:"ordering,omitempty"`
	Missing       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=missing,proto3" json:"missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagsRequest_QueryDef_QueryParams_SortModel) Reset() {
	*x = GetTagsRequest_QueryDef_QueryParams_SortModel{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagsRequest_QueryDef_QueryParams_SortModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagsRequest_QueryDef_QueryParams_SortModel) ProtoMessage() {}

func (x *GetTagsRequest_QueryDef_QueryParams_SortModel) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagsRequest_QueryDef_QueryParams_SortModel.ProtoReflect.Descriptor instead.
func (*GetTagsRequest_QueryDef_QueryParams_SortModel) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{1, 0, 0, 1}
}

func (x *GetTagsRequest_QueryDef_QueryParams_SortModel) GetField() *wrapperspb.StringValue {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *GetTagsRequest_QueryDef_QueryParams_SortModel) GetOrdering() *wrapperspb.StringValue {
	if x != nil {
		return x.Ordering
	}
	return nil
}

func (x *GetTagsRequest_QueryDef_QueryParams_SortModel) GetMissing() *wrapperspb.StringValue {
	if x != nil {
		return x.Missing
	}
	return nil
}

type GetTagSummaryResponse_Summary struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	TagResult     *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=tag_result,json=tagResult,proto3" json:"tag_result,omitempty"`
	CompareResult *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=compare_result,json=compareResult,proto3" json:"compare_result,omitempty"`
	LinkCacheId   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=link_cache_id,json=linkCacheId,proto3" json:"link_cache_id,omitempty"`
	Type          *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagSummaryResponse_Summary) Reset() {
	*x = GetTagSummaryResponse_Summary{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagSummaryResponse_Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagSummaryResponse_Summary) ProtoMessage() {}

func (x *GetTagSummaryResponse_Summary) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagSummaryResponse_Summary.ProtoReflect.Descriptor instead.
func (*GetTagSummaryResponse_Summary) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{12, 0}
}

func (x *GetTagSummaryResponse_Summary) GetTagResult() *wrapperspb.DoubleValue {
	if x != nil {
		return x.TagResult
	}
	return nil
}

func (x *GetTagSummaryResponse_Summary) GetCompareResult() *wrapperspb.DoubleValue {
	if x != nil {
		return x.CompareResult
	}
	return nil
}

func (x *GetTagSummaryResponse_Summary) GetLinkCacheId() *wrapperspb.StringValue {
	if x != nil {
		return x.LinkCacheId
	}
	return nil
}

func (x *GetTagSummaryResponse_Summary) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

type GetTagAlertsResponse_AlertInfo struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Name          *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Severity      *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	Size          *wrapperspb.Int32Value  `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagAlertsResponse_AlertInfo) Reset() {
	*x = GetTagAlertsResponse_AlertInfo{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagAlertsResponse_AlertInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagAlertsResponse_AlertInfo) ProtoMessage() {}

func (x *GetTagAlertsResponse_AlertInfo) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagAlertsResponse_AlertInfo.ProtoReflect.Descriptor instead.
func (*GetTagAlertsResponse_AlertInfo) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GetTagAlertsResponse_AlertInfo) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *GetTagAlertsResponse_AlertInfo) GetSeverity() *wrapperspb.Int32Value {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *GetTagAlertsResponse_AlertInfo) GetSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.Size
	}
	return nil
}

type GetTagAlertsResponse_SeverityInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Severity      *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=severity,proto3" json:"severity,omitempty"`
	Size          *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagAlertsResponse_SeverityInfo) Reset() {
	*x = GetTagAlertsResponse_SeverityInfo{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagAlertsResponse_SeverityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagAlertsResponse_SeverityInfo) ProtoMessage() {}

func (x *GetTagAlertsResponse_SeverityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagAlertsResponse_SeverityInfo.ProtoReflect.Descriptor instead.
func (*GetTagAlertsResponse_SeverityInfo) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{14, 1}
}

func (x *GetTagAlertsResponse_SeverityInfo) GetSeverity() *wrapperspb.Int32Value {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *GetTagAlertsResponse_SeverityInfo) GetSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.Size
	}
	return nil
}

type GetTagAlertsResponse_VolumeCompareGraph struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CompareTag    []*GraphPoint          `protobuf:"bytes,1,rep,name=compare_tag,json=compareTag,proto3" json:"compare_tag,omitempty"`
	Tag           []*GraphPoint          `protobuf:"bytes,2,rep,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagAlertsResponse_VolumeCompareGraph) Reset() {
	*x = GetTagAlertsResponse_VolumeCompareGraph{}
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagAlertsResponse_VolumeCompareGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagAlertsResponse_VolumeCompareGraph) ProtoMessage() {}

func (x *GetTagAlertsResponse_VolumeCompareGraph) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_tags_v1_tag_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagAlertsResponse_VolumeCompareGraph.ProtoReflect.Descriptor instead.
func (*GetTagAlertsResponse_VolumeCompareGraph) Descriptor() ([]byte, []int) {
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP(), []int{14, 2}
}

func (x *GetTagAlertsResponse_VolumeCompareGraph) GetCompareTag() []*GraphPoint {
	if x != nil {
		return x.CompareTag
	}
	return nil
}

func (x *GetTagAlertsResponse_VolumeCompareGraph) GetTag() []*GraphPoint {
	if x != nil {
		return x.Tag
	}
	return nil
}

var File_com_coralogix_tags_v1_tag_service_proto protoreflect.FileDescriptor

var file_com_coralogix_tags_v1_tag_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x74, 0x61, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x74, 0x61, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x27, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x03, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0xd8,
	0x07, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x65, 0x66, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x1a, 0xf8,
	0x06, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0xa2, 0x04, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x63, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x09, 0x73, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x98, 0x01, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xb1, 0x01, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x40, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xb8, 0x02, 0x0a, 0x05,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0x40, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x67,
	0x12, 0x2e, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61,
	0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x22, 0x84, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61,
	0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x54, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x22, 0x41, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x41, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x4d, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0xff, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x74,
	0x61, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74,
	0x61, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x79, 0x0a, 0x0a, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfc, 0x05, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61,
	0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x70, 0x0a, 0x14, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x52, 0x12, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x1a, 0xa7, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x2f, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x1a, 0x78, 0x0a, 0x0c, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x8d, 0x01, 0x0a, 0x12,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x54, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74,
	0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x67, 0x12, 0x33, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x32, 0xc4, 0x08, 0x0a, 0x0b, 0x54, 0x61, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2e, 0xc2, 0xb8, 0x02, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x74, 0x61, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x62, 0x03,
	0x74, 0x61, 0x67, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64,
	0x74, 0x61, 0x67, 0x12, 0x7e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74,
	0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0xc2,
	0xb8, 0x02, 0x0a, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x20, 0x74, 0x61, 0x67, 0x73, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x61, 0x67, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0xc2, 0xb8, 0x02, 0x0c, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x20, 0x74, 0x61, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x03, 0x74, 0x61,
	0x67, 0x62, 0x03, 0x74, 0x61, 0x67, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x64, 0x69, 0x74, 0x74, 0x61, 0x67, 0x12, 0x98, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74,
	0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0xc2, 0xb8, 0x02, 0x0c, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x74, 0x61, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x62, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x16, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x61, 0x67, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x9f, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x33, 0xc2, 0xb8, 0x02, 0x11, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x20, 0x74, 0x61, 0x67, 0x20, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22,
	0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x2f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31,
	0xc2, 0xb8, 0x02, 0x10, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x20, 0x74, 0x61, 0x67, 0x20, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x12, 0xb5, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0xc2, 0xb8, 0x02, 0x16,
	0x0a, 0x14, 0x67, 0x65, 0x74, 0x20, 0x74, 0x61, 0x67, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22,
	0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x2f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_com_coralogix_tags_v1_tag_service_proto_rawDescOnce sync.Once
	file_com_coralogix_tags_v1_tag_service_proto_rawDescData = file_com_coralogix_tags_v1_tag_service_proto_rawDesc
)

func file_com_coralogix_tags_v1_tag_service_proto_rawDescGZIP() []byte {
	file_com_coralogix_tags_v1_tag_service_proto_rawDescOnce.Do(func() {
		file_com_coralogix_tags_v1_tag_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_tags_v1_tag_service_proto_rawDescData)
	})
	return file_com_coralogix_tags_v1_tag_service_proto_rawDescData
}

var file_com_coralogix_tags_v1_tag_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_com_coralogix_tags_v1_tag_service_proto_goTypes = []any{
	(*CreateTagRequest)(nil),                              // 0: com.coralogix.tags.v1.CreateTagRequest
	(*GetTagsRequest)(nil),                                // 1: com.coralogix.tags.v1.GetTagsRequest
	(*UpdateTagRequest)(nil),                              // 2: com.coralogix.tags.v1.UpdateTagRequest
	(*Query)(nil),                                         // 3: com.coralogix.tags.v1.Query
	(*DeleteTagRequest)(nil),                              // 4: com.coralogix.tags.v1.DeleteTagRequest
	(*GetTagSummaryRequest)(nil),                          // 5: com.coralogix.tags.v1.GetTagSummaryRequest
	(*GetTagAlertsRequest)(nil),                           // 6: com.coralogix.tags.v1.GetTagAlertsRequest
	(*GetTagErrorVolumeRequest)(nil),                      // 7: com.coralogix.tags.v1.GetTagErrorVolumeRequest
	(*CreateTagResponse)(nil),                             // 8: com.coralogix.tags.v1.CreateTagResponse
	(*GetTagsResponse)(nil),                               // 9: com.coralogix.tags.v1.GetTagsResponse
	(*UpdateTagResponse)(nil),                             // 10: com.coralogix.tags.v1.UpdateTagResponse
	(*DeleteTagResponse)(nil),                             // 11: com.coralogix.tags.v1.DeleteTagResponse
	(*GetTagSummaryResponse)(nil),                         // 12: com.coralogix.tags.v1.GetTagSummaryResponse
	(*GraphPoint)(nil),                                    // 13: com.coralogix.tags.v1.GraphPoint
	(*GetTagAlertsResponse)(nil),                          // 14: com.coralogix.tags.v1.GetTagAlertsResponse
	(*GetTagErrorVolumeResponse)(nil),                     // 15: com.coralogix.tags.v1.GetTagErrorVolumeResponse
	(*GetTagsRequest_QueryDef)(nil),                       // 16: com.coralogix.tags.v1.GetTagsRequest.QueryDef
	(*GetTagsRequest_QueryDef_QueryParams)(nil),           // 17: com.coralogix.tags.v1.GetTagsRequest.QueryDef.QueryParams
	(*GetTagsRequest_QueryDef_QueryParams_Metadata)(nil),  // 18: com.coralogix.tags.v1.GetTagsRequest.QueryDef.QueryParams.Metadata
	(*GetTagsRequest_QueryDef_QueryParams_SortModel)(nil), // 19: com.coralogix.tags.v1.GetTagsRequest.QueryDef.QueryParams.SortModel
	(*GetTagSummaryResponse_Summary)(nil),                 // 20: com.coralogix.tags.v1.GetTagSummaryResponse.Summary
	(*GetTagAlertsResponse_AlertInfo)(nil),                // 21: com.coralogix.tags.v1.GetTagAlertsResponse.AlertInfo
	(*GetTagAlertsResponse_SeverityInfo)(nil),             // 22: com.coralogix.tags.v1.GetTagAlertsResponse.SeverityInfo
	(*GetTagAlertsResponse_VolumeCompareGraph)(nil),       // 23: com.coralogix.tags.v1.GetTagAlertsResponse.VolumeCompareGraph
	(*wrapperspb.StringValue)(nil),                        // 24: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),                        // 25: google.protobuf.UInt32Value
	(*timestamppb.Timestamp)(nil),                         // 26: google.protobuf.Timestamp
	(*Tag)(nil),                                           // 27: com.coralogix.tags.v1.Tag
	(*wrapperspb.Int64Value)(nil),                         // 28: google.protobuf.Int64Value
	(*wrapperspb.UInt64Value)(nil),                        // 29: google.protobuf.UInt64Value
	(*wrapperspb.Int32Value)(nil),                         // 30: google.protobuf.Int32Value
	(*wrapperspb.DoubleValue)(nil),                        // 31: google.protobuf.DoubleValue
}
var file_com_coralogix_tags_v1_tag_service_proto_depIdxs = []int32{
	24, // 0: com.coralogix.tags.v1.CreateTagRequest.key:type_name -> google.protobuf.StringValue
	24, // 1: com.coralogix.tags.v1.CreateTagRequest.name:type_name -> google.protobuf.StringValue
	25, // 2: com.coralogix.tags.v1.CreateTagRequest.company_id:type_name -> google.protobuf.UInt32Value
	24, // 3: com.coralogix.tags.v1.CreateTagRequest.icon_url:type_name -> google.protobuf.StringValue
	26, // 4: com.coralogix.tags.v1.CreateTagRequest.timestamp:type_name -> google.protobuf.Timestamp
	24, // 5: com.coralogix.tags.v1.CreateTagRequest.application:type_name -> google.protobuf.StringValue
	24, // 6: com.coralogix.tags.v1.CreateTagRequest.subsystem:type_name -> google.protobuf.StringValue
	16, // 7: com.coralogix.tags.v1.GetTagsRequest.query_def:type_name -> com.coralogix.tags.v1.GetTagsRequest.QueryDef
	27, // 8: com.coralogix.tags.v1.UpdateTagRequest.tag:type_name -> com.coralogix.tags.v1.Tag
	24, // 9: com.coralogix.tags.v1.Query.application_name:type_name -> google.protobuf.StringValue
	26, // 10: com.coralogix.tags.v1.Query.end_time:type_name -> google.protobuf.Timestamp
	26, // 11: com.coralogix.tags.v1.Query.start_time:type_name -> google.protobuf.Timestamp
	24, // 12: com.coralogix.tags.v1.Query.subsystem_name:type_name -> google.protobuf.StringValue
	28, // 13: com.coralogix.tags.v1.Query.step:type_name -> google.protobuf.Int64Value
	29, // 14: com.coralogix.tags.v1.DeleteTagRequest.id:type_name -> google.protobuf.UInt64Value
	3,  // 15: com.coralogix.tags.v1.GetTagSummaryRequest.compare_tag:type_name -> com.coralogix.tags.v1.Query
	3,  // 16: com.coralogix.tags.v1.GetTagSummaryRequest.tag:type_name -> com.coralogix.tags.v1.Query
	3,  // 17: com.coralogix.tags.v1.GetTagAlertsRequest.compare_tag:type_name -> com.coralogix.tags.v1.Query
	3,  // 18: com.coralogix.tags.v1.GetTagAlertsRequest.tag:type_name -> com.coralogix.tags.v1.Query
	3,  // 19: com.coralogix.tags.v1.GetTagErrorVolumeRequest.compare_tag:type_name -> com.coralogix.tags.v1.Query
	3,  // 20: com.coralogix.tags.v1.GetTagErrorVolumeRequest.tag:type_name -> com.coralogix.tags.v1.Query
	27, // 21: com.coralogix.tags.v1.CreateTagResponse.tag:type_name -> com.coralogix.tags.v1.Tag
	27, // 22: com.coralogix.tags.v1.GetTagsResponse.data:type_name -> com.coralogix.tags.v1.Tag
	27, // 23: com.coralogix.tags.v1.UpdateTagResponse.tag:type_name -> com.coralogix.tags.v1.Tag
	24, // 24: com.coralogix.tags.v1.DeleteTagResponse.response:type_name -> google.protobuf.StringValue
	20, // 25: com.coralogix.tags.v1.GetTagSummaryResponse.data:type_name -> com.coralogix.tags.v1.GetTagSummaryResponse.Summary
	26, // 26: com.coralogix.tags.v1.GraphPoint.timestamp:type_name -> google.protobuf.Timestamp
	30, // 27: com.coralogix.tags.v1.GraphPoint.value:type_name -> google.protobuf.Int32Value
	21, // 28: com.coralogix.tags.v1.GetTagAlertsResponse.alerts_list_info:type_name -> com.coralogix.tags.v1.GetTagAlertsResponse.AlertInfo
	22, // 29: com.coralogix.tags.v1.GetTagAlertsResponse.severity_info:type_name -> com.coralogix.tags.v1.GetTagAlertsResponse.SeverityInfo
	23, // 30: com.coralogix.tags.v1.GetTagAlertsResponse.volume_compare_graph:type_name -> com.coralogix.tags.v1.GetTagAlertsResponse.VolumeCompareGraph
	13, // 31: com.coralogix.tags.v1.GetTagErrorVolumeResponse.compare_tag:type_name -> com.coralogix.tags.v1.GraphPoint
	13, // 32: com.coralogix.tags.v1.GetTagErrorVolumeResponse.tag:type_name -> com.coralogix.tags.v1.GraphPoint
	26, // 33: com.coralogix.tags.v1.GetTagsRequest.QueryDef.start_date:type_name -> google.protobuf.Timestamp
	26, // 34: com.coralogix.tags.v1.GetTagsRequest.QueryDef.end_date:type_name -> google.protobuf.Timestamp
	25, // 35: com.coralogix.tags.v1.GetTagsRequest.QueryDef.page_index:type_name -> google.protobuf.UInt32Value
	25, // 36: com.coralogix.tags.v1.GetTagsRequest.QueryDef.page_size:type_name -> google.protobuf.UInt32Value
	17, // 37: com.coralogix.tags.v1.GetTagsRequest.QueryDef.query_params:type_name -> com.coralogix.tags.v1.GetTagsRequest.QueryDef.QueryParams
	18, // 38: com.coralogix.tags.v1.GetTagsRequest.QueryDef.QueryParams.metadata:type_name -> com.coralogix.tags.v1.GetTagsRequest.QueryDef.QueryParams.Metadata
	19, // 39: com.coralogix.tags.v1.GetTagsRequest.QueryDef.QueryParams.sort_model:type_name -> com.coralogix.tags.v1.GetTagsRequest.QueryDef.QueryParams.SortModel
	24, // 40: com.coralogix.tags.v1.GetTagsRequest.QueryDef.QueryParams.Metadata.application_name:type_name -> google.protobuf.StringValue
	24, // 41: com.coralogix.tags.v1.GetTagsRequest.QueryDef.QueryParams.Metadata.subsystem_name:type_name -> google.protobuf.StringValue
	24, // 42: com.coralogix.tags.v1.GetTagsRequest.QueryDef.QueryParams.SortModel.field:type_name -> google.protobuf.StringValue
	24, // 43: com.coralogix.tags.v1.GetTagsRequest.QueryDef.QueryParams.SortModel.ordering:type_name -> google.protobuf.StringValue
	24, // 44: com.coralogix.tags.v1.GetTagsRequest.QueryDef.QueryParams.SortModel.missing:type_name -> google.protobuf.StringValue
	31, // 45: com.coralogix.tags.v1.GetTagSummaryResponse.Summary.tag_result:type_name -> google.protobuf.DoubleValue
	31, // 46: com.coralogix.tags.v1.GetTagSummaryResponse.Summary.compare_result:type_name -> google.protobuf.DoubleValue
	24, // 47: com.coralogix.tags.v1.GetTagSummaryResponse.Summary.link_cache_id:type_name -> google.protobuf.StringValue
	24, // 48: com.coralogix.tags.v1.GetTagSummaryResponse.Summary.type:type_name -> google.protobuf.StringValue
	24, // 49: com.coralogix.tags.v1.GetTagAlertsResponse.AlertInfo.name:type_name -> google.protobuf.StringValue
	30, // 50: com.coralogix.tags.v1.GetTagAlertsResponse.AlertInfo.severity:type_name -> google.protobuf.Int32Value
	30, // 51: com.coralogix.tags.v1.GetTagAlertsResponse.AlertInfo.size:type_name -> google.protobuf.Int32Value
	30, // 52: com.coralogix.tags.v1.GetTagAlertsResponse.SeverityInfo.severity:type_name -> google.protobuf.Int32Value
	30, // 53: com.coralogix.tags.v1.GetTagAlertsResponse.SeverityInfo.size:type_name -> google.protobuf.Int32Value
	13, // 54: com.coralogix.tags.v1.GetTagAlertsResponse.VolumeCompareGraph.compare_tag:type_name -> com.coralogix.tags.v1.GraphPoint
	13, // 55: com.coralogix.tags.v1.GetTagAlertsResponse.VolumeCompareGraph.tag:type_name -> com.coralogix.tags.v1.GraphPoint
	0,  // 56: com.coralogix.tags.v1.TagsService.CreateTag:input_type -> com.coralogix.tags.v1.CreateTagRequest
	1,  // 57: com.coralogix.tags.v1.TagsService.GetTags:input_type -> com.coralogix.tags.v1.GetTagsRequest
	2,  // 58: com.coralogix.tags.v1.TagsService.UpdateTag:input_type -> com.coralogix.tags.v1.UpdateTagRequest
	4,  // 59: com.coralogix.tags.v1.TagsService.DeleteTag:input_type -> com.coralogix.tags.v1.DeleteTagRequest
	5,  // 60: com.coralogix.tags.v1.TagsService.GetTagSummary:input_type -> com.coralogix.tags.v1.GetTagSummaryRequest
	6,  // 61: com.coralogix.tags.v1.TagsService.GetTagAlerts:input_type -> com.coralogix.tags.v1.GetTagAlertsRequest
	7,  // 62: com.coralogix.tags.v1.TagsService.GetTagErrorVolume:input_type -> com.coralogix.tags.v1.GetTagErrorVolumeRequest
	8,  // 63: com.coralogix.tags.v1.TagsService.CreateTag:output_type -> com.coralogix.tags.v1.CreateTagResponse
	9,  // 64: com.coralogix.tags.v1.TagsService.GetTags:output_type -> com.coralogix.tags.v1.GetTagsResponse
	10, // 65: com.coralogix.tags.v1.TagsService.UpdateTag:output_type -> com.coralogix.tags.v1.UpdateTagResponse
	11, // 66: com.coralogix.tags.v1.TagsService.DeleteTag:output_type -> com.coralogix.tags.v1.DeleteTagResponse
	12, // 67: com.coralogix.tags.v1.TagsService.GetTagSummary:output_type -> com.coralogix.tags.v1.GetTagSummaryResponse
	14, // 68: com.coralogix.tags.v1.TagsService.GetTagAlerts:output_type -> com.coralogix.tags.v1.GetTagAlertsResponse
	15, // 69: com.coralogix.tags.v1.TagsService.GetTagErrorVolume:output_type -> com.coralogix.tags.v1.GetTagErrorVolumeResponse
	63, // [63:70] is the sub-list for method output_type
	56, // [56:63] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_com_coralogix_tags_v1_tag_service_proto_init() }
func file_com_coralogix_tags_v1_tag_service_proto_init() {
	if File_com_coralogix_tags_v1_tag_service_proto != nil {
		return
	}
	file_com_coralogix_tags_v1_tag_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_tags_v1_tag_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogix_tags_v1_tag_service_proto_goTypes,
		DependencyIndexes: file_com_coralogix_tags_v1_tag_service_proto_depIdxs,
		MessageInfos:      file_com_coralogix_tags_v1_tag_service_proto_msgTypes,
	}.Build()
	File_com_coralogix_tags_v1_tag_service_proto = out.File
	file_com_coralogix_tags_v1_tag_service_proto_rawDesc = nil
	file_com_coralogix_tags_v1_tag_service_proto_goTypes = nil
	file_com_coralogix_tags_v1_tag_service_proto_depIdxs = nil
}
