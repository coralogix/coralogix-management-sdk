// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: com/coralogix/archive/private/state/v1/state_value.proto

package v1

import (
	v1 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/archive/dataset/v1"
	v2 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/archive/v2"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StateValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId                    *string              `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3,oneof" json:"company_id,omitempty"`
	AggregatedSchema             *Schema              `protobuf:"bytes,2,opt,name=aggregated_schema,json=aggregatedSchema,proto3,oneof" json:"aggregated_schema,omitempty"`
	TotalSize                    int64                `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	Files                        []*S3Object          `protobuf:"bytes,4,rep,name=files,proto3" json:"files,omitempty"`
	AggregatingSince             *timestamp.Timestamp `protobuf:"bytes,5,opt,name=aggregating_since,json=aggregatingSince,proto3" json:"aggregating_since,omitempty"`
	Target                       *v2.ArchiveTarget    `protobuf:"bytes,6,opt,name=target,proto3,oneof" json:"target,omitempty"`
	EarliestIngestionTime        *timestamp.Timestamp `protobuf:"bytes,7,opt,name=earliest_ingestion_time,json=earliestIngestionTime,proto3" json:"earliest_ingestion_time,omitempty"`
	TotalRowCount                *int64               `protobuf:"varint,8,opt,name=total_row_count,json=totalRowCount,proto3,oneof" json:"total_row_count,omitempty"`
	InputFormat                  *v2.Format           `protobuf:"bytes,9,opt,name=input_format,json=inputFormat,proto3,oneof" json:"input_format,omitempty"`
	Dataset                      *v1.Dataset          `protobuf:"bytes,10,opt,name=dataset,proto3,oneof" json:"dataset,omitempty"`
	CompactionLevel              int32                `protobuf:"varint,11,opt,name=compaction_level,json=compactionLevel,proto3" json:"compaction_level,omitempty"`
	TreeSchema                   *TreeSchema          `protobuf:"bytes,12,opt,name=tree_schema,json=treeSchema,proto3,oneof" json:"tree_schema,omitempty"`
	Truncated                    bool                 `protobuf:"varint,13,opt,name=truncated,proto3" json:"truncated,omitempty"`
	CompactionJobTimestampMinMax *MinMax              `protobuf:"bytes,14,opt,name=compaction_job_timestamp_min_max,json=compactionJobTimestampMinMax,proto3,oneof" json:"compaction_job_timestamp_min_max,omitempty"`
}

func (x *StateValue) Reset() {
	*x = StateValue{}
	mi := &file_com_coralogix_archive_private_state_v1_state_value_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateValue) ProtoMessage() {}

func (x *StateValue) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_private_state_v1_state_value_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateValue.ProtoReflect.Descriptor instead.
func (*StateValue) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_private_state_v1_state_value_proto_rawDescGZIP(), []int{0}
}

func (x *StateValue) GetCompanyId() string {
	if x != nil && x.CompanyId != nil {
		return *x.CompanyId
	}
	return ""
}

func (x *StateValue) GetAggregatedSchema() *Schema {
	if x != nil {
		return x.AggregatedSchema
	}
	return nil
}

func (x *StateValue) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *StateValue) GetFiles() []*S3Object {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *StateValue) GetAggregatingSince() *timestamp.Timestamp {
	if x != nil {
		return x.AggregatingSince
	}
	return nil
}

func (x *StateValue) GetTarget() *v2.ArchiveTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *StateValue) GetEarliestIngestionTime() *timestamp.Timestamp {
	if x != nil {
		return x.EarliestIngestionTime
	}
	return nil
}

func (x *StateValue) GetTotalRowCount() int64 {
	if x != nil && x.TotalRowCount != nil {
		return *x.TotalRowCount
	}
	return 0
}

func (x *StateValue) GetInputFormat() *v2.Format {
	if x != nil {
		return x.InputFormat
	}
	return nil
}

func (x *StateValue) GetDataset() *v1.Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *StateValue) GetCompactionLevel() int32 {
	if x != nil {
		return x.CompactionLevel
	}
	return 0
}

func (x *StateValue) GetTreeSchema() *TreeSchema {
	if x != nil {
		return x.TreeSchema
	}
	return nil
}

func (x *StateValue) GetTruncated() bool {
	if x != nil {
		return x.Truncated
	}
	return false
}

func (x *StateValue) GetCompactionJobTimestampMinMax() *MinMax {
	if x != nil {
		return x.CompactionJobTimestampMinMax
	}
	return nil
}

var File_com_coralogix_archive_private_state_v1_state_value_proto protoreflect.FileDescriptor

var file_com_coralogix_archive_private_state_v1_state_value_proto_rawDesc = []byte{
	0x0a, 0x38, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x6e, 0x5f,
	0x6d, 0x61, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x33, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x08, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x11, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x48, 0x01, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x33, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x48, 0x02, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x17, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15,
	0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x48, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x04, 0x52, 0x0b, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x48, 0x05, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x58, 0x0a, 0x0b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48, 0x06, 0x52, 0x0a, 0x74, 0x72,
	0x65, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x7b, 0x0a, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e,
	0x4d, 0x61, 0x78, 0x48, 0x07, 0x52, 0x1c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x6e,
	0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_archive_private_state_v1_state_value_proto_rawDescOnce sync.Once
	file_com_coralogix_archive_private_state_v1_state_value_proto_rawDescData = file_com_coralogix_archive_private_state_v1_state_value_proto_rawDesc
)

func file_com_coralogix_archive_private_state_v1_state_value_proto_rawDescGZIP() []byte {
	file_com_coralogix_archive_private_state_v1_state_value_proto_rawDescOnce.Do(func() {
		file_com_coralogix_archive_private_state_v1_state_value_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_archive_private_state_v1_state_value_proto_rawDescData)
	})
	return file_com_coralogix_archive_private_state_v1_state_value_proto_rawDescData
}

var file_com_coralogix_archive_private_state_v1_state_value_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_com_coralogix_archive_private_state_v1_state_value_proto_goTypes = []any{
	(*StateValue)(nil),          // 0: com.coralogix.archive.private.state.v1.StateValue
	(*Schema)(nil),              // 1: com.coralogix.archive.private.state.v1.Schema
	(*S3Object)(nil),            // 2: com.coralogix.archive.private.state.v1.S3Object
	(*timestamp.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*v2.ArchiveTarget)(nil),    // 4: com.coralogix.archive.v2.ArchiveTarget
	(*v2.Format)(nil),           // 5: com.coralogix.archive.v2.Format
	(*v1.Dataset)(nil),          // 6: com.coralogix.archive.dataset.v1.Dataset
	(*TreeSchema)(nil),          // 7: com.coralogix.archive.private.state.v1.TreeSchema
	(*MinMax)(nil),              // 8: com.coralogix.archive.private.state.v1.MinMax
}
var file_com_coralogix_archive_private_state_v1_state_value_proto_depIdxs = []int32{
	1, // 0: com.coralogix.archive.private.state.v1.StateValue.aggregated_schema:type_name -> com.coralogix.archive.private.state.v1.Schema
	2, // 1: com.coralogix.archive.private.state.v1.StateValue.files:type_name -> com.coralogix.archive.private.state.v1.S3Object
	3, // 2: com.coralogix.archive.private.state.v1.StateValue.aggregating_since:type_name -> google.protobuf.Timestamp
	4, // 3: com.coralogix.archive.private.state.v1.StateValue.target:type_name -> com.coralogix.archive.v2.ArchiveTarget
	3, // 4: com.coralogix.archive.private.state.v1.StateValue.earliest_ingestion_time:type_name -> google.protobuf.Timestamp
	5, // 5: com.coralogix.archive.private.state.v1.StateValue.input_format:type_name -> com.coralogix.archive.v2.Format
	6, // 6: com.coralogix.archive.private.state.v1.StateValue.dataset:type_name -> com.coralogix.archive.dataset.v1.Dataset
	7, // 7: com.coralogix.archive.private.state.v1.StateValue.tree_schema:type_name -> com.coralogix.archive.private.state.v1.TreeSchema
	8, // 8: com.coralogix.archive.private.state.v1.StateValue.compaction_job_timestamp_min_max:type_name -> com.coralogix.archive.private.state.v1.MinMax
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_com_coralogix_archive_private_state_v1_state_value_proto_init() }
func file_com_coralogix_archive_private_state_v1_state_value_proto_init() {
	if File_com_coralogix_archive_private_state_v1_state_value_proto != nil {
		return
	}
	file_com_coralogix_archive_private_state_v1_min_max_proto_init()
	file_com_coralogix_archive_private_state_v1_tree_schema_proto_init()
	file_com_coralogix_archive_private_state_v1_schema_proto_init()
	file_com_coralogix_archive_private_state_v1_s3_object_proto_init()
	file_com_coralogix_archive_private_state_v1_state_value_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_archive_private_state_v1_state_value_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_archive_private_state_v1_state_value_proto_goTypes,
		DependencyIndexes: file_com_coralogix_archive_private_state_v1_state_value_proto_depIdxs,
		MessageInfos:      file_com_coralogix_archive_private_state_v1_state_value_proto_msgTypes,
	}.Build()
	File_com_coralogix_archive_private_state_v1_state_value_proto = out.File
	file_com_coralogix_archive_private_state_v1_state_value_proto_rawDesc = nil
	file_com_coralogix_archive_private_state_v1_state_value_proto_goTypes = nil
	file_com_coralogix_archive_private_state_v1_state_value_proto_depIdxs = nil
}
