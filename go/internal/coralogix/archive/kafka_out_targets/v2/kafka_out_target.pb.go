// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: com/coralogix/archive/kafka_out_targets/v2/kafka_out_target.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompressionType int32

const (
	CompressionType_COMPRESSION_TYPE_UNSPECIFIED CompressionType = 0
	CompressionType_COMPRESSION_TYPE_GZIP        CompressionType = 1
)

// Enum value maps for CompressionType.
var (
	CompressionType_name = map[int32]string{
		0: "COMPRESSION_TYPE_UNSPECIFIED",
		1: "COMPRESSION_TYPE_GZIP",
	}
	CompressionType_value = map[string]int32{
		"COMPRESSION_TYPE_UNSPECIFIED": 0,
		"COMPRESSION_TYPE_GZIP":        1,
	}
)

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}

func (x CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_enumTypes[0].Descriptor()
}

func (CompressionType) Type() protoreflect.EnumType {
	return &file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_enumTypes[0]
}

func (x CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionType.Descriptor instead.
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDescGZIP(), []int{0}
}

type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TargetSpec:
	//
	//	*Target_AwsMsk
	//	*Target_IbmEventStreams
	TargetSpec   isTarget_TargetSpec `protobuf_oneof:"target_spec"`
	KafkaOutSpec *KafkaOutSpec       `protobuf:"bytes,4,opt,name=kafka_out_spec,json=kafkaOutSpec,proto3" json:"kafka_out_spec,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDescGZIP(), []int{0}
}

func (m *Target) GetTargetSpec() isTarget_TargetSpec {
	if m != nil {
		return m.TargetSpec
	}
	return nil
}

func (x *Target) GetAwsMsk() *AwsMsk {
	if x, ok := x.GetTargetSpec().(*Target_AwsMsk); ok {
		return x.AwsMsk
	}
	return nil
}

func (x *Target) GetIbmEventStreams() *IbmEventStreams {
	if x, ok := x.GetTargetSpec().(*Target_IbmEventStreams); ok {
		return x.IbmEventStreams
	}
	return nil
}

func (x *Target) GetKafkaOutSpec() *KafkaOutSpec {
	if x != nil {
		return x.KafkaOutSpec
	}
	return nil
}

type isTarget_TargetSpec interface {
	isTarget_TargetSpec()
}

type Target_AwsMsk struct {
	AwsMsk *AwsMsk `protobuf:"bytes,1,opt,name=aws_msk,json=awsMsk,proto3,oneof"`
}

type Target_IbmEventStreams struct {
	IbmEventStreams *IbmEventStreams `protobuf:"bytes,2,opt,name=ibm_event_streams,json=ibmEventStreams,proto3,oneof"`
}

func (*Target_AwsMsk) isTarget_TargetSpec() {}

func (*Target_IbmEventStreams) isTarget_TargetSpec() {}

type AwsMsk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicEndpoints string `protobuf:"bytes,1,opt,name=public_endpoints,json=publicEndpoints,proto3" json:"public_endpoints,omitempty"`
	Topic           string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *AwsMsk) Reset() {
	*x = AwsMsk{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsMsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsMsk) ProtoMessage() {}

func (x *AwsMsk) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsMsk.ProtoReflect.Descriptor instead.
func (*AwsMsk) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDescGZIP(), []int{1}
}

func (x *AwsMsk) GetPublicEndpoints() string {
	if x != nil {
		return x.PublicEndpoints
	}
	return ""
}

func (x *AwsMsk) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type IbmEventStreams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brokers string `protobuf:"bytes,1,opt,name=brokers,proto3" json:"brokers,omitempty"`
	Topic   string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *IbmEventStreams) Reset() {
	*x = IbmEventStreams{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IbmEventStreams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IbmEventStreams) ProtoMessage() {}

func (x *IbmEventStreams) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IbmEventStreams.ProtoReflect.Descriptor instead.
func (*IbmEventStreams) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDescGZIP(), []int{2}
}

func (x *IbmEventStreams) GetBrokers() string {
	if x != nil {
		return x.Brokers
	}
	return ""
}

func (x *IbmEventStreams) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type KafkaOutSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *uint32                `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsActive        bool                   `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	DpxlExpression  string                 `protobuf:"bytes,4,opt,name=dpxl_expression,json=dpxlExpression,proto3" json:"dpxl_expression,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CompressionType *CompressionType       `protobuf:"varint,7,opt,name=compression_type,json=compressionType,proto3,enum=com.coralogix.archive.kafka_out_targets.v2.CompressionType,oneof" json:"compression_type,omitempty"`
}

func (x *KafkaOutSpec) Reset() {
	*x = KafkaOutSpec{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaOutSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaOutSpec) ProtoMessage() {}

func (x *KafkaOutSpec) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaOutSpec.ProtoReflect.Descriptor instead.
func (*KafkaOutSpec) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDescGZIP(), []int{3}
}

func (x *KafkaOutSpec) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *KafkaOutSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KafkaOutSpec) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *KafkaOutSpec) GetDpxlExpression() string {
	if x != nil {
		return x.DpxlExpression
	}
	return ""
}

func (x *KafkaOutSpec) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *KafkaOutSpec) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *KafkaOutSpec) GetCompressionType() CompressionType {
	if x != nil && x.CompressionType != nil {
		return *x.CompressionType
	}
	return CompressionType_COMPRESSION_TYPE_UNSPECIFIED
}

var File_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto protoreflect.FileDescriptor

var file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDesc = []byte{
	0x0a, 0x41, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb1, 0x02, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x61,
	0x77, 0x73, 0x5f, 0x6d, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x77, 0x73, 0x4d, 0x73, 0x6b,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x77, 0x73, 0x4d, 0x73, 0x6b, 0x12, 0x69, 0x0a, 0x11, 0x69, 0x62,
	0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x62, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x62, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x5e, 0x0a, 0x0e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x4f, 0x75, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x75,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x22, 0x49, 0x0a, 0x06, 0x41, 0x77, 0x73, 0x4d, 0x73, 0x6b, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22,
	0x41, 0x0a, 0x0f, 0x49, 0x62, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x22, 0xfc, 0x02, 0x0a, 0x0c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x75, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x70, 0x78,
	0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x70, 0x78, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x6b, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2a, 0x4e, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x5a, 0x49, 0x50, 0x10,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDescOnce sync.Once
	file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDescData = file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDesc
)

func file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDescGZIP() []byte {
	file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDescOnce.Do(func() {
		file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDescData)
	})
	return file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDescData
}

var file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_goTypes = []any{
	(CompressionType)(0),          // 0: com.coralogix.archive.kafka_out_targets.v2.CompressionType
	(*Target)(nil),                // 1: com.coralogix.archive.kafka_out_targets.v2.Target
	(*AwsMsk)(nil),                // 2: com.coralogix.archive.kafka_out_targets.v2.AwsMsk
	(*IbmEventStreams)(nil),       // 3: com.coralogix.archive.kafka_out_targets.v2.IbmEventStreams
	(*KafkaOutSpec)(nil),          // 4: com.coralogix.archive.kafka_out_targets.v2.KafkaOutSpec
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_depIdxs = []int32{
	2, // 0: com.coralogix.archive.kafka_out_targets.v2.Target.aws_msk:type_name -> com.coralogix.archive.kafka_out_targets.v2.AwsMsk
	3, // 1: com.coralogix.archive.kafka_out_targets.v2.Target.ibm_event_streams:type_name -> com.coralogix.archive.kafka_out_targets.v2.IbmEventStreams
	4, // 2: com.coralogix.archive.kafka_out_targets.v2.Target.kafka_out_spec:type_name -> com.coralogix.archive.kafka_out_targets.v2.KafkaOutSpec
	5, // 3: com.coralogix.archive.kafka_out_targets.v2.KafkaOutSpec.created_at:type_name -> google.protobuf.Timestamp
	5, // 4: com.coralogix.archive.kafka_out_targets.v2.KafkaOutSpec.updated_at:type_name -> google.protobuf.Timestamp
	0, // 5: com.coralogix.archive.kafka_out_targets.v2.KafkaOutSpec.compression_type:type_name -> com.coralogix.archive.kafka_out_targets.v2.CompressionType
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_init() }
func file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_init() {
	if File_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto != nil {
		return
	}
	file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_msgTypes[0].OneofWrappers = []any{
		(*Target_AwsMsk)(nil),
		(*Target_IbmEventStreams)(nil),
	}
	file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_goTypes,
		DependencyIndexes: file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_depIdxs,
		EnumInfos:         file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_enumTypes,
		MessageInfos:      file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_msgTypes,
	}.Build()
	File_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto = out.File
	file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_rawDesc = nil
	file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_goTypes = nil
	file_com_coralogix_archive_kafka_out_targets_v2_kafka_out_target_proto_depIdxs = nil
}
