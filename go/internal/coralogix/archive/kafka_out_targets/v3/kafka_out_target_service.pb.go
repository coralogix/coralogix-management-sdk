// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: com/coralogix/archive/kafka_out_targets/v3/kafka_out_target_service.proto

package v3

import (
	_ "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetKafkaOutTargetsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKafkaOutTargetsRequest) Reset() {
	*x = GetKafkaOutTargetsRequest{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKafkaOutTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKafkaOutTargetsRequest) ProtoMessage() {}

func (x *GetKafkaOutTargetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKafkaOutTargetsRequest.ProtoReflect.Descriptor instead.
func (*GetKafkaOutTargetsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescGZIP(), []int{0}
}

type GetKafkaOutTargetsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Targets       []*Target              `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKafkaOutTargetsResponse) Reset() {
	*x = GetKafkaOutTargetsResponse{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKafkaOutTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKafkaOutTargetsResponse) ProtoMessage() {}

func (x *GetKafkaOutTargetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKafkaOutTargetsResponse.ProtoReflect.Descriptor instead.
func (*GetKafkaOutTargetsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetKafkaOutTargetsResponse) GetTargets() []*Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

type UpsertKafkaOutTargetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        *Target                `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertKafkaOutTargetRequest) Reset() {
	*x = UpsertKafkaOutTargetRequest{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertKafkaOutTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertKafkaOutTargetRequest) ProtoMessage() {}

func (x *UpsertKafkaOutTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertKafkaOutTargetRequest.ProtoReflect.Descriptor instead.
func (*UpsertKafkaOutTargetRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpsertKafkaOutTargetRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type UpsertKafkaOutTargetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        *Target                `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertKafkaOutTargetResponse) Reset() {
	*x = UpsertKafkaOutTargetResponse{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertKafkaOutTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertKafkaOutTargetResponse) ProtoMessage() {}

func (x *UpsertKafkaOutTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertKafkaOutTargetResponse.ProtoReflect.Descriptor instead.
func (*UpsertKafkaOutTargetResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpsertKafkaOutTargetResponse) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type DeleteKafkaOutTargetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKafkaOutTargetRequest) Reset() {
	*x = DeleteKafkaOutTargetRequest{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKafkaOutTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKafkaOutTargetRequest) ProtoMessage() {}

func (x *DeleteKafkaOutTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKafkaOutTargetRequest.ProtoReflect.Descriptor instead.
func (*DeleteKafkaOutTargetRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteKafkaOutTargetRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteKafkaOutTargetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKafkaOutTargetResponse) Reset() {
	*x = DeleteKafkaOutTargetResponse{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKafkaOutTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKafkaOutTargetResponse) ProtoMessage() {}

func (x *DeleteKafkaOutTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKafkaOutTargetResponse.ProtoReflect.Descriptor instead.
func (*DeleteKafkaOutTargetResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescGZIP(), []int{5}
}

type SendKafkaOutTestMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        *Target                `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendKafkaOutTestMessageRequest) Reset() {
	*x = SendKafkaOutTestMessageRequest{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendKafkaOutTestMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendKafkaOutTestMessageRequest) ProtoMessage() {}

func (x *SendKafkaOutTestMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendKafkaOutTestMessageRequest.ProtoReflect.Descriptor instead.
func (*SendKafkaOutTestMessageRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescGZIP(), []int{6}
}

func (x *SendKafkaOutTestMessageRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type SendKafkaOutTestMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendKafkaOutTestMessageResponse) Reset() {
	*x = SendKafkaOutTestMessageResponse{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendKafkaOutTestMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendKafkaOutTestMessageResponse) ProtoMessage() {}

func (x *SendKafkaOutTestMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendKafkaOutTestMessageResponse.ProtoReflect.Descriptor instead.
func (*SendKafkaOutTestMessageResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescGZIP(), []int{7}
}

var File_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto protoreflect.FileDescriptor

const file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDesc = "" +
	"\n" +
	"Icom/coralogix/archive/kafka_out_targets/v3/kafka_out_target_service.proto\x12*com.coralogix.archive.kafka_out_targets.v3\x1a'com/coralogix/common/v1/audit_log.proto\x1aAcom/coralogix/archive/kafka_out_targets/v3/kafka_out_target.proto\"\x1b\n" +
	"\x19GetKafkaOutTargetsRequest\"j\n" +
	"\x1aGetKafkaOutTargetsResponse\x12L\n" +
	"\atargets\x18\x01 \x03(\v22.com.coralogix.archive.kafka_out_targets.v3.TargetR\atargets\"i\n" +
	"\x1bUpsertKafkaOutTargetRequest\x12J\n" +
	"\x06target\x18\x01 \x01(\v22.com.coralogix.archive.kafka_out_targets.v3.TargetR\x06target\"j\n" +
	"\x1cUpsertKafkaOutTargetResponse\x12J\n" +
	"\x06target\x18\x01 \x01(\v22.com.coralogix.archive.kafka_out_targets.v3.TargetR\x06target\"-\n" +
	"\x1bDeleteKafkaOutTargetRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\"\x1e\n" +
	"\x1cDeleteKafkaOutTargetResponse\"l\n" +
	"\x1eSendKafkaOutTestMessageRequest\x12J\n" +
	"\x06target\x18\x01 \x01(\v22.com.coralogix.archive.kafka_out_targets.v3.TargetR\x06target\"!\n" +
	"\x1fSendKafkaOutTestMessageResponse2\xc8\x06\n" +
	"\x15KafkaOutTargetService\x12\xc0\x01\n" +
	"\x12GetKafkaOutTargets\x12E.com.coralogix.archive.kafka_out_targets.v3.GetKafkaOutTargetsRequest\x1aF.com.coralogix.archive.kafka_out_targets.v3.GetKafkaOutTargetsResponse\"\x1b¸\x02\x17\n" +
	"\x15Get kafka out targets\x12\xc8\x01\n" +
	"\x14UpsertKafkaOutTarget\x12G.com.coralogix.archive.kafka_out_targets.v3.UpsertKafkaOutTargetRequest\x1aH.com.coralogix.archive.kafka_out_targets.v3.UpsertKafkaOutTargetResponse\"\x1d¸\x02\x19\n" +
	"\x17Upsert kafka out target\x12\xc8\x01\n" +
	"\x14DeleteKafkaOutTarget\x12G.com.coralogix.archive.kafka_out_targets.v3.DeleteKafkaOutTargetRequest\x1aH.com.coralogix.archive.kafka_out_targets.v3.DeleteKafkaOutTargetResponse\"\x1d¸\x02\x19\n" +
	"\x17Delete kafka out target\x12\xd5\x01\n" +
	"\x17SendKafkaOutTestMessage\x12J.com.coralogix.archive.kafka_out_targets.v3.SendKafkaOutTestMessageRequest\x1aK.com.coralogix.archive.kafka_out_targets.v3.SendKafkaOutTestMessageResponse\"!¸\x02\x1d\n" +
	"\x1bSend kafka out test messageb\x06proto3"

var (
	file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescOnce sync.Once
	file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescData []byte
)

func file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescGZIP() []byte {
	file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescOnce.Do(func() {
		file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDesc), len(file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDesc)))
	})
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDescData
}

var file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_goTypes = []any{
	(*GetKafkaOutTargetsRequest)(nil),       // 0: com.coralogix.archive.kafka_out_targets.v3.GetKafkaOutTargetsRequest
	(*GetKafkaOutTargetsResponse)(nil),      // 1: com.coralogix.archive.kafka_out_targets.v3.GetKafkaOutTargetsResponse
	(*UpsertKafkaOutTargetRequest)(nil),     // 2: com.coralogix.archive.kafka_out_targets.v3.UpsertKafkaOutTargetRequest
	(*UpsertKafkaOutTargetResponse)(nil),    // 3: com.coralogix.archive.kafka_out_targets.v3.UpsertKafkaOutTargetResponse
	(*DeleteKafkaOutTargetRequest)(nil),     // 4: com.coralogix.archive.kafka_out_targets.v3.DeleteKafkaOutTargetRequest
	(*DeleteKafkaOutTargetResponse)(nil),    // 5: com.coralogix.archive.kafka_out_targets.v3.DeleteKafkaOutTargetResponse
	(*SendKafkaOutTestMessageRequest)(nil),  // 6: com.coralogix.archive.kafka_out_targets.v3.SendKafkaOutTestMessageRequest
	(*SendKafkaOutTestMessageResponse)(nil), // 7: com.coralogix.archive.kafka_out_targets.v3.SendKafkaOutTestMessageResponse
	(*Target)(nil),                          // 8: com.coralogix.archive.kafka_out_targets.v3.Target
}
var file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_depIdxs = []int32{
	8, // 0: com.coralogix.archive.kafka_out_targets.v3.GetKafkaOutTargetsResponse.targets:type_name -> com.coralogix.archive.kafka_out_targets.v3.Target
	8, // 1: com.coralogix.archive.kafka_out_targets.v3.UpsertKafkaOutTargetRequest.target:type_name -> com.coralogix.archive.kafka_out_targets.v3.Target
	8, // 2: com.coralogix.archive.kafka_out_targets.v3.UpsertKafkaOutTargetResponse.target:type_name -> com.coralogix.archive.kafka_out_targets.v3.Target
	8, // 3: com.coralogix.archive.kafka_out_targets.v3.SendKafkaOutTestMessageRequest.target:type_name -> com.coralogix.archive.kafka_out_targets.v3.Target
	0, // 4: com.coralogix.archive.kafka_out_targets.v3.KafkaOutTargetService.GetKafkaOutTargets:input_type -> com.coralogix.archive.kafka_out_targets.v3.GetKafkaOutTargetsRequest
	2, // 5: com.coralogix.archive.kafka_out_targets.v3.KafkaOutTargetService.UpsertKafkaOutTarget:input_type -> com.coralogix.archive.kafka_out_targets.v3.UpsertKafkaOutTargetRequest
	4, // 6: com.coralogix.archive.kafka_out_targets.v3.KafkaOutTargetService.DeleteKafkaOutTarget:input_type -> com.coralogix.archive.kafka_out_targets.v3.DeleteKafkaOutTargetRequest
	6, // 7: com.coralogix.archive.kafka_out_targets.v3.KafkaOutTargetService.SendKafkaOutTestMessage:input_type -> com.coralogix.archive.kafka_out_targets.v3.SendKafkaOutTestMessageRequest
	1, // 8: com.coralogix.archive.kafka_out_targets.v3.KafkaOutTargetService.GetKafkaOutTargets:output_type -> com.coralogix.archive.kafka_out_targets.v3.GetKafkaOutTargetsResponse
	3, // 9: com.coralogix.archive.kafka_out_targets.v3.KafkaOutTargetService.UpsertKafkaOutTarget:output_type -> com.coralogix.archive.kafka_out_targets.v3.UpsertKafkaOutTargetResponse
	5, // 10: com.coralogix.archive.kafka_out_targets.v3.KafkaOutTargetService.DeleteKafkaOutTarget:output_type -> com.coralogix.archive.kafka_out_targets.v3.DeleteKafkaOutTargetResponse
	7, // 11: com.coralogix.archive.kafka_out_targets.v3.KafkaOutTargetService.SendKafkaOutTestMessage:output_type -> com.coralogix.archive.kafka_out_targets.v3.SendKafkaOutTestMessageResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_init() }
func file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_init() {
	if File_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto != nil {
		return
	}
	file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDesc), len(file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_goTypes,
		DependencyIndexes: file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_depIdxs,
		MessageInfos:      file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_msgTypes,
	}.Build()
	File_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto = out.File
	file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_goTypes = nil
	file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_service_proto_depIdxs = nil
}
