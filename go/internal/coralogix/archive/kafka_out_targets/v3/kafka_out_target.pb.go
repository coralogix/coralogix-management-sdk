// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: com/coralogix/archive/kafka_out_targets/v3/kafka_out_target.proto

package v3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompressionType int32

const (
	CompressionType_COMPRESSION_TYPE_UNSPECIFIED CompressionType = 0
	CompressionType_COMPRESSION_TYPE_GZIP        CompressionType = 1
)

// Enum value maps for CompressionType.
var (
	CompressionType_name = map[int32]string{
		0: "COMPRESSION_TYPE_UNSPECIFIED",
		1: "COMPRESSION_TYPE_GZIP",
	}
	CompressionType_value = map[string]int32{
		"COMPRESSION_TYPE_UNSPECIFIED": 0,
		"COMPRESSION_TYPE_GZIP":        1,
	}
)

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}

func (x CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_enumTypes[0].Descriptor()
}

func (CompressionType) Type() protoreflect.EnumType {
	return &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_enumTypes[0]
}

func (x CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionType.Descriptor instead.
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDescGZIP(), []int{0}
}

type Target struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TargetSpec:
	//
	//	*Target_AwsMsk
	//	*Target_IbmEventStreams
	TargetSpec      isTarget_TargetSpec    `protobuf_oneof:"target_spec"`
	Id              *uint32                `protobuf:"varint,3,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	IsActive        bool                   `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	DpxlExpression  string                 `protobuf:"bytes,6,opt,name=dpxl_expression,json=dpxlExpression,proto3" json:"dpxl_expression,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CompressionType *CompressionType       `protobuf:"varint,9,opt,name=compression_type,json=compressionType,proto3,enum=com.coralogix.archive.kafka_out_targets.v3.CompressionType,oneof" json:"compression_type,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Target) Reset() {
	*x = Target{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDescGZIP(), []int{0}
}

func (x *Target) GetTargetSpec() isTarget_TargetSpec {
	if x != nil {
		return x.TargetSpec
	}
	return nil
}

func (x *Target) GetAwsMsk() *AwsMsk {
	if x != nil {
		if x, ok := x.TargetSpec.(*Target_AwsMsk); ok {
			return x.AwsMsk
		}
	}
	return nil
}

func (x *Target) GetIbmEventStreams() *IbmEventStreams {
	if x != nil {
		if x, ok := x.TargetSpec.(*Target_IbmEventStreams); ok {
			return x.IbmEventStreams
		}
	}
	return nil
}

func (x *Target) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Target) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Target) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Target) GetDpxlExpression() string {
	if x != nil {
		return x.DpxlExpression
	}
	return ""
}

func (x *Target) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Target) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Target) GetCompressionType() CompressionType {
	if x != nil && x.CompressionType != nil {
		return *x.CompressionType
	}
	return CompressionType_COMPRESSION_TYPE_UNSPECIFIED
}

type isTarget_TargetSpec interface {
	isTarget_TargetSpec()
}

type Target_AwsMsk struct {
	AwsMsk *AwsMsk `protobuf:"bytes,1,opt,name=aws_msk,json=awsMsk,proto3,oneof"`
}

type Target_IbmEventStreams struct {
	IbmEventStreams *IbmEventStreams `protobuf:"bytes,2,opt,name=ibm_event_streams,json=ibmEventStreams,proto3,oneof"`
}

func (*Target_AwsMsk) isTarget_TargetSpec() {}

func (*Target_IbmEventStreams) isTarget_TargetSpec() {}

type AwsMsk struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PublicEndpoints string                 `protobuf:"bytes,1,opt,name=public_endpoints,json=publicEndpoints,proto3" json:"public_endpoints,omitempty"`
	Topic           string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AwsMsk) Reset() {
	*x = AwsMsk{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsMsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsMsk) ProtoMessage() {}

func (x *AwsMsk) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsMsk.ProtoReflect.Descriptor instead.
func (*AwsMsk) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDescGZIP(), []int{1}
}

func (x *AwsMsk) GetPublicEndpoints() string {
	if x != nil {
		return x.PublicEndpoints
	}
	return ""
}

func (x *AwsMsk) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type IbmEventStreams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Brokers       string                 `protobuf:"bytes,1,opt,name=brokers,proto3" json:"brokers,omitempty"`
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IbmEventStreams) Reset() {
	*x = IbmEventStreams{}
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IbmEventStreams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IbmEventStreams) ProtoMessage() {}

func (x *IbmEventStreams) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IbmEventStreams.ProtoReflect.Descriptor instead.
func (*IbmEventStreams) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDescGZIP(), []int{2}
}

func (x *IbmEventStreams) GetBrokers() string {
	if x != nil {
		return x.Brokers
	}
	return ""
}

func (x *IbmEventStreams) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

var File_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto protoreflect.FileDescriptor

const file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDesc = "" +
	"\n" +
	"Acom/coralogix/archive/kafka_out_targets/v3/kafka_out_target.proto\x12*com.coralogix.archive.kafka_out_targets.v3\x1a\x1fgoogle/protobuf/timestamp.proto\"\xbf\x04\n" +
	"\x06Target\x12M\n" +
	"\aaws_msk\x18\x01 \x01(\v22.com.coralogix.archive.kafka_out_targets.v3.AwsMskH\x00R\x06awsMsk\x12i\n" +
	"\x11ibm_event_streams\x18\x02 \x01(\v2;.com.coralogix.archive.kafka_out_targets.v3.IbmEventStreamsH\x00R\x0fibmEventStreams\x12\x13\n" +
	"\x02id\x18\x03 \x01(\rH\x01R\x02id\x88\x01\x01\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x1b\n" +
	"\tis_active\x18\x05 \x01(\bR\bisActive\x12'\n" +
	"\x0fdpxl_expression\x18\x06 \x01(\tR\x0edpxlExpression\x129\n" +
	"\n" +
	"created_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12k\n" +
	"\x10compression_type\x18\t \x01(\x0e2;.com.coralogix.archive.kafka_out_targets.v3.CompressionTypeH\x02R\x0fcompressionType\x88\x01\x01B\r\n" +
	"\vtarget_specB\x05\n" +
	"\x03_idB\x13\n" +
	"\x11_compression_type\"I\n" +
	"\x06AwsMsk\x12)\n" +
	"\x10public_endpoints\x18\x01 \x01(\tR\x0fpublicEndpoints\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\"A\n" +
	"\x0fIbmEventStreams\x12\x18\n" +
	"\abrokers\x18\x01 \x01(\tR\abrokers\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic*N\n" +
	"\x0fCompressionType\x12 \n" +
	"\x1cCOMPRESSION_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15COMPRESSION_TYPE_GZIP\x10\x01b\x06proto3"

var (
	file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDescOnce sync.Once
	file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDescData []byte
)

func file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDescGZIP() []byte {
	file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDescOnce.Do(func() {
		file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDesc), len(file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDesc)))
	})
	return file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDescData
}

var file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_goTypes = []any{
	(CompressionType)(0),          // 0: com.coralogix.archive.kafka_out_targets.v3.CompressionType
	(*Target)(nil),                // 1: com.coralogix.archive.kafka_out_targets.v3.Target
	(*AwsMsk)(nil),                // 2: com.coralogix.archive.kafka_out_targets.v3.AwsMsk
	(*IbmEventStreams)(nil),       // 3: com.coralogix.archive.kafka_out_targets.v3.IbmEventStreams
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_depIdxs = []int32{
	2, // 0: com.coralogix.archive.kafka_out_targets.v3.Target.aws_msk:type_name -> com.coralogix.archive.kafka_out_targets.v3.AwsMsk
	3, // 1: com.coralogix.archive.kafka_out_targets.v3.Target.ibm_event_streams:type_name -> com.coralogix.archive.kafka_out_targets.v3.IbmEventStreams
	4, // 2: com.coralogix.archive.kafka_out_targets.v3.Target.created_at:type_name -> google.protobuf.Timestamp
	4, // 3: com.coralogix.archive.kafka_out_targets.v3.Target.updated_at:type_name -> google.protobuf.Timestamp
	0, // 4: com.coralogix.archive.kafka_out_targets.v3.Target.compression_type:type_name -> com.coralogix.archive.kafka_out_targets.v3.CompressionType
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_init() }
func file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_init() {
	if File_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto != nil {
		return
	}
	file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_msgTypes[0].OneofWrappers = []any{
		(*Target_AwsMsk)(nil),
		(*Target_IbmEventStreams)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDesc), len(file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_goTypes,
		DependencyIndexes: file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_depIdxs,
		EnumInfos:         file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_enumTypes,
		MessageInfos:      file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_msgTypes,
	}.Build()
	File_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto = out.File
	file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_goTypes = nil
	file_com_coralogix_archive_kafka_out_targets_v3_kafka_out_target_proto_depIdxs = nil
}
