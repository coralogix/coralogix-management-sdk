// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.1
// source: com/coralogix/archive/dataset/v2/dataset_rules_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SchemaRuleService_SetSchemaRule_FullMethodName = "/com.coralogix.archive.dataset.v2.SchemaRuleService/SetSchemaRule"
	SchemaRuleService_GetSchemaRule_FullMethodName = "/com.coralogix.archive.dataset.v2.SchemaRuleService/GetSchemaRule"
)

// SchemaRuleServiceClient is the client API for SchemaRuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaRuleServiceClient interface {
	SetSchemaRule(ctx context.Context, in *SetSchemaRuleRequest, opts ...grpc.CallOption) (*SetSchemaRuleResponse, error)
	GetSchemaRule(ctx context.Context, in *GetSchemaRuleRequest, opts ...grpc.CallOption) (*GetSchemaRuleResponse, error)
}

type schemaRuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaRuleServiceClient(cc grpc.ClientConnInterface) SchemaRuleServiceClient {
	return &schemaRuleServiceClient{cc}
}

func (c *schemaRuleServiceClient) SetSchemaRule(ctx context.Context, in *SetSchemaRuleRequest, opts ...grpc.CallOption) (*SetSchemaRuleResponse, error) {
	out := new(SetSchemaRuleResponse)
	err := c.cc.Invoke(ctx, SchemaRuleService_SetSchemaRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaRuleServiceClient) GetSchemaRule(ctx context.Context, in *GetSchemaRuleRequest, opts ...grpc.CallOption) (*GetSchemaRuleResponse, error) {
	out := new(GetSchemaRuleResponse)
	err := c.cc.Invoke(ctx, SchemaRuleService_GetSchemaRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaRuleServiceServer is the server API for SchemaRuleService service.
// All implementations must embed UnimplementedSchemaRuleServiceServer
// for forward compatibility
type SchemaRuleServiceServer interface {
	SetSchemaRule(context.Context, *SetSchemaRuleRequest) (*SetSchemaRuleResponse, error)
	GetSchemaRule(context.Context, *GetSchemaRuleRequest) (*GetSchemaRuleResponse, error)
	mustEmbedUnimplementedSchemaRuleServiceServer()
}

// UnimplementedSchemaRuleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaRuleServiceServer struct {
}

func (UnimplementedSchemaRuleServiceServer) SetSchemaRule(context.Context, *SetSchemaRuleRequest) (*SetSchemaRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSchemaRule not implemented")
}
func (UnimplementedSchemaRuleServiceServer) GetSchemaRule(context.Context, *GetSchemaRuleRequest) (*GetSchemaRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaRule not implemented")
}
func (UnimplementedSchemaRuleServiceServer) mustEmbedUnimplementedSchemaRuleServiceServer() {}

// UnsafeSchemaRuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaRuleServiceServer will
// result in compilation errors.
type UnsafeSchemaRuleServiceServer interface {
	mustEmbedUnimplementedSchemaRuleServiceServer()
}

func RegisterSchemaRuleServiceServer(s grpc.ServiceRegistrar, srv SchemaRuleServiceServer) {
	s.RegisterService(&SchemaRuleService_ServiceDesc, srv)
}

func _SchemaRuleService_SetSchemaRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSchemaRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaRuleServiceServer).SetSchemaRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaRuleService_SetSchemaRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaRuleServiceServer).SetSchemaRule(ctx, req.(*SetSchemaRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaRuleService_GetSchemaRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaRuleServiceServer).GetSchemaRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaRuleService_GetSchemaRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaRuleServiceServer).GetSchemaRule(ctx, req.(*GetSchemaRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemaRuleService_ServiceDesc is the grpc.ServiceDesc for SchemaRuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemaRuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.archive.dataset.v2.SchemaRuleService",
	HandlerType: (*SchemaRuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSchemaRule",
			Handler:    _SchemaRuleService_SetSchemaRule_Handler,
		},
		{
			MethodName: "GetSchemaRule",
			Handler:    _SchemaRuleService_GetSchemaRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/archive/dataset/v2/dataset_rules_service.proto",
}
