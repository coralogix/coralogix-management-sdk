// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: com/coralogix/archive/dataset/v2/dataset_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DatasetManagementService_GetAllDatasetRules_FullMethodName = "/com.coralogix.archive.dataset.v2.DatasetManagementService/GetAllDatasetRules"
)

// DatasetManagementServiceClient is the client API for DatasetManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetManagementServiceClient interface {
	GetAllDatasetRules(ctx context.Context, in *GetAllDatasetRulesRequest, opts ...grpc.CallOption) (*GetAllDatasetRulesResponse, error)
}

type datasetManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetManagementServiceClient(cc grpc.ClientConnInterface) DatasetManagementServiceClient {
	return &datasetManagementServiceClient{cc}
}

func (c *datasetManagementServiceClient) GetAllDatasetRules(ctx context.Context, in *GetAllDatasetRulesRequest, opts ...grpc.CallOption) (*GetAllDatasetRulesResponse, error) {
	out := new(GetAllDatasetRulesResponse)
	err := c.cc.Invoke(ctx, DatasetManagementService_GetAllDatasetRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetManagementServiceServer is the server API for DatasetManagementService service.
// All implementations must embed UnimplementedDatasetManagementServiceServer
// for forward compatibility
type DatasetManagementServiceServer interface {
	GetAllDatasetRules(context.Context, *GetAllDatasetRulesRequest) (*GetAllDatasetRulesResponse, error)
	mustEmbedUnimplementedDatasetManagementServiceServer()
}

// UnimplementedDatasetManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatasetManagementServiceServer struct {
}

func (UnimplementedDatasetManagementServiceServer) GetAllDatasetRules(context.Context, *GetAllDatasetRulesRequest) (*GetAllDatasetRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDatasetRules not implemented")
}
func (UnimplementedDatasetManagementServiceServer) mustEmbedUnimplementedDatasetManagementServiceServer() {
}

// UnsafeDatasetManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetManagementServiceServer will
// result in compilation errors.
type UnsafeDatasetManagementServiceServer interface {
	mustEmbedUnimplementedDatasetManagementServiceServer()
}

func RegisterDatasetManagementServiceServer(s grpc.ServiceRegistrar, srv DatasetManagementServiceServer) {
	s.RegisterService(&DatasetManagementService_ServiceDesc, srv)
}

func _DatasetManagementService_GetAllDatasetRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDatasetRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetManagementServiceServer).GetAllDatasetRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetManagementService_GetAllDatasetRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetManagementServiceServer).GetAllDatasetRules(ctx, req.(*GetAllDatasetRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetManagementService_ServiceDesc is the grpc.ServiceDesc for DatasetManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.coralogix.archive.dataset.v2.DatasetManagementService",
	HandlerType: (*DatasetManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllDatasetRules",
			Handler:    _DatasetManagementService_GetAllDatasetRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/coralogix/archive/dataset/v2/dataset_service.proto",
}
