// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.3
// source: com/coralogix/archive/dataset/v2/physical_location.proto

package v2

import (
	v2 "github.com/coralogix/coralogix-management-sdk/go/internal/coralogix/archive/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PhysicalLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsActive bool   `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Types that are assignable to Location:
	//
	//	*PhysicalLocation_S3
	Location isPhysicalLocation_Location `protobuf_oneof:"location"`
}

func (x *PhysicalLocation) Reset() {
	*x = PhysicalLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_archive_dataset_v2_physical_location_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalLocation) ProtoMessage() {}

func (x *PhysicalLocation) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_dataset_v2_physical_location_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalLocation.ProtoReflect.Descriptor instead.
func (*PhysicalLocation) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_dataset_v2_physical_location_proto_rawDescGZIP(), []int{0}
}

func (x *PhysicalLocation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PhysicalLocation) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (m *PhysicalLocation) GetLocation() isPhysicalLocation_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (x *PhysicalLocation) GetS3() *S3Location {
	if x, ok := x.GetLocation().(*PhysicalLocation_S3); ok {
		return x.S3
	}
	return nil
}

type isPhysicalLocation_Location interface {
	isPhysicalLocation_Location()
}

type PhysicalLocation_S3 struct {
	S3 *S3Location `protobuf:"bytes,3,opt,name=s3,proto3,oneof"`
}

func (*PhysicalLocation_S3) isPhysicalLocation_Location() {}

type S3Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Bucket:
	//
	//	*S3Location_Aws
	//	*S3Location_IbmCos
	Bucket             isS3Location_Bucket    `protobuf_oneof:"bucket"`
	Prefix             string                 `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	EnableTags         bool                   `protobuf:"varint,4,opt,name=enable_tags,json=enableTags,proto3" json:"enable_tags,omitempty"`
	FilenamePrefix     *string                `protobuf:"bytes,5,opt,name=filename_prefix,json=filenamePrefix,proto3,oneof" json:"filename_prefix,omitempty"`
	Tags               []*v2.ObjectTag        `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	MaxCompactionLevel int32                  `protobuf:"varint,7,opt,name=max_compaction_level,json=maxCompactionLevel,proto3" json:"max_compaction_level,omitempty"`
	PartitioningScheme *v2.PartitioningScheme `protobuf:"varint,8,opt,name=partitioning_scheme,json=partitioningScheme,proto3,enum=com.coralogix.archive.v2.PartitioningScheme,oneof" json:"partitioning_scheme,omitempty"`
}

func (x *S3Location) Reset() {
	*x = S3Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_archive_dataset_v2_physical_location_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Location) ProtoMessage() {}

func (x *S3Location) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_archive_dataset_v2_physical_location_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Location.ProtoReflect.Descriptor instead.
func (*S3Location) Descriptor() ([]byte, []int) {
	return file_com_coralogix_archive_dataset_v2_physical_location_proto_rawDescGZIP(), []int{1}
}

func (m *S3Location) GetBucket() isS3Location_Bucket {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (x *S3Location) GetAws() *v2.S3TargetSpec {
	if x, ok := x.GetBucket().(*S3Location_Aws); ok {
		return x.Aws
	}
	return nil
}

func (x *S3Location) GetIbmCos() *v2.IBMCosTargetSpec {
	if x, ok := x.GetBucket().(*S3Location_IbmCos); ok {
		return x.IbmCos
	}
	return nil
}

func (x *S3Location) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *S3Location) GetEnableTags() bool {
	if x != nil {
		return x.EnableTags
	}
	return false
}

func (x *S3Location) GetFilenamePrefix() string {
	if x != nil && x.FilenamePrefix != nil {
		return *x.FilenamePrefix
	}
	return ""
}

func (x *S3Location) GetTags() []*v2.ObjectTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *S3Location) GetMaxCompactionLevel() int32 {
	if x != nil {
		return x.MaxCompactionLevel
	}
	return 0
}

func (x *S3Location) GetPartitioningScheme() v2.PartitioningScheme {
	if x != nil && x.PartitioningScheme != nil {
		return *x.PartitioningScheme
	}
	return v2.PartitioningScheme(0)
}

type isS3Location_Bucket interface {
	isS3Location_Bucket()
}

type S3Location_Aws struct {
	Aws *v2.S3TargetSpec `protobuf:"bytes,1,opt,name=aws,proto3,oneof"`
}

type S3Location_IbmCos struct {
	IbmCos *v2.IBMCosTargetSpec `protobuf:"bytes,2,opt,name=ibm_cos,json=ibmCos,proto3,oneof"`
}

func (*S3Location_Aws) isS3Location_Bucket() {}

func (*S3Location_IbmCos) isS3Location_Bucket() {}

var File_com_coralogix_archive_dataset_v2_physical_location_proto protoreflect.FileDescriptor

var file_com_coralogix_archive_dataset_v2_physical_location_proto_rawDesc = []byte{
	0x0a, 0x38, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f,
	0x76, 0x32, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x1a, 0x25, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01,
	0x0a, 0x10, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x3e, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x33, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x02, 0x73, 0x33, 0x42, 0x0a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xfb, 0x03, 0x0a, 0x0a, 0x53, 0x33, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x33, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x69, 0x62,
	0x6d, 0x5f, 0x63, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x42, 0x4d, 0x43, 0x6f, 0x73, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x06, 0x69, 0x62, 0x6d, 0x43, 0x6f,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x62, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x48, 0x02,
	0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_archive_dataset_v2_physical_location_proto_rawDescOnce sync.Once
	file_com_coralogix_archive_dataset_v2_physical_location_proto_rawDescData = file_com_coralogix_archive_dataset_v2_physical_location_proto_rawDesc
)

func file_com_coralogix_archive_dataset_v2_physical_location_proto_rawDescGZIP() []byte {
	file_com_coralogix_archive_dataset_v2_physical_location_proto_rawDescOnce.Do(func() {
		file_com_coralogix_archive_dataset_v2_physical_location_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_archive_dataset_v2_physical_location_proto_rawDescData)
	})
	return file_com_coralogix_archive_dataset_v2_physical_location_proto_rawDescData
}

var file_com_coralogix_archive_dataset_v2_physical_location_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_com_coralogix_archive_dataset_v2_physical_location_proto_goTypes = []interface{}{
	(*PhysicalLocation)(nil),    // 0: com.coralogix.archive.dataset.v2.PhysicalLocation
	(*S3Location)(nil),          // 1: com.coralogix.archive.dataset.v2.S3Location
	(*v2.S3TargetSpec)(nil),     // 2: com.coralogix.archive.v2.S3TargetSpec
	(*v2.IBMCosTargetSpec)(nil), // 3: com.coralogix.archive.v2.IBMCosTargetSpec
	(*v2.ObjectTag)(nil),        // 4: com.coralogix.archive.v2.ObjectTag
	(v2.PartitioningScheme)(0),  // 5: com.coralogix.archive.v2.PartitioningScheme
}
var file_com_coralogix_archive_dataset_v2_physical_location_proto_depIdxs = []int32{
	1, // 0: com.coralogix.archive.dataset.v2.PhysicalLocation.s3:type_name -> com.coralogix.archive.dataset.v2.S3Location
	2, // 1: com.coralogix.archive.dataset.v2.S3Location.aws:type_name -> com.coralogix.archive.v2.S3TargetSpec
	3, // 2: com.coralogix.archive.dataset.v2.S3Location.ibm_cos:type_name -> com.coralogix.archive.v2.IBMCosTargetSpec
	4, // 3: com.coralogix.archive.dataset.v2.S3Location.tags:type_name -> com.coralogix.archive.v2.ObjectTag
	5, // 4: com.coralogix.archive.dataset.v2.S3Location.partitioning_scheme:type_name -> com.coralogix.archive.v2.PartitioningScheme
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_com_coralogix_archive_dataset_v2_physical_location_proto_init() }
func file_com_coralogix_archive_dataset_v2_physical_location_proto_init() {
	if File_com_coralogix_archive_dataset_v2_physical_location_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_coralogix_archive_dataset_v2_physical_location_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_archive_dataset_v2_physical_location_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogix_archive_dataset_v2_physical_location_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PhysicalLocation_S3)(nil),
	}
	file_com_coralogix_archive_dataset_v2_physical_location_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*S3Location_Aws)(nil),
		(*S3Location_IbmCos)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_archive_dataset_v2_physical_location_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_archive_dataset_v2_physical_location_proto_goTypes,
		DependencyIndexes: file_com_coralogix_archive_dataset_v2_physical_location_proto_depIdxs,
		MessageInfos:      file_com_coralogix_archive_dataset_v2_physical_location_proto_msgTypes,
	}.Build()
	File_com_coralogix_archive_dataset_v2_physical_location_proto = out.File
	file_com_coralogix_archive_dataset_v2_physical_location_proto_rawDesc = nil
	file_com_coralogix_archive_dataset_v2_physical_location_proto_goTypes = nil
	file_com_coralogix_archive_dataset_v2_physical_location_proto_depIdxs = nil
}
